Class Hibike:
Entryway into hibike for users. 

User references devices through UID. Hibike maintains a mapping from uid's to the associated device's port and serial objects. This is used to send a user packet to a device
A corresponding mapping from serial to uid is maintained as well for incoming packets. 

Device state information is maintained in a giant dictionary. When a new packet comes in, it updates the corresponding information in the context. When the user queries information on devices, they are actually retrieving the latest information that is stored in the context. 
The dictionary is keyed on uid and contain HibikeDevice objects. 
The user should query devices by passing uid's as arguments to various functions that this class provides. These functions should handle various error cases such as a uid that is not connected. 

A csv config value with default name hibikeDevices.csv is passed in as an argument. Each line contains a deviceID, device name, followed by a list of param names. The dataUpdate param is always present and is always the first param. This is the value that is updated in every data update. 
A mapping must be created from param names to param number for every device. dataUpdate is 0x00, and every subsequent param is one higher. This allows users to write params on their name. 
A mapping from param number to param names does NOT need to be maintained. The param number is simply an index into the list that represents the state of the device. 

Extension: 
HibikeContext: Replace the dictionary with a class dedicated to maintaining state information of devices. 
Make HibikeContexts splittable and mergeable, i.e. one should be able to return a new HibikeContext that contains a subset of the uid's in the original HibikeContext, and also merge two contexts together. 


Class HibikeDevice:
Object that represents a device. 
Saves the subscription delay, and the most recent time the subscription delay was updated
Saves the state of the device as a list. Each element in the list is a (paramValue, updateTime) tuple: paramValue is the value of the parameter, and updateTime is the time this parameter was last updated. The elements are ordered as described in the hibikeDevices.csv file. 


Class HibikeThread: 
This is a background thread that is continuously monitoring devices for incoming packets and updating the device state. 
The user should never interact with this class directly. 


Class HibikeMessage:
Wrapper class for data transfer between Python and C. Constructed with a messageID and a payload
Contains send method that take in a serial port and a hibikeMessage, append a checksum and send the entire packet
read method takes in a serial port and returns a hibikeMessage, if a message is available and the checksum matches. If the checksum is not correct, drop the message and flush the buffer on this serial port. 



Sample user usage:
import random

contextfile = "deviceConfig.txt"
h = Hibike(contextFile)
uids = h.getEnumeratedDevices()
toSubscribe = [(uid[0], random.randrange(1000, 10000, 1000)) for uid in uids]
while(!h.subscribe(toSubscribe)):
  pass

uid = uids[0]
paramNames = h.getParams(uid)
defaultValue = h.getData(uid, "defaultValue")
paramName = paramNames[1]
firstParam = h.getData(uid, paramName)

h.writeValue(uid, paramName, 3)
