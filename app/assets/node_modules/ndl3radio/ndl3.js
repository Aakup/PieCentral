// Licensed to Pioneers in Engineering under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  Pioneers in Engineering licenses
// this file to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
//  with the License.  You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License

// If we're actually inside XULRunner.
if (typeof process === 'undefined') {
  var fake_process = require('sdk/system/process');
  var fake_require = (function (real_require) {
    return function (path) {
        // Put the original arguments into an Array we can slice.
        var args = Array.prototype.slice.call(arguments);

        // These are the node module replacements
        var replacements = {
          'fs': 'sdk/io/fs',
          'path': 'sdk/fs/path',
        };

        // If there's a replacement, use it.
        var replacement = replacements[path];
        if (replacement !== undefined) {
          return real_require.apply(null, [replacement].concat(args.slice(1)));
        }
        else {
          // Otherwise, pass all our arguments to the real require.
          return real_require.apply(null, args);
        }
      };
    })(require);
  // The host (Node.js or XULRunner) will not even create the needed real
  // variables if there is a normal declaration of the variable in this if
  // statement.
  // So hide the declaration inside an eval.
  eval('var process = fake_process;');
  eval('var require = fake_require;');
}

// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  Module['arguments'] = process['argv'].slice(2);

  module['exports'] = Module;
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    return read(f, 'binary');
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  this['Module'] = Module;

  eval("if (typeof gc === 'function' && gc.toString().indexOf('[native code]') > 0) var gc = undefined"); // wipe out the SpiderMonkey shell 'gc' function, which can confuse closure (uses it as a minified name, and it is then initted to a non-falsey value unexpectedly)
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WEB) {
    window['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Auto-generated preamble library stuff ===

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      return '(((' +target + ')+' + (quantum-1) + ')&' + -quantum + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (isArrayType(type)) return true;
  if (/<?\{ ?[^}]* ?\}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  STACK_ALIGN: 8,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    var index = 0;
    type.flatIndexes = type.fields.map(function(field) {
      index++;
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = Runtime.getAlignSize(field, size);
      } else if (Runtime.isStructType(field)) {
        if (field[1] === '0') {
          // this is [0 x something]. When inside another structure like here, it must be at the end,
          // and it adds no size
          // XXX this happens in java-nbody for example... assert(index === type.fields.length, 'zero-length in the middle!');
          size = 0;
          if (Types.types[field]) {
            alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
          } else {
            alignSize = type.alignSize || QUANTUM_SIZE;
          }
        } else {
          size = Types.types[field].flatSize;
          alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
        }
      } else if (field[0] == 'b') {
        // bN, large number field, like a [N x i8]
        size = field.substr(1)|0;
        alignSize = 1;
      } else if (field[0] === '<') {
        // vector type
        size = alignSize = Types.types[field].flatSize; // fully aligned
      } else if (field[0] === 'i') {
        // illegal integer field, that could not be legalized because it is an internal structure field
        // it is ok to have such fields, if we just use them as markers of field size and nothing more complex
        size = alignSize = parseInt(field.substr(1))/8;
        assert(size % 1 === 0, 'cannot handle non-byte-size field ' + field);
      } else {
        assert(false, 'invalid type for calculateStructAlignment');
      }
      if (type.packed) alignSize = 1;
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    if (type.name_ && type.name_[0] === '[') {
      // arrays have 2 elements, so we get the proper difference. then we scale here. that way we avoid
      // allocating a potentially huge array for [999999 x i8] etc.
      type.flatSize = parseInt(type.name_.substr(1))*type.flatSize/2;
    }
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    var source = Pointer_stringify(code);
    if (source[0] === '"') {
      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
      if (source.indexOf('"', 1) === source.length-1) {
        source = source.substr(1, source.length-2);
      } else {
        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
        abort('invalid EM_ASM input |' + source + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
      }
    }
    try {
      var evalled = eval('(function(' + args.join(',') + '){ ' + source + ' })'); // new Function does not allow upvars in node
    } catch(e) {
      Module.printErr('error in executing inline EM_ASM code: ' + e + ' on: \n\n' + source + '\n\nwith args |' + args + '| (make sure to use the right one out of EM_ASM, EM_ASM_ARGS, etc.)');
      throw e;
    }
    return Runtime.asmConstCache[code] = evalled;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;

      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }

      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }

      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          Math.floor((codePoint - 0x10000) / 0x400) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function processJSString(string) {
      /* TODO: use TextEncoder when present,
        var encoder = new TextEncoder();
        encoder['encoding'] = "utf-8";
        var utf8Array = encoder['encode'](aMsg.data);
      */
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+7)&-8); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = (((STATICTOP)+7)&-8); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + size)|0;DYNAMICTOP = (((DYNAMICTOP)+7)&-8); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 8))*(quantum ? quantum : 8); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*(+4294967296))) : ((+((low>>>0)))+((+((high|0)))*(+4294967296)))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;

function jsCall() {
  var args = Array.prototype.slice.call(arguments);
  return Runtime.functionPointers[args[0]].apply(null, args.slice(1));
}








//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Closure can also do so. To avoid that, add your function to
//       the exports using something like
//
//         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
//                   'array' for JavaScript arrays and typed arrays; note that arrays are 8-bit).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
//                   except that 'array' is not possible (there is no way for us to know the length of the array)
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  return ccallFunc(getCFunc(ident), returnType, argTypes, args);
}
Module["ccall"] = ccall;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  try {
    var func = Module['_' + ident]; // closure exported function
    if (!func) func = eval('_' + ident); // explicit lookup
  } catch(e) {
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

// Internal function that does a C call using a function, not an identifier
function ccallFunc(func, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == 'string') {
      if (value === null || value === undefined || value === 0) return 0; // null string
      value = intArrayFromString(value);
      type = 'array';
    }
    if (type == 'array') {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == 'string') {
      return Pointer_stringify(value);
    }
    assert(type != 'array');
    return value;
  }
  var i = 0;
  var cArgs = args ? args.map(function(arg) {
    return toC(arg, argTypes[i++]);
  }) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}

// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  var func = getCFunc(ident);
  return function() {
    return ccallFunc(func, returnType, argTypes, Array.prototype.slice.call(arguments));
  }
}
Module["cwrap"] = cwrap;

// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[(ptr)]=value; break;
      case 'i8': HEAP8[(ptr)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;

// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[(ptr)];
      case 'i8': return HEAP8[(ptr)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)|0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))|0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }

  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    t = HEAPU8[(((ptr)+(i))|0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16LE form. The copy will require at most (str.length*2+1)*2 bytes of space in the HEAP.
function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0;
}
Module['stringToUTF16'] = stringToUTF16;

// Given a pointer 'ptr' to a null-terminated UTF32LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32LE form. The copy will require at most (str.length+1)*4 bytes of space in the HEAP,
// but can use less, since str.length does not return the number of characters in the string, but the number of UTF-16 code units in the string.
function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0;
}
Module['stringToUTF32'] = stringToUTF32;

function demangle(func) {
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    return parse();
  } catch(e) {
    return func;
  }
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function stackTrace() {
  var stack = new Error().stack;
  return stack ? demangleAll(stack) : '(no stack trace available)'; // Stack trace is not available at least on IE10 and Safari 6.
}

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 1600000;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

var totalMemory = 4096;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be more reasonable');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools

// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))|0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))|0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    HEAP8[(((buffer)+(i))|0)]=str.charCodeAt(i);
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))|0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===





STATIC_BASE = 8;

STATICTOP = STATIC_BASE + Runtime.alignMemory(627);
/* global initializers */ __ATINIT__.push();


/* memory initializer */ allocate([48,32,38,38,32,34,83,104,111,117,108,100,32,110,111,116,32,98,101,32,114,101,97,99,104,97,98,108,101,46,34,0,46,46,47,46,46,47,46,46,47,110,101,116,119,111,114,107,47,115,114,99,47,110,100,108,51,46,99,0,0,0,0,0,78,68,76,51,95,76,50,95,112,117,115,104,0,0,0,0,78,68,76,51,95,76,50,95,112,117,115,104,95,111,117,116,95,112,107,116,0,0,0,0,78,68,76,51,95,76,50,95,112,117,115,104,95,105,110,95,112,107,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);




var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }

  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: return 1;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

   
  Module["_memset"] = _memset;

  function ___errno_location() {
      return ___errno_state;
    }

  function _abort() {
      Module['abort']();
    }

  
  
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          if (stream.tty.output.length) {
            stream.tty.ops.put_char(stream.tty, 10);
          }
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }}};
  
  var MEMFS={ops_table:null,CONTENT_OWNING:1,CONTENT_FLEXIBLE:2,CONTENT_FIXED:3,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            },
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.contents = [];
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },ensureFlexible:function (node) {
        if (node.contentMode !== MEMFS.CONTENT_FLEXIBLE) {
          var contents = node.contents;
          node.contents = Array.prototype.slice.call(contents);
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        }
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.contents.length;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.ensureFlexible(node);
            var contents = node.contents;
            if (attr.size < contents.length) contents.length = attr.size;
            else while (attr.size > contents.length) contents.push(0);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          var node = stream.node;
          node.timestamp = Date.now();
          var contents = node.contents;
          if (length && contents.length === 0 && position === 0 && buffer.subarray) {
            // just replace it with the new data
            if (canOwn && offset === 0) {
              node.contents = buffer; // this could be a subarray of Emscripten HEAP, or allocated from some other source.
              node.contentMode = (buffer.buffer === HEAP8.buffer) ? MEMFS.CONTENT_OWNING : MEMFS.CONTENT_FIXED;
            } else {
              node.contents = new Uint8Array(buffer.subarray(offset, offset+length));
              node.contentMode = MEMFS.CONTENT_FIXED;
            }
            return length;
          }
          MEMFS.ensureFlexible(node);
          var contents = node.contents;
          while (contents.length < position) contents.push(0);
          for (var i = 0; i < length; i++) {
            contents[position + i] = buffer[offset + i];
          }
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.contents.length;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          stream.ungotten = [];
          stream.position = position;
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.ensureFlexible(stream.node);
          var contents = stream.node.contents;
          var limit = offset + length;
          while (limit > contents.length) contents.push(0);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < contents.length) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          fileStore.createIndex('timestamp', 'timestamp', { unique: false });
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function() {
          callback(this.error);
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function() { callback(this.error); };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function() { callback(this.error); };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function() { done(this.error); };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          stream.position = position;
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      // we don't currently perform any user-space buffering of data
    }var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); },
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); },
            },
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        return FS.nodePermissions(dir, 'x');
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions
        var err = FS.mayOpen(node, flags);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        return stream.stream_ops.llseek(stream, offset, whence);
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno) {
          this.errno = errno;
          for (var key in ERRNO_CODES) {
            if (ERRNO_CODES[key] === errno) {
              this.code = key;
              break;
            }
          }
          this.message = ERRNO_MESSAGES[errno];
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = Math.floor(idx / this.chunkSize);
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
            // Find length
            var xhr = new XMLHttpRequest();
            xhr.open('HEAD', url, false);
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            var datalength = Number(xhr.getResponseHeader("Content-length"));
            var header;
            var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
            var chunkSize = 1024*1024; // Chunk size in bytes
  
            if (!hasByteServing) chunkSize = datalength;
  
            // Function to get a range from the remote URL.
            var doXHR = (function(from, to) {
              if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
              if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
              // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
              var xhr = new XMLHttpRequest();
              xhr.open('GET', url, false);
              if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
              // Some hints to the browser that we want binary data.
              if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
              if (xhr.overrideMimeType) {
                xhr.overrideMimeType('text/plain; charset=x-user-defined');
              }
  
              xhr.send(null);
              if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
              if (xhr.response !== undefined) {
                return new Uint8Array(xhr.response || []);
              } else {
                return intArrayFromString(xhr.responseText || '', true);
              }
            });
            var lazyArray = this;
            lazyArray.setDataGetter(function(chunkNum) {
              var start = chunkNum * chunkSize;
              var end = (chunkNum+1) * chunkSize - 1; // including this byte
              end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
              if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
                lazyArray.chunks[chunkNum] = doXHR(start, end);
              }
              if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
              return lazyArray.chunks[chunkNum];
            });
  
            this._length = datalength;
            this._chunkSize = chunkSize;
            this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            continue;
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};var Browser={mainLoop:{scheduler:null,method:"",shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted || ENVIRONMENT_IS_WORKER) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        
        // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
        // Module['forcedAspectRatio'] = 4 / 3;
        
        canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                    canvas['mozRequestPointerLock'] ||
                                    canvas['webkitRequestPointerLock'] ||
                                    canvas['msRequestPointerLock'] ||
                                    function(){};
        canvas.exitPointerLock = document['exitPointerLock'] ||
                                 document['mozExitPointerLock'] ||
                                 document['webkitExitPointerLock'] ||
                                 document['msExitPointerLock'] ||
                                 function(){}; // no-op if function does not exist
        canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
  
        document.addEventListener('pointerlockchange', pointerLockChange, false);
        document.addEventListener('mozpointerlockchange', pointerLockChange, false);
        document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
        document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
        if (Module['elementPointerLock']) {
          canvas.addEventListener("click", function(ev) {
            if (!Browser.pointerLock && canvas.requestPointerLock) {
              canvas.requestPointerLock();
              ev.preventDefault();
            }
          }, false);
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        var ctx;
        var errorInfo = '?';
        function onContextCreationError(event) {
          errorInfo = event.statusMessage || errorInfo;
        }
        try {
          if (useWebGL) {
            var contextAttributes = {
              antialias: false,
              alpha: false
            };
  
            if (webGLContextAttributes) {
              for (var attribute in webGLContextAttributes) {
                contextAttributes[attribute] = webGLContextAttributes[attribute];
              }
            }
  
  
            canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
            try {
              ['experimental-webgl', 'webgl'].some(function(webglId) {
                return ctx = canvas.getContext(webglId, contextAttributes);
              });
            } finally {
              canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
            }
          } else {
            ctx = canvas.getContext('2d');
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas: ' + [errorInfo, e]);
          return null;
        }
        if (useWebGL) {
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
  
          // Warn on context loss
          canvas.addEventListener('webglcontextlost', function(event) {
            alert('WebGL context lost. You will need to reload the page.');
          }, false);
        }
        if (setInModule) {
          GLctx = Module.ctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
        
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvasContainer.requestFullScreen();
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          setTimeout(func, 1000/60);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           window['setTimeout'];
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        return Math.max(-1, Math.min(1, event.type === 'DOMMouseScroll' ? event.detail : -event.wheelDelta));
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              Browser.lastTouches[touch.identifier] = Browser.touches[touch.identifier];
              Browser.touches[touch.identifier] = { x: adjustedX, y: adjustedY };
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      }};

  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }

  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

   
  Module["_strlen"] = _strlen;

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + 1600000;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");


var Math_min = Math.min;
function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function asmPrintInt(x, y) {
  Module.print('int ' + x + ',' + y);// + ' ' + new Error().stack);
}
function asmPrintFloat(x, y) {
  Module.print('float ' + x + ',' + y);// + ' ' + new Error().stack);
}
// EMSCRIPTEN_START_ASM
var asm=(function(global,env,buffer){"use asm";var a=new global.Int8Array(buffer);var b=new global.Int16Array(buffer);var c=new global.Int32Array(buffer);var d=new global.Uint8Array(buffer);var e=new global.Uint16Array(buffer);var f=new global.Uint32Array(buffer);var g=new global.Float32Array(buffer);var h=new global.Float64Array(buffer);var i=env.STACKTOP|0;var j=env.STACK_MAX|0;var k=env.tempDoublePtr|0;var l=env.ABORT|0;var m=0;var n=0;var o=0;var p=0;var q=+env.NaN,r=+env.Infinity;var s=0,t=0,u=0,v=0,w=0.0,x=0,y=0,z=0,A=0.0;var B=0;var C=0;var D=0;var E=0;var F=0;var G=0;var H=0;var I=0;var J=0;var K=0;var L=global.Math.floor;var M=global.Math.abs;var N=global.Math.sqrt;var O=global.Math.pow;var P=global.Math.cos;var Q=global.Math.sin;var R=global.Math.tan;var S=global.Math.acos;var T=global.Math.asin;var U=global.Math.atan;var V=global.Math.atan2;var W=global.Math.exp;var X=global.Math.log;var Y=global.Math.ceil;var Z=global.Math.imul;var _=env.abort;var $=env.assert;var aa=env.asmPrintInt;var ba=env.asmPrintFloat;var ca=env.min;var da=env.jsCall;var ea=env.invoke_vii;var fa=env.invoke_iii;var ga=env._fflush;var ha=env._sysconf;var ia=env._abort;var ja=env.___setErrNo;var ka=env._sbrk;var la=env._time;var ma=env._emscripten_memcpy_big;var na=env.___assert_fail;var oa=env.___errno_location;var pa=0.0;
// EMSCRIPTEN_START_FUNCS
function sa(a){a=a|0;var b=0;b=i;i=i+a|0;i=i+7&-8;return b|0}function ta(){return i|0}function ua(a){a=a|0;i=a}function va(a,b){a=a|0;b=b|0;if((m|0)==0){m=a;n=b}}function wa(b){b=b|0;a[k]=a[b];a[k+1|0]=a[b+1|0];a[k+2|0]=a[b+2|0];a[k+3|0]=a[b+3|0]}function xa(b){b=b|0;a[k]=a[b];a[k+1|0]=a[b+1|0];a[k+2|0]=a[b+2|0];a[k+3|0]=a[b+3|0];a[k+4|0]=a[b+4|0];a[k+5|0]=a[b+5|0];a[k+6|0]=a[b+6|0];a[k+7|0]=a[b+7|0]}function ya(a){a=a|0;B=a}function za(a){a=a|0;C=a}function Aa(a){a=a|0;D=a}function Ba(a){a=a|0;E=a}function Ca(a){a=a|0;F=a}function Da(a){a=a|0;G=a}function Ea(a){a=a|0;H=a}function Fa(a){a=a|0;I=a}function Ga(a){a=a|0;J=a}function Ha(a){a=a|0;K=a}function Ia(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0;f=i;g=(b|0)==0?2050:b;b=ra[g&4095](1364,e)|0;if((b|0)==0){g=0;i=f;return g|0}a[b+256|0]=0;a[b+524|0]=0;a[b+792|0]=0;a[b+1060|0]=0;a[b+1328|0]=0;c[b+1344>>2]=e;c[b+1348>>2]=g;c[b+1352>>2]=(d|0)==0?2050:d;c[b+1356>>2]=0;c[b+1360>>2]=0;c[b+1340>>2]=0;g=b;i=f;return g|0}function Ja(a,b){a=a|0;b=b|0;var c=0;c=i;b=Ua(a)|0;i=c;return b|0}function Ka(a,b){a=a|0;b=b|0;b=i;Va(a);i=b;return}function La(d,e){d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0;f=i;g=d+1340|0;k=c[g>>2]|0;j=0;while(1){h=j+1|0;if((a[d+(j*268|0)+256|0]|0)==e<<24>>24){h=5;break}if((h|0)<5){j=h}else{h=4;break}}if((h|0)==4){c[g>>2]=10}else if((h|0)==5?(j|0)>-1:0){c[g>>2]=9;i=f;return}c[g>>2]=k;j=0;while(1){k=d+(j*268|0)+256|0;h=j+1|0;if((a[k]|0)==0){h=11;break}if((h|0)<5){j=h}else{h=10;break}}if((h|0)==10){c[g>>2]=10}else if((h|0)==11?(j|0)>-1:0){a[k]=e;b[d+(j*268|0)+258>>1]=0;c[d+(j*268|0)+264>>2]=0;c[d+(j*268|0)+260>>2]=0;c[d+(j*268|0)+28>>2]=1;c[d+(j*268|0)+156>>2]=1;c[d+(j*268|0)+60>>2]=1;c[d+(j*268|0)+188>>2]=1;c[d+(j*268|0)+92>>2]=1;c[d+(j*268|0)+220>>2]=1;c[d+(j*268|0)+124>>2]=1;c[d+(j*268|0)+252>>2]=1;i=f;return}c[g>>2]=6;i=f;return}function Ma(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0;e=i;f=0;while(1){g=f+1|0;if((a[b+(f*268|0)+256|0]|0)==d<<24>>24){g=5;break}if((g|0)<5){f=g}else{g=4;break}}do{if((g|0)==4){b=b+1340|0;c[b>>2]=10}else if((g|0)==5){if(!((f|0)>-1)){b=b+1340|0;break}g=b+1352|0;d=b+1344|0;h=b+(f*268|0)+28|0;if((c[h>>2]|0)!=1){j=c[b+(f*268|0)>>2]|0;if((j|0)!=0){qa[c[g>>2]&4095](j,c[d>>2]|0)}c[h>>2]=1}j=b+(f*268|0)+156|0;if((c[j>>2]|0)!=1){h=c[b+(f*268|0)+128>>2]|0;if((h|0)!=0){qa[c[g>>2]&4095](h,c[d>>2]|0)}c[j>>2]=1}h=b+(f*268|0)+60|0;if((c[h>>2]|0)!=1){j=c[b+(f*268|0)+32>>2]|0;if((j|0)!=0){qa[c[g>>2]&4095](j,c[d>>2]|0)}c[h>>2]=1}h=b+(f*268|0)+188|0;if((c[h>>2]|0)!=1){j=c[b+(f*268|0)+160>>2]|0;if((j|0)!=0){qa[c[g>>2]&4095](j,c[d>>2]|0)}c[h>>2]=1}h=b+(f*268|0)+92|0;if((c[h>>2]|0)!=1){j=c[b+(f*268|0)+64>>2]|0;if((j|0)!=0){qa[c[g>>2]&4095](j,c[d>>2]|0)}c[h>>2]=1}j=b+(f*268|0)+220|0;if((c[j>>2]|0)!=1){h=c[b+(f*268|0)+192>>2]|0;if((h|0)!=0){qa[c[g>>2]&4095](h,c[d>>2]|0)}c[j>>2]=1}h=b+(f*268|0)+124|0;if((c[h>>2]|0)!=1){j=c[b+(f*268|0)+96>>2]|0;if((j|0)!=0){qa[c[g>>2]&4095](j,c[d>>2]|0)}c[h>>2]=1}h=b+(f*268|0)+252|0;if((c[h>>2]|0)==1){i=e;return}b=c[b+(f*268|0)+224>>2]|0;if((b|0)!=0){qa[c[g>>2]&4095](b,c[d>>2]|0)}c[h>>2]=1;i=e;return}}while(0);c[b>>2]=8;i=e;return}function Na(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0;f=i;g=0;while(1){h=g+1|0;if((a[b+(g*268|0)+256|0]|0)==d<<24>>24){d=5;break}if((h|0)<5){g=h}else{d=4;break}}do{if((d|0)==4){b=b+1340|0;c[b>>2]=10}else if((d|0)==5){if(!((g|0)>-1)){b=b+1340|0;break}h=b+(g*268|0)+260|0;c[h>>2]=c[h>>2]|e;i=f;return}}while(0);c[b>>2]=10;i=f;return}function Oa(d,e,f,g){d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0;h=i;if((g|0)==0|(f|0)==0){c[d+1340>>2]=11;i=h;return}else{j=0}while(1){k=j+1|0;if((a[d+(j*268|0)+256|0]|0)==e<<24>>24){l=6;break}if((k|0)<5){j=k}else{l=5;break}}do{if((l|0)==5){g=d+1340|0;c[g>>2]=10}else if((l|0)==6){if((j|0)>-1){k=0}else{g=d+1340|0;break}while(1){e=d+(j*268|0)+(k<<5)+156|0;l=k+1|0;if((c[e>>2]|0)==1){l=10;break}if((l|0)<4){k=l}else{l=11;break}}if((l|0)==10){c[e>>2]=2;c[d+(j*268|0)+(k<<5)+128>>2]=f;c[d+(j*268|0)+(k<<5)+140>>2]=g;c[d+(j*268|0)+(k<<5)+132>>2]=0;c[d+(j*268|0)+(k<<5)+136>>2]=0;l=d+1356|0;c[d+(j*268|0)+(k<<5)+144>>2]=c[l>>2];c[d+(j*268|0)+(k<<5)+148>>2]=c[l>>2];l=d+(j*268|0)+258|0;e=b[l>>1]|0;b[d+(j*268|0)+(k<<5)+152>>1]=e;b[l>>1]=e+1<<16>>16;i=h;return}else if((l|0)==11){qa[c[d+1352>>2]&4095](f,c[d+1344>>2]|0);c[d+1340>>2]=7;i=h;return}}}while(0);qa[c[d+1352>>2]&4095](f,c[d+1344>>2]|0);c[g>>2]=10;i=h;return}function Pa(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0;g=i;j=0;while(1){k=j+1|0;if((a[b+(j*268|0)+256|0]|0)==d<<24>>24){k=5;break}if((k|0)<5){j=k}else{k=4;break}}do{if((k|0)==4){f=b+1340|0;c[f>>2]=10}else if((k|0)==5){if((j|0)>-1){m=0}else{f=b+1340|0;break}while(1){l=b+(j*268|0)+(m<<5)+28|0;d=c[l>>2]|0;if(((d&1|0)==0?(h=c[b+(j*268|0)+(m<<5)+4>>2]|0,(h|0)==(c[b+(j*268|0)+(m<<5)+12>>2]|0)):0)?(d&8|0)==0:0){break}m=m+1|0;if((m|0)>=4){k=15;break}}if((k|0)==15){c[b+1340>>2]=5;i=g;return}c[l>>2]=d|8;j=b+(j*268|0)+(m<<5)|0;c[e>>2]=c[j>>2];if((f|0)!=0){c[f>>2]=h}c[j>>2]=0;if((d&4|0)==0){i=g;return}c[l>>2]=1;i=g;return}}while(0);c[f>>2]=10;i=g;return}function Qa(e,f,g,h){e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0;j=i;i=i+16|0;m=(h|0)==0?j:h;u=e+1360|0;h=((c[u>>2]|0)+1|0)%5|0;c[u>>2]=h;r=e+1356|0;n=e+1344|0;o=e+1352|0;l=e+1340|0;v=0;a:while(1){k=(v+h|0)%5|0;h=a[e+(k*268|0)+256|0]|0;b:do{if(!(h<<24>>24==0)){C=c[e+(k*268|0)+260>>2]|0;w=e+(k*268|0)+264|0;x=((c[w>>2]|0)+1|0)%4|0;c[w>>2]=x;if((C&1|0)==0){x=(x|0)%4|0;z=e+(k*268|0)+(x<<5)+28|0;y=c[z>>2]|0;if((y&2|0)==0){C=0}else{s=z;u=15;break a}while(1){y=e+(k*268|0)+(x<<5)+128|0;z=e+(k*268|0)+(x<<5)+156|0;A=c[z>>2]|0;if((A&2|0)!=0){B=(c[r>>2]|0)-(c[e+(k*268|0)+(x<<5)+148>>2]|0)|0;if(!(B>>>0>5e3)){u=50;break a}qa[c[o>>2]&4095](c[y>>2]|0,c[n>>2]|0);c[y>>2]=0;c[z>>2]=1;c[l>>2]=13}C=C+1|0;if((C|0)>=4){break b}x=(C+(c[w>>2]|0)|0)%4|0;z=e+(k*268|0)+(x<<5)+28|0;y=c[z>>2]|0;if((y&2|0)!=0){s=z;u=15;break a}}}else{z=0}while(1){x=(z+x|0)%4|0;y=e+(k*268|0)+(x<<5)|0;A=e+(k*268|0)+(x<<5)+28|0;B=c[A>>2]|0;if((B&2|0)!=0){if((B&4|0)!=0){qa[c[o>>2]&4095](c[y>>2]|0,c[n>>2]|0);c[y>>2]=0;c[A>>2]=1}if(((c[r>>2]|0)-(c[e+(k*268|0)+(x<<5)+20>>2]|0)|0)>>>0>500){qa[c[o>>2]&4095](c[y>>2]|0,c[n>>2]|0);c[y>>2]=0;c[A>>2]=1}}y=e+(k*268|0)+(x<<5)+156|0;if((c[y>>2]&2|0)!=0){u=32;break a}z=z+1|0;if((z|0)>=4){break b}x=c[w>>2]|0}}}while(0);v=v+1|0;if((v|0)>=5){u=76;break}h=c[u>>2]|0}if((u|0)==15){t=e+(k*268|0)+(x<<5)|0;if((y&4|0)!=0){if(g>>>0<6){c[l>>2]=3}else{c[m>>2]=6;l=f+2|0;a[l]=h;h=f+3|0;a[h]=6;e=b[e+(k*268|0)+(x<<5)+24>>1]|0;k=f+4|0;a[k]=e;a[k+1|0]=e>>8;e=c[s>>2]|0;c[s>>2]=(e&8|0)==0?e|4:1;z=d[l]|0;C=(d[h]|0)+z|0;y=d[k]|0;A=C+y|0;B=d[f+5|0]|0;C=y+z+(B+C+(A&255)<<1)&255^255;C=((C+(A+B&255)<<8|C)^65280)&65535;a[f]=C;a[f+1|0]=C>>8}qa[c[o>>2]&4095](c[t>>2]|0,c[n>>2]|0);c[t>>2]=0;c[s>>2]=1;i=j;return}r=c[r>>2]|0;if((r-(c[e+(k*268|0)+(x<<5)+20>>2]|0)|0)>>>0>5e3){qa[c[o>>2]&4095](c[t>>2]|0,c[n>>2]|0);c[t>>2]=0;c[s>>2]=1;c[l>>2]=12;i=j;return}n=e+(k*268|0)+(x<<5)+16|0;if((!((r-(c[n>>2]|0)|0)>>>0>100)?(q=c[e+(k*268|0)+(x<<5)+4>>2]|0,p=c[e+(k*268|0)+(x<<5)+8>>2]|0,!((q-p|0)>>>0>100)):0)?(q|0)!=(c[e+(k*268|0)+(x<<5)+12>>2]|0)|(q|0)==(p|0):0){i=j;return}if(g>>>0<6){c[l>>2]=3;i=j;return}c[m>>2]=10;m=f+2|0;a[m]=h;l=f+3|0;if((c[s>>2]&16|0)==0){a[l]=2;l=2}else{a[l]=3;c[s>>2]=c[s>>2]&-17;h=a[m]|0;l=a[l]|0}C=e+(k*268|0)+(x<<5)+4|0;o=c[C>>2]|0;u=f+6|0;a[u]=o;a[u+1|0]=o>>8;a[u+2|0]=o>>16;a[u+3|0]=o>>24;u=b[e+(k*268|0)+(x<<5)+24>>1]|0;g=f+4|0;a[g]=u;a[g+1|0]=u>>8;g=h&255;B=g+(l&255)|0;s=u&65535;t=s+B|0;u=(u&65535)>>>8&65535;v=t+u|0;w=v+o|0;q=o>>>8;y=w+q|0;p=o>>>16;z=y+p|0;A=o>>>24;B=g+o+p+q+s+t+u+v+w+y+(B+A+(z&255)<<1)&255^255;B=((B+(z+A&255)<<8|B)^65280)&65535;a[f]=B;a[f+1|0]=B>>8;c[e+(k*268|0)+(x<<5)+8>>2]=c[C>>2];c[n>>2]=r;i=j;return}else if((u|0)==32){q=e+(k*268|0)+(x<<5)+128|0;p=e+(k*268|0)+(x<<5)+132|0;s=c[p>>2]|0;r=e+(k*268|0)+(x<<5)+140|0;t=c[r>>2]|0;if((s|0)==0){n=t+12|0;g=n>>>0>g>>>0?g:n;if(g>>>0<13){c[l>>2]=3;i=j;return}c[m>>2]=g;a[f+2|0]=h;a[f+3|0]=1;B=c[r>>2]|0;C=f+6|0;a[C]=B;a[C+1|0]=B>>8;a[C+2|0]=B>>16;a[C+3|0]=B>>24;C=b[e+(k*268|0)+(x<<5)+152>>1]|0;e=f+4|0;a[e]=C;a[e+1|0]=C>>8;e=g+65524|0;C=e&65535;k=f+10|0;a[k]=C;a[k+1|0]=C>>8;e=e&65535;Za(f+12|0,c[q>>2]|0,e|0)|0;k=g+ -2|0;if((k|0)!=0){h=h&255;if((k|0)==1){m=h;l=h}else{l=h;m=h;g=1;while(1){h=g+1|0;C=(d[f+(g+2)|0]|0)+m|0;m=C&255;l=C+(l&255)|0;if((h|0)==(k|0)){break}else{g=h}}}}else{m=0;l=0}C=l+m&255^255;C=((C+m<<8|C)^65280)&65535;a[f]=C;a[f+1|0]=C>>8;c[p>>2]=(c[p>>2]|0)+e;i=j;return}if((t|0)==(s|0)){if(g>>>0<6){c[l>>2]=3}else{c[m>>2]=6;l=f+2|0;a[l]=h;h=f+3|0;a[h]=5;k=b[e+(k*268|0)+(x<<5)+152>>1]|0;e=f+4|0;a[e]=k;a[e+1|0]=k>>8;k=c[y>>2]|0;c[y>>2]=(k&8|0)==0?k|4:1;z=d[l]|0;C=(d[h]|0)+z|0;x=d[e]|0;A=C+x|0;B=d[f+5|0]|0;C=x+z+(B+C+(A&255)<<1)&255^255;C=((C+(A+B&255)<<8|C)^65280)&65535;a[f]=C;a[f+1|0]=C>>8}qa[c[o>>2]&4095](c[q>>2]|0,c[n>>2]|0);c[q>>2]=0;c[y>>2]=1;i=j;return}n=12-s+t|0;g=n>>>0>g>>>0?g:n;if(g>>>0<12){c[l>>2]=3;i=j;return}c[m>>2]=g;a[f+2|0]=h;a[f+3|0]=4;e=b[e+(k*268|0)+(x<<5)+152>>1]|0;C=f+4|0;a[C]=e;a[C+1|0]=e>>8;C=c[p>>2]|0;e=f+6|0;a[e]=C;a[e+1|0]=C>>8;a[e+2|0]=C>>16;a[e+3|0]=C>>24;e=g+65524|0;C=e&65535;k=f+10|0;a[k]=C;a[k+1|0]=C>>8;e=e&65535;Za(f+12|0,(c[q>>2]|0)+(c[p>>2]|0)|0,e|0)|0;k=g+ -2|0;if((k|0)!=0){l=h&255;if((k|0)==1){g=l;h=l}else{h=l;g=l;m=1;while(1){l=m+1|0;C=(d[f+(m+2)|0]|0)+g|0;g=C&255;h=C+(h&255)|0;if((l|0)==(k|0)){break}else{m=l}}}}else{g=0;h=0}C=h+g&255^255;C=((C+g<<8|C)^65280)&65535;a[f]=C;a[f+1|0]=C>>8;c[p>>2]=(c[p>>2]|0)+e;i=j;return}else if((u|0)==50){if(!(!(B>>>0>500)?(t=c[e+(k*268|0)+(x<<5)+132>>2]|0,s=c[e+(k*268|0)+(x<<5)+136>>2]|0,!((t-s|0)>>>0>500)):0)){u=52}do{if((u|0)==52){if((A&4|0)==0){s=c[e+(k*268|0)+(x<<5)+136>>2]|0;c[e+(k*268|0)+(x<<5)+132>>2]=s;t=s;break}qa[c[o>>2]&4095](c[y>>2]|0,c[n>>2]|0);c[y>>2]=0;c[z>>2]=1;i=j;return}}while(0);n=e+(k*268|0)+(x<<5)+132|0;o=e+(k*268|0)+(x<<5)+140|0;p=c[o>>2]|0;if((t|0)==0){p=p+12|0;g=p>>>0>g>>>0?g:p;if(g>>>0<13){c[l>>2]=3;i=j;return}c[m>>2]=g;a[f+2|0]=h;a[f+3|0]=1;B=c[o>>2]|0;C=f+6|0;a[C]=B;a[C+1|0]=B>>8;a[C+2|0]=B>>16;a[C+3|0]=B>>24;C=b[e+(k*268|0)+(x<<5)+152>>1]|0;e=f+4|0;a[e]=C;a[e+1|0]=C>>8;e=g+65524|0;C=e&65535;k=f+10|0;a[k]=C;a[k+1|0]=C>>8;e=e&65535;Za(f+12|0,c[y>>2]|0,e|0)|0;k=g+ -2|0;if((k|0)!=0){h=h&255;if((k|0)==1){m=h;l=h}else{l=h;m=h;g=1;while(1){h=g+1|0;C=(d[f+(g+2)|0]|0)+m|0;m=C&255;l=C+(l&255)|0;if((h|0)==(k|0)){break}else{g=h}}}}else{m=0;l=0}C=l+m&255^255;C=((C+m<<8|C)^65280)&65535;a[f]=C;a[f+1|0]=C>>8;c[n>>2]=(c[n>>2]|0)+e;i=j;return}if((p|0)==(s|0)){if(g>>>0<6){c[l>>2]=3;i=j;return}else{c[m>>2]=6;l=f+2|0;a[l]=h;h=f+3|0;a[h]=5;e=b[e+(k*268|0)+(x<<5)+152>>1]|0;k=f+4|0;a[k]=e;a[k+1|0]=e>>8;e=c[z>>2]|0;c[z>>2]=(e&8|0)==0?e|4:1;z=d[l]|0;C=(d[h]|0)+z|0;y=d[k]|0;A=C+y|0;B=d[f+5|0]|0;C=y+z+(B+C+(A&255)<<1)&255^255;C=((C+(A+B&255)<<8|C)^65280)&65535;a[f]=C;a[f+1|0]=C>>8;i=j;return}}o=12-t+p|0;g=o>>>0>g>>>0?g:o;if(g>>>0<12){c[l>>2]=3;i=j;return}c[m>>2]=g;a[f+2|0]=h;a[f+3|0]=4;e=b[e+(k*268|0)+(x<<5)+152>>1]|0;C=f+4|0;a[C]=e;a[C+1|0]=e>>8;C=c[n>>2]|0;e=f+6|0;a[e]=C;a[e+1|0]=C>>8;a[e+2|0]=C>>16;a[e+3|0]=C>>24;e=g+65524|0;C=e&65535;k=f+10|0;a[k]=C;a[k+1|0]=C>>8;e=e&65535;Za(f+12|0,(c[y>>2]|0)+(c[n>>2]|0)|0,e|0)|0;k=g+ -2|0;if((k|0)!=0){h=h&255;if((k|0)==1){g=h;l=h}else{l=h;g=h;m=1;while(1){h=m+1|0;C=(d[f+(m+2)|0]|0)+g|0;g=C&255;l=C+(l&255)|0;if((h|0)==(k|0)){break}else{m=h}}}}else{g=0;l=0}C=l+g&255^255;C=((C+g<<8|C)^65280)&65535;a[f]=C;a[f+1|0]=C>>8;c[n>>2]=(c[n>>2]|0)+e;i=j;return}else if((u|0)==76){i=j;return}}function Ra(f,g,h){f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0;j=i;if(h>>>0<6){c[f+1340>>2]=1;i=j;return}k=g+3|0;m=a[k]|0;a:do{switch(m<<24>>24){case 6:case 5:{l=6;break};case 3:case 2:{l=10;break};case 4:case 1:{if(!(h>>>0<12)){l=g+10|0;l=((d[l]|d[l+1|0]<<8)&65535)+12|0;break a}c[f+1340>>2]=1;i=j;return};default:{c[f+1340>>2]=1;i=j;return}}}while(0);if(l>>>0>h>>>0){c[f+1340>>2]=1;i=j;return}l=l+ -2|0;if((l|0)==0){o=0;h=0}else{n=0;o=0;h=0;do{p=(d[g+(n+2)|0]|0)+o|0;o=p&255;h=p+(h&255)|0;n=n+1|0}while((n|0)!=(l|0))}p=h+o&255^255;if(!((((p+o<<8|p)^65280)&65535)<<16>>16==(d[g]|d[g+1|0]<<8)<<16>>16)){c[f+1340>>2]=1;i=j;return}h=a[g+2|0]|0;l=0;while(1){n=l+1|0;if((a[f+(l*268|0)+256|0]|0)==h<<24>>24){h=19;break}if((n|0)<5){l=n}else{h=18;break}}b:do{if((h|0)==18){c[f+1340>>2]=10}else if((h|0)==19?(l|0)>-1:0){switch(m<<24>>24){case 1:{k=g+4|0;m=0;do{if((c[f+(l*268|0)+(m<<5)+28>>2]&1|0)==0?(b[f+(l*268|0)+(m<<5)+24>>1]|0)==(d[k]|d[k+1|0]<<8)<<16>>16:0){h=26;break}m=m+1|0}while((m|0)<4);if((h|0)==26){c[f+1340>>2]=2;i=j;return}l=l&255;m=0;while(1){h=m+1|0;if((c[f+(l*268|0)+(m<<5)+28>>2]|0)==1){h=31;break}if((h|0)<4){m=h}else{h=33;break}}if((h|0)==31){m=f+(l*268|0)+(m<<5)|0;if((m|0)==0){h=33}else{l=f+1344|0}}if((h|0)==33){if((c[f+(l*268|0)+260>>2]&1|0)==0){c[f+1340>>2]=7;i=j;return}m=b[f+(l*268|0)+24>>1]|0;n=b[f+(l*268|0)+56>>1]|0;if((n&65535)>(m&65535)){m=f+(l*268|0)+32|0}else{n=m;m=f+(l*268|0)|0}h=b[f+(l*268|0)+88>>1]|0;if((h&65535)>(n&65535)){m=f+(l*268|0)+64|0}else{h=n}if((e[f+(l*268|0)+120>>1]|0)>(h&65535)){m=f+(l*268|0)+96|0}l=f+1344|0;qa[c[f+1352>>2]&4095](c[m>>2]|0,c[l>>2]|0);c[m>>2]=0;c[m+28>>2]=1}n=m+28|0;c[n>>2]=2;h=g+6|0;l=ra[c[f+1348>>2]&4095](d[h]|d[h+1|0]<<8|d[h+2|0]<<16|d[h+3|0]<<24,c[l>>2]|0)|0;if((l|0)==0){c[f+1340>>2]=4;c[n>>2]=1;i=j;return}else{c[m>>2]=l;p=g+10|0;c[m+4>>2]=(d[p]|d[p+1|0]<<8)&65535;c[m+8>>2]=0;c[m+12>>2]=d[h]|d[h+1|0]<<8|d[h+2|0]<<16|d[h+3|0]<<24;o=f+1356|0;c[m+20>>2]=c[o>>2];c[m+16>>2]=c[o>>2];b[m+24>>1]=d[k]|d[k+1|0]<<8;Za(l|0,g+12|0,(d[p]|d[p+1|0]<<8)&65535|0)|0;i=j;return}};case 6:case 3:case 2:{n=g+4|0;h=0;while(1){m=f+(l*268|0)+(h<<5)+156|0;if((c[m>>2]&1|0)==0?(b[f+(l*268|0)+(h<<5)+152>>1]|0)==(d[n]|d[n+1|0]<<8)<<16>>16:0){break}h=h+1|0;if((h|0)>=4){break b}}c[f+(l*268|0)+(h<<5)+148>>2]=c[f+1356>>2];k=a[k]|0;if(k<<24>>24==2){p=g+6|0;c[f+(l*268|0)+(h<<5)+136>>2]=d[p]|d[p+1|0]<<8|d[p+2|0]<<16|d[p+3|0]<<24;i=j;return}else if(k<<24>>24==3){p=g+6|0;c[f+(l*268|0)+(h<<5)+132>>2]=d[p]|d[p+1|0]<<8|d[p+2|0]<<16|d[p+3|0]<<24;c[f+(l*268|0)+(h<<5)+136>>2]=d[p]|d[p+1|0]<<8|d[p+2|0]<<16|d[p+3|0]<<24;i=j;return}else if(k<<24>>24==6){p=f+(l*268|0)+(h<<5)+128|0;qa[c[f+1352>>2]&4095](c[p>>2]|0,c[f+1344>>2]|0);c[p>>2]=0;c[m>>2]=1;i=j;return}else{na(8,40,755,88)}break};case 5:case 4:{o=g+4|0;m=0;while(1){n=f+(l*268|0)+(m<<5)+28|0;h=c[n>>2]|0;if((h&1|0)==0?(b[f+(l*268|0)+(m<<5)+24>>1]|0)==(d[o]|d[o+1|0]<<8)<<16>>16:0){break}m=m+1|0;if((m|0)>=4){break b}}c[f+(l*268|0)+(m<<5)+20>>2]=c[f+1356>>2];k=a[k]|0;if(k<<24>>24==4){k=g+6|0;k=d[k]|d[k+1|0]<<8|d[k+2|0]<<16|d[k+3|0]<<24;o=f+(l*268|0)+(m<<5)+4|0;if((k|0)==(c[o>>2]|0)){p=g+10|0;Za((c[f+(l*268|0)+(m<<5)>>2]|0)+k|0,g+12|0,(d[p]|d[p+1|0]<<8)&65535|0)|0;c[o>>2]=(c[o>>2]|0)+((d[p]|d[p+1|0]<<8)&65535);i=j;return}else{c[n>>2]=h|16;i=j;return}}else if(k<<24>>24==5){c[n>>2]=h|4;i=j;return}else{na(8,40,739,112)}break};default:{na(8,40,910,72)}}}}while(0);c[f+1340>>2]=2;i=j;return}function Sa(a){a=a|0;var b=0;b=a+1340|0;a=c[b>>2]|0;c[b>>2]=0;return a|0}function Ta(a,b){a=a|0;b=b|0;a=a+1356|0;c[a>>2]=(c[a>>2]|0)+b;return}function Ua(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0;b=i;do{if(a>>>0<245){if(a>>>0<11){a=16}else{a=a+11&-8}v=a>>>3;t=c[34]|0;w=t>>>v;if((w&3|0)!=0){h=(w&1^1)+v|0;g=h<<1;e=176+(g<<2)|0;g=176+(g+2<<2)|0;j=c[g>>2]|0;d=j+8|0;f=c[d>>2]|0;do{if((e|0)!=(f|0)){if(f>>>0<(c[152>>2]|0)>>>0){ia()}k=f+12|0;if((c[k>>2]|0)==(j|0)){c[k>>2]=e;c[g>>2]=f;break}else{ia()}}else{c[34]=t&~(1<<h)}}while(0);H=h<<3;c[j+4>>2]=H|3;H=j+(H|4)|0;c[H>>2]=c[H>>2]|1;H=d;i=b;return H|0}if(a>>>0>(c[144>>2]|0)>>>0){if((w|0)!=0){j=2<<v;j=w<<v&(j|0-j);j=(j&0-j)+ -1|0;d=j>>>12&16;j=j>>>d;h=j>>>5&8;j=j>>>h;g=j>>>2&4;j=j>>>g;f=j>>>1&2;j=j>>>f;e=j>>>1&1;e=(h|d|g|f|e)+(j>>>e)|0;j=e<<1;f=176+(j<<2)|0;j=176+(j+2<<2)|0;g=c[j>>2]|0;d=g+8|0;h=c[d>>2]|0;do{if((f|0)!=(h|0)){if(h>>>0<(c[152>>2]|0)>>>0){ia()}k=h+12|0;if((c[k>>2]|0)==(g|0)){c[k>>2]=f;c[j>>2]=h;break}else{ia()}}else{c[34]=t&~(1<<e)}}while(0);h=e<<3;f=h-a|0;c[g+4>>2]=a|3;e=g+a|0;c[g+(a|4)>>2]=f|1;c[g+h>>2]=f;h=c[144>>2]|0;if((h|0)!=0){g=c[156>>2]|0;k=h>>>3;l=k<<1;h=176+(l<<2)|0;j=c[34]|0;k=1<<k;if((j&k|0)!=0){j=176+(l+2<<2)|0;k=c[j>>2]|0;if(k>>>0<(c[152>>2]|0)>>>0){ia()}else{D=j;C=k}}else{c[34]=j|k;D=176+(l+2<<2)|0;C=h}c[D>>2]=g;c[C+12>>2]=g;c[g+8>>2]=C;c[g+12>>2]=h}c[144>>2]=f;c[156>>2]=e;H=d;i=b;return H|0}t=c[140>>2]|0;if((t|0)!=0){d=(t&0-t)+ -1|0;G=d>>>12&16;d=d>>>G;F=d>>>5&8;d=d>>>F;H=d>>>2&4;d=d>>>H;h=d>>>1&2;d=d>>>h;e=d>>>1&1;e=c[440+((F|G|H|h|e)+(d>>>e)<<2)>>2]|0;d=(c[e+4>>2]&-8)-a|0;h=e;while(1){g=c[h+16>>2]|0;if((g|0)==0){g=c[h+20>>2]|0;if((g|0)==0){break}}h=(c[g+4>>2]&-8)-a|0;f=h>>>0<d>>>0;d=f?h:d;h=g;e=f?g:e}h=c[152>>2]|0;if(e>>>0<h>>>0){ia()}f=e+a|0;if(!(e>>>0<f>>>0)){ia()}g=c[e+24>>2]|0;j=c[e+12>>2]|0;do{if((j|0)==(e|0)){k=e+20|0;j=c[k>>2]|0;if((j|0)==0){k=e+16|0;j=c[k>>2]|0;if((j|0)==0){B=0;break}}while(1){m=j+20|0;l=c[m>>2]|0;if((l|0)!=0){j=l;k=m;continue}m=j+16|0;l=c[m>>2]|0;if((l|0)==0){break}else{j=l;k=m}}if(k>>>0<h>>>0){ia()}else{c[k>>2]=0;B=j;break}}else{k=c[e+8>>2]|0;if(k>>>0<h>>>0){ia()}h=k+12|0;if((c[h>>2]|0)!=(e|0)){ia()}l=j+8|0;if((c[l>>2]|0)==(e|0)){c[h>>2]=j;c[l>>2]=k;B=j;break}else{ia()}}}while(0);do{if((g|0)!=0){j=c[e+28>>2]|0;h=440+(j<<2)|0;if((e|0)==(c[h>>2]|0)){c[h>>2]=B;if((B|0)==0){c[140>>2]=c[140>>2]&~(1<<j);break}}else{if(g>>>0<(c[152>>2]|0)>>>0){ia()}h=g+16|0;if((c[h>>2]|0)==(e|0)){c[h>>2]=B}else{c[g+20>>2]=B}if((B|0)==0){break}}if(B>>>0<(c[152>>2]|0)>>>0){ia()}c[B+24>>2]=g;g=c[e+16>>2]|0;do{if((g|0)!=0){if(g>>>0<(c[152>>2]|0)>>>0){ia()}else{c[B+16>>2]=g;c[g+24>>2]=B;break}}}while(0);g=c[e+20>>2]|0;if((g|0)!=0){if(g>>>0<(c[152>>2]|0)>>>0){ia()}else{c[B+20>>2]=g;c[g+24>>2]=B;break}}}}while(0);if(d>>>0<16){H=d+a|0;c[e+4>>2]=H|3;H=e+(H+4)|0;c[H>>2]=c[H>>2]|1}else{c[e+4>>2]=a|3;c[e+(a|4)>>2]=d|1;c[e+(d+a)>>2]=d;h=c[144>>2]|0;if((h|0)!=0){g=c[156>>2]|0;k=h>>>3;l=k<<1;h=176+(l<<2)|0;j=c[34]|0;k=1<<k;if((j&k|0)!=0){j=176+(l+2<<2)|0;k=c[j>>2]|0;if(k>>>0<(c[152>>2]|0)>>>0){ia()}else{A=j;z=k}}else{c[34]=j|k;A=176+(l+2<<2)|0;z=h}c[A>>2]=g;c[z+12>>2]=g;c[g+8>>2]=z;c[g+12>>2]=h}c[144>>2]=d;c[156>>2]=f}H=e+8|0;i=b;return H|0}}}else{if(!(a>>>0>4294967231)){z=a+11|0;a=z&-8;B=c[140>>2]|0;if((B|0)!=0){A=0-a|0;z=z>>>8;if((z|0)!=0){if(a>>>0>16777215){C=31}else{G=(z+1048320|0)>>>16&8;H=z<<G;F=(H+520192|0)>>>16&4;H=H<<F;C=(H+245760|0)>>>16&2;C=14-(F|G|C)+(H<<C>>>15)|0;C=a>>>(C+7|0)&1|C<<1}}else{C=0}F=c[440+(C<<2)>>2]|0;a:do{if((F|0)==0){E=0;z=0}else{if((C|0)==31){z=0}else{z=25-(C>>>1)|0}E=0;D=a<<z;z=0;while(1){H=c[F+4>>2]&-8;G=H-a|0;if(G>>>0<A>>>0){if((H|0)==(a|0)){A=G;E=F;z=F;break a}else{A=G;z=F}}G=c[F+20>>2]|0;F=c[F+(D>>>31<<2)+16>>2]|0;E=(G|0)==0|(G|0)==(F|0)?E:G;if((F|0)==0){break}else{D=D<<1}}}}while(0);if((E|0)==0&(z|0)==0){H=2<<C;B=(H|0-H)&B;if((B|0)==0){break}H=(B&0-B)+ -1|0;D=H>>>12&16;H=H>>>D;C=H>>>5&8;H=H>>>C;F=H>>>2&4;H=H>>>F;G=H>>>1&2;H=H>>>G;E=H>>>1&1;E=c[440+((C|D|F|G|E)+(H>>>E)<<2)>>2]|0}if((E|0)!=0){while(1){C=(c[E+4>>2]&-8)-a|0;B=C>>>0<A>>>0;A=B?C:A;z=B?E:z;B=c[E+16>>2]|0;if((B|0)!=0){E=B;continue}E=c[E+20>>2]|0;if((E|0)==0){break}}}if((z|0)!=0?A>>>0<((c[144>>2]|0)-a|0)>>>0:0){f=c[152>>2]|0;if(z>>>0<f>>>0){ia()}d=z+a|0;if(!(z>>>0<d>>>0)){ia()}e=c[z+24>>2]|0;h=c[z+12>>2]|0;do{if((h|0)==(z|0)){h=z+20|0;g=c[h>>2]|0;if((g|0)==0){h=z+16|0;g=c[h>>2]|0;if((g|0)==0){x=0;break}}while(1){k=g+20|0;j=c[k>>2]|0;if((j|0)!=0){g=j;h=k;continue}j=g+16|0;k=c[j>>2]|0;if((k|0)==0){break}else{g=k;h=j}}if(h>>>0<f>>>0){ia()}else{c[h>>2]=0;x=g;break}}else{g=c[z+8>>2]|0;if(g>>>0<f>>>0){ia()}j=g+12|0;if((c[j>>2]|0)!=(z|0)){ia()}f=h+8|0;if((c[f>>2]|0)==(z|0)){c[j>>2]=h;c[f>>2]=g;x=h;break}else{ia()}}}while(0);do{if((e|0)!=0){f=c[z+28>>2]|0;g=440+(f<<2)|0;if((z|0)==(c[g>>2]|0)){c[g>>2]=x;if((x|0)==0){c[140>>2]=c[140>>2]&~(1<<f);break}}else{if(e>>>0<(c[152>>2]|0)>>>0){ia()}f=e+16|0;if((c[f>>2]|0)==(z|0)){c[f>>2]=x}else{c[e+20>>2]=x}if((x|0)==0){break}}if(x>>>0<(c[152>>2]|0)>>>0){ia()}c[x+24>>2]=e;e=c[z+16>>2]|0;do{if((e|0)!=0){if(e>>>0<(c[152>>2]|0)>>>0){ia()}else{c[x+16>>2]=e;c[e+24>>2]=x;break}}}while(0);e=c[z+20>>2]|0;if((e|0)!=0){if(e>>>0<(c[152>>2]|0)>>>0){ia()}else{c[x+20>>2]=e;c[e+24>>2]=x;break}}}}while(0);b:do{if(!(A>>>0<16)){c[z+4>>2]=a|3;c[z+(a|4)>>2]=A|1;c[z+(A+a)>>2]=A;f=A>>>3;if(A>>>0<256){h=f<<1;e=176+(h<<2)|0;g=c[34]|0;f=1<<f;if((g&f|0)!=0){g=176+(h+2<<2)|0;f=c[g>>2]|0;if(f>>>0<(c[152>>2]|0)>>>0){ia()}else{w=g;v=f}}else{c[34]=g|f;w=176+(h+2<<2)|0;v=e}c[w>>2]=d;c[v+12>>2]=d;c[z+(a+8)>>2]=v;c[z+(a+12)>>2]=e;break}e=A>>>8;if((e|0)!=0){if(A>>>0>16777215){e=31}else{G=(e+1048320|0)>>>16&8;H=e<<G;F=(H+520192|0)>>>16&4;H=H<<F;e=(H+245760|0)>>>16&2;e=14-(F|G|e)+(H<<e>>>15)|0;e=A>>>(e+7|0)&1|e<<1}}else{e=0}h=440+(e<<2)|0;c[z+(a+28)>>2]=e;c[z+(a+20)>>2]=0;c[z+(a+16)>>2]=0;f=c[140>>2]|0;g=1<<e;if((f&g|0)==0){c[140>>2]=f|g;c[h>>2]=d;c[z+(a+24)>>2]=h;c[z+(a+12)>>2]=d;c[z+(a+8)>>2]=d;break}f=c[h>>2]|0;if((e|0)==31){e=0}else{e=25-(e>>>1)|0}c:do{if((c[f+4>>2]&-8|0)!=(A|0)){e=A<<e;while(1){h=f+(e>>>31<<2)+16|0;g=c[h>>2]|0;if((g|0)==0){break}if((c[g+4>>2]&-8|0)==(A|0)){t=g;break c}else{e=e<<1;f=g}}if(h>>>0<(c[152>>2]|0)>>>0){ia()}else{c[h>>2]=d;c[z+(a+24)>>2]=f;c[z+(a+12)>>2]=d;c[z+(a+8)>>2]=d;break b}}else{t=f}}while(0);f=t+8|0;e=c[f>>2]|0;g=c[152>>2]|0;if(t>>>0<g>>>0){ia()}if(e>>>0<g>>>0){ia()}else{c[e+12>>2]=d;c[f>>2]=d;c[z+(a+8)>>2]=e;c[z+(a+12)>>2]=t;c[z+(a+24)>>2]=0;break}}else{H=A+a|0;c[z+4>>2]=H|3;H=z+(H+4)|0;c[H>>2]=c[H>>2]|1}}while(0);H=z+8|0;i=b;return H|0}}}else{a=-1}}}while(0);t=c[144>>2]|0;if(!(a>>>0>t>>>0)){e=t-a|0;d=c[156>>2]|0;if(e>>>0>15){c[156>>2]=d+a;c[144>>2]=e;c[d+(a+4)>>2]=e|1;c[d+t>>2]=e;c[d+4>>2]=a|3}else{c[144>>2]=0;c[156>>2]=0;c[d+4>>2]=t|3;H=d+(t+4)|0;c[H>>2]=c[H>>2]|1}H=d+8|0;i=b;return H|0}t=c[148>>2]|0;if(a>>>0<t>>>0){G=t-a|0;c[148>>2]=G;H=c[160>>2]|0;c[160>>2]=H+a;c[H+(a+4)>>2]=G|1;c[H+4>>2]=a|3;H=H+8|0;i=b;return H|0}do{if((c[152]|0)==0){t=ha(30)|0;if((t+ -1&t|0)==0){c[616>>2]=t;c[612>>2]=t;c[620>>2]=-1;c[624>>2]=-1;c[628>>2]=0;c[580>>2]=0;c[152]=(la(0)|0)&-16^1431655768;break}else{ia()}}}while(0);v=a+48|0;A=c[616>>2]|0;w=a+47|0;x=A+w|0;A=0-A|0;t=x&A;if(!(t>>>0>a>>>0)){H=0;i=b;return H|0}z=c[576>>2]|0;if((z|0)!=0?(G=c[568>>2]|0,H=G+t|0,H>>>0<=G>>>0|H>>>0>z>>>0):0){H=0;i=b;return H|0}d:do{if((c[580>>2]&4|0)==0){B=c[160>>2]|0;e:do{if((B|0)!=0){z=584|0;while(1){C=c[z>>2]|0;if(!(C>>>0>B>>>0)?(y=z+4|0,(C+(c[y>>2]|0)|0)>>>0>B>>>0):0){break}z=c[z+8>>2]|0;if((z|0)==0){o=182;break e}}if((z|0)!=0){A=x-(c[148>>2]|0)&A;if(A>>>0<2147483647){o=ka(A|0)|0;B=(o|0)==((c[z>>2]|0)+(c[y>>2]|0)|0);x=o;z=A;y=B?o:-1;A=B?A:0;o=191}else{A=0}}else{o=182}}else{o=182}}while(0);do{if((o|0)==182){y=ka(0)|0;if((y|0)!=(-1|0)){z=y;x=c[612>>2]|0;A=x+ -1|0;if((A&z|0)==0){A=t}else{A=t-z+(A+z&0-x)|0}z=c[568>>2]|0;B=z+A|0;if(A>>>0>a>>>0&A>>>0<2147483647){x=c[576>>2]|0;if((x|0)!=0?B>>>0<=z>>>0|B>>>0>x>>>0:0){A=0;break}x=ka(A|0)|0;o=(x|0)==(y|0);z=A;y=o?y:-1;A=o?A:0;o=191}else{A=0}}else{A=0}}}while(0);f:do{if((o|0)==191){o=0-z|0;if((y|0)!=(-1|0)){s=y;p=A;o=202;break d}do{if((x|0)!=(-1|0)&z>>>0<2147483647&z>>>0<v>>>0?(u=c[616>>2]|0,u=w-z+u&0-u,u>>>0<2147483647):0){if((ka(u|0)|0)==(-1|0)){ka(o|0)|0;break f}else{z=u+z|0;break}}}while(0);if((x|0)!=(-1|0)){s=x;p=z;o=202;break d}}}while(0);c[580>>2]=c[580>>2]|4;o=199}else{A=0;o=199}}while(0);if((((o|0)==199?t>>>0<2147483647:0)?(s=ka(t|0)|0,r=ka(0)|0,(r|0)!=(-1|0)&(s|0)!=(-1|0)&s>>>0<r>>>0):0)?(q=r-s|0,p=q>>>0>(a+40|0)>>>0,p):0){p=p?q:A;o=202}if((o|0)==202){q=(c[568>>2]|0)+p|0;c[568>>2]=q;if(q>>>0>(c[572>>2]|0)>>>0){c[572>>2]=q}q=c[160>>2]|0;g:do{if((q|0)!=0){w=584|0;while(1){r=c[w>>2]|0;u=w+4|0;v=c[u>>2]|0;if((s|0)==(r+v|0)){o=214;break}t=c[w+8>>2]|0;if((t|0)==0){break}else{w=t}}if(((o|0)==214?(c[w+12>>2]&8|0)==0:0)?q>>>0>=r>>>0&q>>>0<s>>>0:0){c[u>>2]=v+p;d=(c[148>>2]|0)+p|0;e=q+8|0;if((e&7|0)==0){e=0}else{e=0-e&7}H=d-e|0;c[160>>2]=q+e;c[148>>2]=H;c[q+(e+4)>>2]=H|1;c[q+(d+4)>>2]=40;c[164>>2]=c[624>>2];break}if(s>>>0<(c[152>>2]|0)>>>0){c[152>>2]=s}u=s+p|0;r=584|0;while(1){if((c[r>>2]|0)==(u|0)){o=224;break}t=c[r+8>>2]|0;if((t|0)==0){break}else{r=t}}if((o|0)==224?(c[r+12>>2]&8|0)==0:0){c[r>>2]=s;h=r+4|0;c[h>>2]=(c[h>>2]|0)+p;h=s+8|0;if((h&7|0)==0){h=0}else{h=0-h&7}j=s+(p+8)|0;if((j&7|0)==0){o=0}else{o=0-j&7}q=s+(o+p)|0;k=h+a|0;j=s+k|0;m=q-(s+h)-a|0;c[s+(h+4)>>2]=a|3;h:do{if((q|0)!=(c[160>>2]|0)){if((q|0)==(c[156>>2]|0)){H=(c[144>>2]|0)+m|0;c[144>>2]=H;c[156>>2]=j;c[s+(k+4)>>2]=H|1;c[s+(H+k)>>2]=H;break}a=p+4|0;t=c[s+(o+a)>>2]|0;if((t&3|0)==1){n=t&-8;r=t>>>3;do{if(!(t>>>0<256)){l=c[s+((o|24)+p)>>2]|0;u=c[s+(p+12+o)>>2]|0;do{if((u|0)==(q|0)){u=o|16;t=s+(u+a)|0;r=c[t>>2]|0;if((r|0)==0){t=s+(u+p)|0;r=c[t>>2]|0;if((r|0)==0){g=0;break}}while(1){v=r+20|0;u=c[v>>2]|0;if((u|0)!=0){r=u;t=v;continue}u=r+16|0;v=c[u>>2]|0;if((v|0)==0){break}else{r=v;t=u}}if(t>>>0<(c[152>>2]|0)>>>0){ia()}else{c[t>>2]=0;g=r;break}}else{t=c[s+((o|8)+p)>>2]|0;if(t>>>0<(c[152>>2]|0)>>>0){ia()}r=t+12|0;if((c[r>>2]|0)!=(q|0)){ia()}v=u+8|0;if((c[v>>2]|0)==(q|0)){c[r>>2]=u;c[v>>2]=t;g=u;break}else{ia()}}}while(0);if((l|0)!=0){r=c[s+(p+28+o)>>2]|0;t=440+(r<<2)|0;if((q|0)==(c[t>>2]|0)){c[t>>2]=g;if((g|0)==0){c[140>>2]=c[140>>2]&~(1<<r);break}}else{if(l>>>0<(c[152>>2]|0)>>>0){ia()}r=l+16|0;if((c[r>>2]|0)==(q|0)){c[r>>2]=g}else{c[l+20>>2]=g}if((g|0)==0){break}}if(g>>>0<(c[152>>2]|0)>>>0){ia()}c[g+24>>2]=l;q=o|16;l=c[s+(q+p)>>2]|0;do{if((l|0)!=0){if(l>>>0<(c[152>>2]|0)>>>0){ia()}else{c[g+16>>2]=l;c[l+24>>2]=g;break}}}while(0);l=c[s+(q+a)>>2]|0;if((l|0)!=0){if(l>>>0<(c[152>>2]|0)>>>0){ia()}else{c[g+20>>2]=l;c[l+24>>2]=g;break}}}}else{g=c[s+((o|8)+p)>>2]|0;a=c[s+(p+12+o)>>2]|0;t=176+(r<<1<<2)|0;if((g|0)!=(t|0)){if(g>>>0<(c[152>>2]|0)>>>0){ia()}if((c[g+12>>2]|0)!=(q|0)){ia()}}if((a|0)==(g|0)){c[34]=c[34]&~(1<<r);break}if((a|0)!=(t|0)){if(a>>>0<(c[152>>2]|0)>>>0){ia()}r=a+8|0;if((c[r>>2]|0)==(q|0)){l=r}else{ia()}}else{l=a+8|0}c[g+12>>2]=a;c[l>>2]=g}}while(0);q=s+((n|o)+p)|0;m=n+m|0}g=q+4|0;c[g>>2]=c[g>>2]&-2;c[s+(k+4)>>2]=m|1;c[s+(m+k)>>2]=m;g=m>>>3;if(m>>>0<256){m=g<<1;d=176+(m<<2)|0;l=c[34]|0;g=1<<g;if((l&g|0)!=0){l=176+(m+2<<2)|0;g=c[l>>2]|0;if(g>>>0<(c[152>>2]|0)>>>0){ia()}else{e=l;f=g}}else{c[34]=l|g;e=176+(m+2<<2)|0;f=d}c[e>>2]=j;c[f+12>>2]=j;c[s+(k+8)>>2]=f;c[s+(k+12)>>2]=d;break}e=m>>>8;if((e|0)!=0){if(m>>>0>16777215){e=31}else{G=(e+1048320|0)>>>16&8;H=e<<G;F=(H+520192|0)>>>16&4;H=H<<F;e=(H+245760|0)>>>16&2;e=14-(F|G|e)+(H<<e>>>15)|0;e=m>>>(e+7|0)&1|e<<1}}else{e=0}f=440+(e<<2)|0;c[s+(k+28)>>2]=e;c[s+(k+20)>>2]=0;c[s+(k+16)>>2]=0;l=c[140>>2]|0;g=1<<e;if((l&g|0)==0){c[140>>2]=l|g;c[f>>2]=j;c[s+(k+24)>>2]=f;c[s+(k+12)>>2]=j;c[s+(k+8)>>2]=j;break}f=c[f>>2]|0;if((e|0)==31){e=0}else{e=25-(e>>>1)|0}i:do{if((c[f+4>>2]&-8|0)!=(m|0)){e=m<<e;while(1){g=f+(e>>>31<<2)+16|0;l=c[g>>2]|0;if((l|0)==0){break}if((c[l+4>>2]&-8|0)==(m|0)){d=l;break i}else{e=e<<1;f=l}}if(g>>>0<(c[152>>2]|0)>>>0){ia()}else{c[g>>2]=j;c[s+(k+24)>>2]=f;c[s+(k+12)>>2]=j;c[s+(k+8)>>2]=j;break h}}else{d=f}}while(0);f=d+8|0;e=c[f>>2]|0;g=c[152>>2]|0;if(d>>>0<g>>>0){ia()}if(e>>>0<g>>>0){ia()}else{c[e+12>>2]=j;c[f>>2]=j;c[s+(k+8)>>2]=e;c[s+(k+12)>>2]=d;c[s+(k+24)>>2]=0;break}}else{H=(c[148>>2]|0)+m|0;c[148>>2]=H;c[160>>2]=j;c[s+(k+4)>>2]=H|1}}while(0);H=s+(h|8)|0;i=b;return H|0}e=584|0;while(1){d=c[e>>2]|0;if(!(d>>>0>q>>>0)?(n=c[e+4>>2]|0,m=d+n|0,m>>>0>q>>>0):0){break}e=c[e+8>>2]|0}e=d+(n+ -39)|0;if((e&7|0)==0){e=0}else{e=0-e&7}d=d+(n+ -47+e)|0;d=d>>>0<(q+16|0)>>>0?q:d;e=d+8|0;f=s+8|0;if((f&7|0)==0){f=0}else{f=0-f&7}H=p+ -40-f|0;c[160>>2]=s+f;c[148>>2]=H;c[s+(f+4)>>2]=H|1;c[s+(p+ -36)>>2]=40;c[164>>2]=c[624>>2];c[d+4>>2]=27;c[e+0>>2]=c[584>>2];c[e+4>>2]=c[588>>2];c[e+8>>2]=c[592>>2];c[e+12>>2]=c[596>>2];c[584>>2]=s;c[588>>2]=p;c[596>>2]=0;c[592>>2]=e;f=d+28|0;c[f>>2]=7;if((d+32|0)>>>0<m>>>0){while(1){e=f+4|0;c[e>>2]=7;if((f+8|0)>>>0<m>>>0){f=e}else{break}}}if((d|0)!=(q|0)){d=d-q|0;e=q+(d+4)|0;c[e>>2]=c[e>>2]&-2;c[q+4>>2]=d|1;c[q+d>>2]=d;e=d>>>3;if(d>>>0<256){f=e<<1;d=176+(f<<2)|0;g=c[34]|0;e=1<<e;if((g&e|0)!=0){f=176+(f+2<<2)|0;e=c[f>>2]|0;if(e>>>0<(c[152>>2]|0)>>>0){ia()}else{j=f;k=e}}else{c[34]=g|e;j=176+(f+2<<2)|0;k=d}c[j>>2]=q;c[k+12>>2]=q;c[q+8>>2]=k;c[q+12>>2]=d;break}e=d>>>8;if((e|0)!=0){if(d>>>0>16777215){e=31}else{G=(e+1048320|0)>>>16&8;H=e<<G;F=(H+520192|0)>>>16&4;H=H<<F;e=(H+245760|0)>>>16&2;e=14-(F|G|e)+(H<<e>>>15)|0;e=d>>>(e+7|0)&1|e<<1}}else{e=0}j=440+(e<<2)|0;c[q+28>>2]=e;c[q+20>>2]=0;c[q+16>>2]=0;f=c[140>>2]|0;g=1<<e;if((f&g|0)==0){c[140>>2]=f|g;c[j>>2]=q;c[q+24>>2]=j;c[q+12>>2]=q;c[q+8>>2]=q;break}f=c[j>>2]|0;if((e|0)==31){e=0}else{e=25-(e>>>1)|0}j:do{if((c[f+4>>2]&-8|0)!=(d|0)){e=d<<e;while(1){j=f+(e>>>31<<2)+16|0;g=c[j>>2]|0;if((g|0)==0){break}if((c[g+4>>2]&-8|0)==(d|0)){h=g;break j}else{e=e<<1;f=g}}if(j>>>0<(c[152>>2]|0)>>>0){ia()}else{c[j>>2]=q;c[q+24>>2]=f;c[q+12>>2]=q;c[q+8>>2]=q;break g}}else{h=f}}while(0);f=h+8|0;e=c[f>>2]|0;d=c[152>>2]|0;if(h>>>0<d>>>0){ia()}if(e>>>0<d>>>0){ia()}else{c[e+12>>2]=q;c[f>>2]=q;c[q+8>>2]=e;c[q+12>>2]=h;c[q+24>>2]=0;break}}}else{H=c[152>>2]|0;if((H|0)==0|s>>>0<H>>>0){c[152>>2]=s}c[584>>2]=s;c[588>>2]=p;c[596>>2]=0;c[172>>2]=c[152];c[168>>2]=-1;d=0;do{H=d<<1;G=176+(H<<2)|0;c[176+(H+3<<2)>>2]=G;c[176+(H+2<<2)>>2]=G;d=d+1|0}while((d|0)!=32);d=s+8|0;if((d&7|0)==0){d=0}else{d=0-d&7}H=p+ -40-d|0;c[160>>2]=s+d;c[148>>2]=H;c[s+(d+4)>>2]=H|1;c[s+(p+ -36)>>2]=40;c[164>>2]=c[624>>2]}}while(0);d=c[148>>2]|0;if(d>>>0>a>>>0){G=d-a|0;c[148>>2]=G;H=c[160>>2]|0;c[160>>2]=H+a;c[H+(a+4)>>2]=G|1;c[H+4>>2]=a|3;H=H+8|0;i=b;return H|0}}c[(oa()|0)>>2]=12;H=0;i=b;return H|0}function Va(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0;b=i;if((a|0)==0){i=b;return}q=a+ -8|0;r=c[152>>2]|0;if(q>>>0<r>>>0){ia()}o=c[a+ -4>>2]|0;n=o&3;if((n|0)==1){ia()}j=o&-8;h=a+(j+ -8)|0;do{if((o&1|0)==0){u=c[q>>2]|0;if((n|0)==0){i=b;return}q=-8-u|0;o=a+q|0;n=u+j|0;if(o>>>0<r>>>0){ia()}if((o|0)==(c[156>>2]|0)){d=a+(j+ -4)|0;if((c[d>>2]&3|0)!=3){d=o;m=n;break}c[144>>2]=n;c[d>>2]=c[d>>2]&-2;c[a+(q+4)>>2]=n|1;c[h>>2]=n;i=b;return}t=u>>>3;if(u>>>0<256){d=c[a+(q+8)>>2]|0;m=c[a+(q+12)>>2]|0;p=176+(t<<1<<2)|0;if((d|0)!=(p|0)){if(d>>>0<r>>>0){ia()}if((c[d+12>>2]|0)!=(o|0)){ia()}}if((m|0)==(d|0)){c[34]=c[34]&~(1<<t);d=o;m=n;break}if((m|0)!=(p|0)){if(m>>>0<r>>>0){ia()}p=m+8|0;if((c[p>>2]|0)==(o|0)){s=p}else{ia()}}else{s=m+8|0}c[d+12>>2]=m;c[s>>2]=d;d=o;m=n;break}s=c[a+(q+24)>>2]|0;t=c[a+(q+12)>>2]|0;do{if((t|0)==(o|0)){u=a+(q+20)|0;t=c[u>>2]|0;if((t|0)==0){u=a+(q+16)|0;t=c[u>>2]|0;if((t|0)==0){p=0;break}}while(1){w=t+20|0;v=c[w>>2]|0;if((v|0)!=0){t=v;u=w;continue}v=t+16|0;w=c[v>>2]|0;if((w|0)==0){break}else{t=w;u=v}}if(u>>>0<r>>>0){ia()}else{c[u>>2]=0;p=t;break}}else{u=c[a+(q+8)>>2]|0;if(u>>>0<r>>>0){ia()}r=u+12|0;if((c[r>>2]|0)!=(o|0)){ia()}v=t+8|0;if((c[v>>2]|0)==(o|0)){c[r>>2]=t;c[v>>2]=u;p=t;break}else{ia()}}}while(0);if((s|0)!=0){t=c[a+(q+28)>>2]|0;r=440+(t<<2)|0;if((o|0)==(c[r>>2]|0)){c[r>>2]=p;if((p|0)==0){c[140>>2]=c[140>>2]&~(1<<t);d=o;m=n;break}}else{if(s>>>0<(c[152>>2]|0)>>>0){ia()}r=s+16|0;if((c[r>>2]|0)==(o|0)){c[r>>2]=p}else{c[s+20>>2]=p}if((p|0)==0){d=o;m=n;break}}if(p>>>0<(c[152>>2]|0)>>>0){ia()}c[p+24>>2]=s;r=c[a+(q+16)>>2]|0;do{if((r|0)!=0){if(r>>>0<(c[152>>2]|0)>>>0){ia()}else{c[p+16>>2]=r;c[r+24>>2]=p;break}}}while(0);q=c[a+(q+20)>>2]|0;if((q|0)!=0){if(q>>>0<(c[152>>2]|0)>>>0){ia()}else{c[p+20>>2]=q;c[q+24>>2]=p;d=o;m=n;break}}else{d=o;m=n}}else{d=o;m=n}}else{d=q;m=j}}while(0);if(!(d>>>0<h>>>0)){ia()}n=a+(j+ -4)|0;o=c[n>>2]|0;if((o&1|0)==0){ia()}if((o&2|0)==0){if((h|0)==(c[160>>2]|0)){w=(c[148>>2]|0)+m|0;c[148>>2]=w;c[160>>2]=d;c[d+4>>2]=w|1;if((d|0)!=(c[156>>2]|0)){i=b;return}c[156>>2]=0;c[144>>2]=0;i=b;return}if((h|0)==(c[156>>2]|0)){w=(c[144>>2]|0)+m|0;c[144>>2]=w;c[156>>2]=d;c[d+4>>2]=w|1;c[d+w>>2]=w;i=b;return}m=(o&-8)+m|0;n=o>>>3;do{if(!(o>>>0<256)){l=c[a+(j+16)>>2]|0;q=c[a+(j|4)>>2]|0;do{if((q|0)==(h|0)){o=a+(j+12)|0;n=c[o>>2]|0;if((n|0)==0){o=a+(j+8)|0;n=c[o>>2]|0;if((n|0)==0){k=0;break}}while(1){p=n+20|0;q=c[p>>2]|0;if((q|0)!=0){n=q;o=p;continue}p=n+16|0;q=c[p>>2]|0;if((q|0)==0){break}else{n=q;o=p}}if(o>>>0<(c[152>>2]|0)>>>0){ia()}else{c[o>>2]=0;k=n;break}}else{o=c[a+j>>2]|0;if(o>>>0<(c[152>>2]|0)>>>0){ia()}p=o+12|0;if((c[p>>2]|0)!=(h|0)){ia()}n=q+8|0;if((c[n>>2]|0)==(h|0)){c[p>>2]=q;c[n>>2]=o;k=q;break}else{ia()}}}while(0);if((l|0)!=0){n=c[a+(j+20)>>2]|0;o=440+(n<<2)|0;if((h|0)==(c[o>>2]|0)){c[o>>2]=k;if((k|0)==0){c[140>>2]=c[140>>2]&~(1<<n);break}}else{if(l>>>0<(c[152>>2]|0)>>>0){ia()}n=l+16|0;if((c[n>>2]|0)==(h|0)){c[n>>2]=k}else{c[l+20>>2]=k}if((k|0)==0){break}}if(k>>>0<(c[152>>2]|0)>>>0){ia()}c[k+24>>2]=l;h=c[a+(j+8)>>2]|0;do{if((h|0)!=0){if(h>>>0<(c[152>>2]|0)>>>0){ia()}else{c[k+16>>2]=h;c[h+24>>2]=k;break}}}while(0);h=c[a+(j+12)>>2]|0;if((h|0)!=0){if(h>>>0<(c[152>>2]|0)>>>0){ia()}else{c[k+20>>2]=h;c[h+24>>2]=k;break}}}}else{k=c[a+j>>2]|0;a=c[a+(j|4)>>2]|0;j=176+(n<<1<<2)|0;if((k|0)!=(j|0)){if(k>>>0<(c[152>>2]|0)>>>0){ia()}if((c[k+12>>2]|0)!=(h|0)){ia()}}if((a|0)==(k|0)){c[34]=c[34]&~(1<<n);break}if((a|0)!=(j|0)){if(a>>>0<(c[152>>2]|0)>>>0){ia()}j=a+8|0;if((c[j>>2]|0)==(h|0)){l=j}else{ia()}}else{l=a+8|0}c[k+12>>2]=a;c[l>>2]=k}}while(0);c[d+4>>2]=m|1;c[d+m>>2]=m;if((d|0)==(c[156>>2]|0)){c[144>>2]=m;i=b;return}}else{c[n>>2]=o&-2;c[d+4>>2]=m|1;c[d+m>>2]=m}h=m>>>3;if(m>>>0<256){a=h<<1;e=176+(a<<2)|0;j=c[34]|0;h=1<<h;if((j&h|0)!=0){h=176+(a+2<<2)|0;a=c[h>>2]|0;if(a>>>0<(c[152>>2]|0)>>>0){ia()}else{f=h;g=a}}else{c[34]=j|h;f=176+(a+2<<2)|0;g=e}c[f>>2]=d;c[g+12>>2]=d;c[d+8>>2]=g;c[d+12>>2]=e;i=b;return}f=m>>>8;if((f|0)!=0){if(m>>>0>16777215){f=31}else{v=(f+1048320|0)>>>16&8;w=f<<v;u=(w+520192|0)>>>16&4;w=w<<u;f=(w+245760|0)>>>16&2;f=14-(u|v|f)+(w<<f>>>15)|0;f=m>>>(f+7|0)&1|f<<1}}else{f=0}g=440+(f<<2)|0;c[d+28>>2]=f;c[d+20>>2]=0;c[d+16>>2]=0;a=c[140>>2]|0;h=1<<f;a:do{if((a&h|0)!=0){g=c[g>>2]|0;if((f|0)==31){f=0}else{f=25-(f>>>1)|0}b:do{if((c[g+4>>2]&-8|0)!=(m|0)){f=m<<f;a=g;while(1){h=a+(f>>>31<<2)+16|0;g=c[h>>2]|0;if((g|0)==0){break}if((c[g+4>>2]&-8|0)==(m|0)){e=g;break b}else{f=f<<1;a=g}}if(h>>>0<(c[152>>2]|0)>>>0){ia()}else{c[h>>2]=d;c[d+24>>2]=a;c[d+12>>2]=d;c[d+8>>2]=d;break a}}else{e=g}}while(0);g=e+8|0;f=c[g>>2]|0;h=c[152>>2]|0;if(e>>>0<h>>>0){ia()}if(f>>>0<h>>>0){ia()}else{c[f+12>>2]=d;c[g>>2]=d;c[d+8>>2]=f;c[d+12>>2]=e;c[d+24>>2]=0;break}}else{c[140>>2]=a|h;c[g>>2]=d;c[d+24>>2]=g;c[d+12>>2]=d;c[d+8>>2]=d}}while(0);w=(c[168>>2]|0)+ -1|0;c[168>>2]=w;if((w|0)==0){d=592|0}else{i=b;return}while(1){d=c[d>>2]|0;if((d|0)==0){break}else{d=d+8|0}}c[168>>2]=-1;i=b;return}function Wa(){}function Xa(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0;f=b+e|0;if((e|0)>=20){d=d&255;i=b&3;h=d|d<<8|d<<16|d<<24;g=f&~3;if(i){i=b+4-i|0;while((b|0)<(i|0)){a[b]=d;b=b+1|0}}while((b|0)<(g|0)){c[b>>2]=h;b=b+4|0}}while((b|0)<(f|0)){a[b]=d;b=b+1|0}return b-e|0}function Ya(b){b=b|0;var c=0;c=b;while(a[c]|0){c=c+1|0}return c-b|0}function Za(b,d,e){b=b|0;d=d|0;e=e|0;var f=0;if((e|0)>=4096)return ma(b|0,d|0,e|0)|0;f=b|0;if((b&3)==(d&3)){while(b&3){if((e|0)==0)return f|0;a[b]=a[d]|0;b=b+1|0;d=d+1|0;e=e-1|0}while((e|0)>=4){c[b>>2]=c[d>>2];b=b+4|0;d=d+4|0;e=e-4|0}}while((e|0)>0){a[b]=a[d]|0;b=b+1|0;d=d+1|0;e=e-1|0}return f|0}function _a(a,b,c){a=a|0;b=b|0;c=c|0;qa[a&4095](b|0,c|0)}function $a(a,b){a=a|0;b=b|0;da(0,a|0,b|0)}function ab(a,b){a=a|0;b=b|0;da(1,a|0,b|0)}function bb(a,b){a=a|0;b=b|0;da(2,a|0,b|0)}function cb(a,b){a=a|0;b=b|0;da(3,a|0,b|0)}function db(a,b){a=a|0;b=b|0;da(4,a|0,b|0)}function eb(a,b){a=a|0;b=b|0;da(5,a|0,b|0)}function fb(a,b){a=a|0;b=b|0;da(6,a|0,b|0)}function gb(a,b){a=a|0;b=b|0;da(7,a|0,b|0)}function hb(a,b){a=a|0;b=b|0;da(8,a|0,b|0)}function ib(a,b){a=a|0;b=b|0;da(9,a|0,b|0)}function jb(a,b){a=a|0;b=b|0;da(10,a|0,b|0)}function kb(a,b){a=a|0;b=b|0;da(11,a|0,b|0)}function lb(a,b){a=a|0;b=b|0;da(12,a|0,b|0)}function mb(a,b){a=a|0;b=b|0;da(13,a|0,b|0)}function nb(a,b){a=a|0;b=b|0;da(14,a|0,b|0)}function ob(a,b){a=a|0;b=b|0;da(15,a|0,b|0)}function pb(a,b){a=a|0;b=b|0;da(16,a|0,b|0)}function qb(a,b){a=a|0;b=b|0;da(17,a|0,b|0)}function rb(a,b){a=a|0;b=b|0;da(18,a|0,b|0)}function sb(a,b){a=a|0;b=b|0;da(19,a|0,b|0)}function tb(a,b){a=a|0;b=b|0;da(20,a|0,b|0)}function ub(a,b){a=a|0;b=b|0;da(21,a|0,b|0)}function vb(a,b){a=a|0;b=b|0;da(22,a|0,b|0)}function wb(a,b){a=a|0;b=b|0;da(23,a|0,b|0)}function xb(a,b){a=a|0;b=b|0;da(24,a|0,b|0)}function yb(a,b){a=a|0;b=b|0;da(25,a|0,b|0)}function zb(a,b){a=a|0;b=b|0;da(26,a|0,b|0)}function Ab(a,b){a=a|0;b=b|0;da(27,a|0,b|0)}function Bb(a,b){a=a|0;b=b|0;da(28,a|0,b|0)}function Cb(a,b){a=a|0;b=b|0;da(29,a|0,b|0)}function Db(a,b){a=a|0;b=b|0;da(30,a|0,b|0)}function Eb(a,b){a=a|0;b=b|0;da(31,a|0,b|0)}function Fb(a,b){a=a|0;b=b|0;da(32,a|0,b|0)}function Gb(a,b){a=a|0;b=b|0;da(33,a|0,b|0)}function Hb(a,b){a=a|0;b=b|0;da(34,a|0,b|0)}function Ib(a,b){a=a|0;b=b|0;da(35,a|0,b|0)}function Jb(a,b){a=a|0;b=b|0;da(36,a|0,b|0)}function Kb(a,b){a=a|0;b=b|0;da(37,a|0,b|0)}function Lb(a,b){a=a|0;b=b|0;da(38,a|0,b|0)}function Mb(a,b){a=a|0;b=b|0;da(39,a|0,b|0)}function Nb(a,b){a=a|0;b=b|0;da(40,a|0,b|0)}function Ob(a,b){a=a|0;b=b|0;da(41,a|0,b|0)}function Pb(a,b){a=a|0;b=b|0;da(42,a|0,b|0)}function Qb(a,b){a=a|0;b=b|0;da(43,a|0,b|0)}function Rb(a,b){a=a|0;b=b|0;da(44,a|0,b|0)}function Sb(a,b){a=a|0;b=b|0;da(45,a|0,b|0)}function Tb(a,b){a=a|0;b=b|0;da(46,a|0,b|0)}function Ub(a,b){a=a|0;b=b|0;da(47,a|0,b|0)}function Vb(a,b){a=a|0;b=b|0;da(48,a|0,b|0)}function Wb(a,b){a=a|0;b=b|0;da(49,a|0,b|0)}function Xb(a,b){a=a|0;b=b|0;da(50,a|0,b|0)}function Yb(a,b){a=a|0;b=b|0;da(51,a|0,b|0)}function Zb(a,b){a=a|0;b=b|0;da(52,a|0,b|0)}function _b(a,b){a=a|0;b=b|0;da(53,a|0,b|0)}function $b(a,b){a=a|0;b=b|0;da(54,a|0,b|0)}function ac(a,b){a=a|0;b=b|0;da(55,a|0,b|0)}function bc(a,b){a=a|0;b=b|0;da(56,a|0,b|0)}function cc(a,b){a=a|0;b=b|0;da(57,a|0,b|0)}function dc(a,b){a=a|0;b=b|0;da(58,a|0,b|0)}function ec(a,b){a=a|0;b=b|0;da(59,a|0,b|0)}function fc(a,b){a=a|0;b=b|0;da(60,a|0,b|0)}function gc(a,b){a=a|0;b=b|0;da(61,a|0,b|0)}function hc(a,b){a=a|0;b=b|0;da(62,a|0,b|0)}function ic(a,b){a=a|0;b=b|0;da(63,a|0,b|0)}function jc(a,b){a=a|0;b=b|0;da(64,a|0,b|0)}function kc(a,b){a=a|0;b=b|0;da(65,a|0,b|0)}function lc(a,b){a=a|0;b=b|0;da(66,a|0,b|0)}function mc(a,b){a=a|0;b=b|0;da(67,a|0,b|0)}function nc(a,b){a=a|0;b=b|0;da(68,a|0,b|0)}function oc(a,b){a=a|0;b=b|0;da(69,a|0,b|0)}function pc(a,b){a=a|0;b=b|0;da(70,a|0,b|0)}function qc(a,b){a=a|0;b=b|0;da(71,a|0,b|0)}function rc(a,b){a=a|0;b=b|0;da(72,a|0,b|0)}function sc(a,b){a=a|0;b=b|0;da(73,a|0,b|0)}function tc(a,b){a=a|0;b=b|0;da(74,a|0,b|0)}function uc(a,b){a=a|0;b=b|0;da(75,a|0,b|0)}function vc(a,b){a=a|0;b=b|0;da(76,a|0,b|0)}function wc(a,b){a=a|0;b=b|0;da(77,a|0,b|0)}function xc(a,b){a=a|0;b=b|0;da(78,a|0,b|0)}function yc(a,b){a=a|0;b=b|0;da(79,a|0,b|0)}function zc(a,b){a=a|0;b=b|0;da(80,a|0,b|0)}function Ac(a,b){a=a|0;b=b|0;da(81,a|0,b|0)}function Bc(a,b){a=a|0;b=b|0;da(82,a|0,b|0)}function Cc(a,b){a=a|0;b=b|0;da(83,a|0,b|0)}function Dc(a,b){a=a|0;b=b|0;da(84,a|0,b|0)}function Ec(a,b){a=a|0;b=b|0;da(85,a|0,b|0)}function Fc(a,b){a=a|0;b=b|0;da(86,a|0,b|0)}function Gc(a,b){a=a|0;b=b|0;da(87,a|0,b|0)}function Hc(a,b){a=a|0;b=b|0;da(88,a|0,b|0)}function Ic(a,b){a=a|0;b=b|0;da(89,a|0,b|0)}function Jc(a,b){a=a|0;b=b|0;da(90,a|0,b|0)}function Kc(a,b){a=a|0;b=b|0;da(91,a|0,b|0)}function Lc(a,b){a=a|0;b=b|0;da(92,a|0,b|0)}function Mc(a,b){a=a|0;b=b|0;da(93,a|0,b|0)}function Nc(a,b){a=a|0;b=b|0;da(94,a|0,b|0)}function Oc(a,b){a=a|0;b=b|0;da(95,a|0,b|0)}function Pc(a,b){a=a|0;b=b|0;da(96,a|0,b|0)}function Qc(a,b){a=a|0;b=b|0;da(97,a|0,b|0)}function Rc(a,b){a=a|0;b=b|0;da(98,a|0,b|0)}function Sc(a,b){a=a|0;b=b|0;da(99,a|0,b|0)}function Tc(a,b){a=a|0;b=b|0;da(100,a|0,b|0)}function Uc(a,b){a=a|0;b=b|0;da(101,a|0,b|0)}function Vc(a,b){a=a|0;b=b|0;da(102,a|0,b|0)}function Wc(a,b){a=a|0;b=b|0;da(103,a|0,b|0)}function Xc(a,b){a=a|0;b=b|0;da(104,a|0,b|0)}function Yc(a,b){a=a|0;b=b|0;da(105,a|0,b|0)}function Zc(a,b){a=a|0;b=b|0;da(106,a|0,b|0)}function _c(a,b){a=a|0;b=b|0;da(107,a|0,b|0)}function $c(a,b){a=a|0;b=b|0;da(108,a|0,b|0)}function ad(a,b){a=a|0;b=b|0;da(109,a|0,b|0)}function bd(a,b){a=a|0;b=b|0;da(110,a|0,b|0)}function cd(a,b){a=a|0;b=b|0;da(111,a|0,b|0)}function dd(a,b){a=a|0;b=b|0;da(112,a|0,b|0)}function ed(a,b){a=a|0;b=b|0;da(113,a|0,b|0)}function fd(a,b){a=a|0;b=b|0;da(114,a|0,b|0)}function gd(a,b){a=a|0;b=b|0;da(115,a|0,b|0)}function hd(a,b){a=a|0;b=b|0;da(116,a|0,b|0)}function id(a,b){a=a|0;b=b|0;da(117,a|0,b|0)}function jd(a,b){a=a|0;b=b|0;da(118,a|0,b|0)}function kd(a,b){a=a|0;b=b|0;da(119,a|0,b|0)}function ld(a,b){a=a|0;b=b|0;da(120,a|0,b|0)}function md(a,b){a=a|0;b=b|0;da(121,a|0,b|0)}function nd(a,b){a=a|0;b=b|0;da(122,a|0,b|0)}function od(a,b){a=a|0;b=b|0;da(123,a|0,b|0)}function pd(a,b){a=a|0;b=b|0;da(124,a|0,b|0)}function qd(a,b){a=a|0;b=b|0;da(125,a|0,b|0)}function rd(a,b){a=a|0;b=b|0;da(126,a|0,b|0)}function sd(a,b){a=a|0;b=b|0;da(127,a|0,b|0)}function td(a,b){a=a|0;b=b|0;da(128,a|0,b|0)}function ud(a,b){a=a|0;b=b|0;da(129,a|0,b|0)}function vd(a,b){a=a|0;b=b|0;da(130,a|0,b|0)}function wd(a,b){a=a|0;b=b|0;da(131,a|0,b|0)}function xd(a,b){a=a|0;b=b|0;da(132,a|0,b|0)}function yd(a,b){a=a|0;b=b|0;da(133,a|0,b|0)}function zd(a,b){a=a|0;b=b|0;da(134,a|0,b|0)}function Ad(a,b){a=a|0;b=b|0;da(135,a|0,b|0)}function Bd(a,b){a=a|0;b=b|0;da(136,a|0,b|0)}function Cd(a,b){a=a|0;b=b|0;da(137,a|0,b|0)}function Dd(a,b){a=a|0;b=b|0;da(138,a|0,b|0)}function Ed(a,b){a=a|0;b=b|0;da(139,a|0,b|0)}function Fd(a,b){a=a|0;b=b|0;da(140,a|0,b|0)}function Gd(a,b){a=a|0;b=b|0;da(141,a|0,b|0)}function Hd(a,b){a=a|0;b=b|0;da(142,a|0,b|0)}function Id(a,b){a=a|0;b=b|0;da(143,a|0,b|0)}function Jd(a,b){a=a|0;b=b|0;da(144,a|0,b|0)}function Kd(a,b){a=a|0;b=b|0;da(145,a|0,b|0)}function Ld(a,b){a=a|0;b=b|0;da(146,a|0,b|0)}function Md(a,b){a=a|0;b=b|0;da(147,a|0,b|0)}function Nd(a,b){a=a|0;b=b|0;da(148,a|0,b|0)}function Od(a,b){a=a|0;b=b|0;da(149,a|0,b|0)}function Pd(a,b){a=a|0;b=b|0;da(150,a|0,b|0)}function Qd(a,b){a=a|0;b=b|0;da(151,a|0,b|0)}function Rd(a,b){a=a|0;b=b|0;da(152,a|0,b|0)}function Sd(a,b){a=a|0;b=b|0;da(153,a|0,b|0)}function Td(a,b){a=a|0;b=b|0;da(154,a|0,b|0)}function Ud(a,b){a=a|0;b=b|0;da(155,a|0,b|0)}function Vd(a,b){a=a|0;b=b|0;da(156,a|0,b|0)}function Wd(a,b){a=a|0;b=b|0;da(157,a|0,b|0)}function Xd(a,b){a=a|0;b=b|0;da(158,a|0,b|0)}function Yd(a,b){a=a|0;b=b|0;da(159,a|0,b|0)}function Zd(a,b){a=a|0;b=b|0;da(160,a|0,b|0)}function _d(a,b){a=a|0;b=b|0;da(161,a|0,b|0)}function $d(a,b){a=a|0;b=b|0;da(162,a|0,b|0)}function ae(a,b){a=a|0;b=b|0;da(163,a|0,b|0)}function be(a,b){a=a|0;b=b|0;da(164,a|0,b|0)}function ce(a,b){a=a|0;b=b|0;da(165,a|0,b|0)}function de(a,b){a=a|0;b=b|0;da(166,a|0,b|0)}function ee(a,b){a=a|0;b=b|0;da(167,a|0,b|0)}function fe(a,b){a=a|0;b=b|0;da(168,a|0,b|0)}function ge(a,b){a=a|0;b=b|0;da(169,a|0,b|0)}function he(a,b){a=a|0;b=b|0;da(170,a|0,b|0)}function ie(a,b){a=a|0;b=b|0;da(171,a|0,b|0)}function je(a,b){a=a|0;b=b|0;da(172,a|0,b|0)}function ke(a,b){a=a|0;b=b|0;da(173,a|0,b|0)}function le(a,b){a=a|0;b=b|0;da(174,a|0,b|0)}function me(a,b){a=a|0;b=b|0;da(175,a|0,b|0)}function ne(a,b){a=a|0;b=b|0;da(176,a|0,b|0)}function oe(a,b){a=a|0;b=b|0;da(177,a|0,b|0)}function pe(a,b){a=a|0;b=b|0;da(178,a|0,b|0)}function qe(a,b){a=a|0;b=b|0;da(179,a|0,b|0)}function re(a,b){a=a|0;b=b|0;da(180,a|0,b|0)}function se(a,b){a=a|0;b=b|0;da(181,a|0,b|0)}function te(a,b){a=a|0;b=b|0;da(182,a|0,b|0)}function ue(a,b){a=a|0;b=b|0;da(183,a|0,b|0)}function ve(a,b){a=a|0;b=b|0;da(184,a|0,b|0)}function we(a,b){a=a|0;b=b|0;da(185,a|0,b|0)}function xe(a,b){a=a|0;b=b|0;da(186,a|0,b|0)}function ye(a,b){a=a|0;b=b|0;da(187,a|0,b|0)}function ze(a,b){a=a|0;b=b|0;da(188,a|0,b|0)}function Ae(a,b){a=a|0;b=b|0;da(189,a|0,b|0)}function Be(a,b){a=a|0;b=b|0;da(190,a|0,b|0)}function Ce(a,b){a=a|0;b=b|0;da(191,a|0,b|0)}function De(a,b){a=a|0;b=b|0;da(192,a|0,b|0)}function Ee(a,b){a=a|0;b=b|0;da(193,a|0,b|0)}function Fe(a,b){a=a|0;b=b|0;da(194,a|0,b|0)}function Ge(a,b){a=a|0;b=b|0;da(195,a|0,b|0)}function He(a,b){a=a|0;b=b|0;da(196,a|0,b|0)}function Ie(a,b){a=a|0;b=b|0;da(197,a|0,b|0)}function Je(a,b){a=a|0;b=b|0;da(198,a|0,b|0)}function Ke(a,b){a=a|0;b=b|0;da(199,a|0,b|0)}function Le(a,b){a=a|0;b=b|0;da(200,a|0,b|0)}function Me(a,b){a=a|0;b=b|0;da(201,a|0,b|0)}function Ne(a,b){a=a|0;b=b|0;da(202,a|0,b|0)}function Oe(a,b){a=a|0;b=b|0;da(203,a|0,b|0)}function Pe(a,b){a=a|0;b=b|0;da(204,a|0,b|0)}function Qe(a,b){a=a|0;b=b|0;da(205,a|0,b|0)}function Re(a,b){a=a|0;b=b|0;da(206,a|0,b|0)}function Se(a,b){a=a|0;b=b|0;da(207,a|0,b|0)}function Te(a,b){a=a|0;b=b|0;da(208,a|0,b|0)}function Ue(a,b){a=a|0;b=b|0;da(209,a|0,b|0)}function Ve(a,b){a=a|0;b=b|0;da(210,a|0,b|0)}function We(a,b){a=a|0;b=b|0;da(211,a|0,b|0)}function Xe(a,b){a=a|0;b=b|0;da(212,a|0,b|0)}function Ye(a,b){a=a|0;b=b|0;da(213,a|0,b|0)}function Ze(a,b){a=a|0;b=b|0;da(214,a|0,b|0)}function _e(a,b){a=a|0;b=b|0;da(215,a|0,b|0)}function $e(a,b){a=a|0;b=b|0;da(216,a|0,b|0)}function af(a,b){a=a|0;b=b|0;da(217,a|0,b|0)}function bf(a,b){a=a|0;b=b|0;da(218,a|0,b|0)}function cf(a,b){a=a|0;b=b|0;da(219,a|0,b|0)}function df(a,b){a=a|0;b=b|0;da(220,a|0,b|0)}function ef(a,b){a=a|0;b=b|0;da(221,a|0,b|0)}function ff(a,b){a=a|0;b=b|0;da(222,a|0,b|0)}function gf(a,b){a=a|0;b=b|0;da(223,a|0,b|0)}function hf(a,b){a=a|0;b=b|0;da(224,a|0,b|0)}function jf(a,b){a=a|0;b=b|0;da(225,a|0,b|0)}function kf(a,b){a=a|0;b=b|0;da(226,a|0,b|0)}function lf(a,b){a=a|0;b=b|0;da(227,a|0,b|0)}function mf(a,b){a=a|0;b=b|0;da(228,a|0,b|0)}function nf(a,b){a=a|0;b=b|0;da(229,a|0,b|0)}function of(a,b){a=a|0;b=b|0;da(230,a|0,b|0)}function pf(a,b){a=a|0;b=b|0;da(231,a|0,b|0)}function qf(a,b){a=a|0;b=b|0;da(232,a|0,b|0)}function rf(a,b){a=a|0;b=b|0;da(233,a|0,b|0)}function sf(a,b){a=a|0;b=b|0;da(234,a|0,b|0)}function tf(a,b){a=a|0;b=b|0;da(235,a|0,b|0)}function uf(a,b){a=a|0;b=b|0;da(236,a|0,b|0)}function vf(a,b){a=a|0;b=b|0;da(237,a|0,b|0)}function wf(a,b){a=a|0;b=b|0;da(238,a|0,b|0)}function xf(a,b){a=a|0;b=b|0;da(239,a|0,b|0)}function yf(a,b){a=a|0;b=b|0;da(240,a|0,b|0)}function zf(a,b){a=a|0;b=b|0;da(241,a|0,b|0)}function Af(a,b){a=a|0;b=b|0;da(242,a|0,b|0)}function Bf(a,b){a=a|0;b=b|0;da(243,a|0,b|0)}function Cf(a,b){a=a|0;b=b|0;da(244,a|0,b|0)}function Df(a,b){a=a|0;b=b|0;da(245,a|0,b|0)}function Ef(a,b){a=a|0;b=b|0;da(246,a|0,b|0)}function Ff(a,b){a=a|0;b=b|0;da(247,a|0,b|0)}function Gf(a,b){a=a|0;b=b|0;da(248,a|0,b|0)}function Hf(a,b){a=a|0;b=b|0;da(249,a|0,b|0)}function If(a,b){a=a|0;b=b|0;da(250,a|0,b|0)}function Jf(a,b){a=a|0;b=b|0;da(251,a|0,b|0)}function Kf(a,b){a=a|0;b=b|0;da(252,a|0,b|0)}function Lf(a,b){a=a|0;b=b|0;da(253,a|0,b|0)}function Mf(a,b){a=a|0;b=b|0;da(254,a|0,b|0)}function Nf(a,b){a=a|0;b=b|0;da(255,a|0,b|0)}function Of(a,b){a=a|0;b=b|0;da(256,a|0,b|0)}function Pf(a,b){a=a|0;b=b|0;da(257,a|0,b|0)}function Qf(a,b){a=a|0;b=b|0;da(258,a|0,b|0)}function Rf(a,b){a=a|0;b=b|0;da(259,a|0,b|0)}function Sf(a,b){a=a|0;b=b|0;da(260,a|0,b|0)}function Tf(a,b){a=a|0;b=b|0;da(261,a|0,b|0)}function Uf(a,b){a=a|0;b=b|0;da(262,a|0,b|0)}function Vf(a,b){a=a|0;b=b|0;da(263,a|0,b|0)}function Wf(a,b){a=a|0;b=b|0;da(264,a|0,b|0)}function Xf(a,b){a=a|0;b=b|0;da(265,a|0,b|0)}function Yf(a,b){a=a|0;b=b|0;da(266,a|0,b|0)}function Zf(a,b){a=a|0;b=b|0;da(267,a|0,b|0)}function _f(a,b){a=a|0;b=b|0;da(268,a|0,b|0)}function $f(a,b){a=a|0;b=b|0;da(269,a|0,b|0)}function ag(a,b){a=a|0;b=b|0;da(270,a|0,b|0)}function bg(a,b){a=a|0;b=b|0;da(271,a|0,b|0)}function cg(a,b){a=a|0;b=b|0;da(272,a|0,b|0)}function dg(a,b){a=a|0;b=b|0;da(273,a|0,b|0)}function eg(a,b){a=a|0;b=b|0;da(274,a|0,b|0)}function fg(a,b){a=a|0;b=b|0;da(275,a|0,b|0)}function gg(a,b){a=a|0;b=b|0;da(276,a|0,b|0)}function hg(a,b){a=a|0;b=b|0;da(277,a|0,b|0)}function ig(a,b){a=a|0;b=b|0;da(278,a|0,b|0)}function jg(a,b){a=a|0;b=b|0;da(279,a|0,b|0)}function kg(a,b){a=a|0;b=b|0;da(280,a|0,b|0)}function lg(a,b){a=a|0;b=b|0;da(281,a|0,b|0)}function mg(a,b){a=a|0;b=b|0;da(282,a|0,b|0)}function ng(a,b){a=a|0;b=b|0;da(283,a|0,b|0)}function og(a,b){a=a|0;b=b|0;da(284,a|0,b|0)}function pg(a,b){a=a|0;b=b|0;da(285,a|0,b|0)}function qg(a,b){a=a|0;b=b|0;da(286,a|0,b|0)}function rg(a,b){a=a|0;b=b|0;da(287,a|0,b|0)}function sg(a,b){a=a|0;b=b|0;da(288,a|0,b|0)}function tg(a,b){a=a|0;b=b|0;da(289,a|0,b|0)}function ug(a,b){a=a|0;b=b|0;da(290,a|0,b|0)}function vg(a,b){a=a|0;b=b|0;da(291,a|0,b|0)}function wg(a,b){a=a|0;b=b|0;da(292,a|0,b|0)}function xg(a,b){a=a|0;b=b|0;da(293,a|0,b|0)}function yg(a,b){a=a|0;b=b|0;da(294,a|0,b|0)}function zg(a,b){a=a|0;b=b|0;da(295,a|0,b|0)}function Ag(a,b){a=a|0;b=b|0;da(296,a|0,b|0)}function Bg(a,b){a=a|0;b=b|0;da(297,a|0,b|0)}function Cg(a,b){a=a|0;b=b|0;da(298,a|0,b|0)}function Dg(a,b){a=a|0;b=b|0;da(299,a|0,b|0)}function Eg(a,b){a=a|0;b=b|0;da(300,a|0,b|0)}function Fg(a,b){a=a|0;b=b|0;da(301,a|0,b|0)}function Gg(a,b){a=a|0;b=b|0;da(302,a|0,b|0)}function Hg(a,b){a=a|0;b=b|0;da(303,a|0,b|0)}function Ig(a,b){a=a|0;b=b|0;da(304,a|0,b|0)}function Jg(a,b){a=a|0;b=b|0;da(305,a|0,b|0)}function Kg(a,b){a=a|0;b=b|0;da(306,a|0,b|0)}function Lg(a,b){a=a|0;b=b|0;da(307,a|0,b|0)}function Mg(a,b){a=a|0;b=b|0;da(308,a|0,b|0)}function Ng(a,b){a=a|0;b=b|0;da(309,a|0,b|0)}function Og(a,b){a=a|0;b=b|0;da(310,a|0,b|0)}function Pg(a,b){a=a|0;b=b|0;da(311,a|0,b|0)}function Qg(a,b){a=a|0;b=b|0;da(312,a|0,b|0)}function Rg(a,b){a=a|0;b=b|0;da(313,a|0,b|0)}function Sg(a,b){a=a|0;b=b|0;da(314,a|0,b|0)}function Tg(a,b){a=a|0;b=b|0;da(315,a|0,b|0)}function Ug(a,b){a=a|0;b=b|0;da(316,a|0,b|0)}function Vg(a,b){a=a|0;b=b|0;da(317,a|0,b|0)}function Wg(a,b){a=a|0;b=b|0;da(318,a|0,b|0)}function Xg(a,b){a=a|0;b=b|0;da(319,a|0,b|0)}function Yg(a,b){a=a|0;b=b|0;da(320,a|0,b|0)}function Zg(a,b){a=a|0;b=b|0;da(321,a|0,b|0)}function _g(a,b){a=a|0;b=b|0;da(322,a|0,b|0)}function $g(a,b){a=a|0;b=b|0;da(323,a|0,b|0)}function ah(a,b){a=a|0;b=b|0;da(324,a|0,b|0)}function bh(a,b){a=a|0;b=b|0;da(325,a|0,b|0)}function ch(a,b){a=a|0;b=b|0;da(326,a|0,b|0)}function dh(a,b){a=a|0;b=b|0;da(327,a|0,b|0)}function eh(a,b){a=a|0;b=b|0;da(328,a|0,b|0)}function fh(a,b){a=a|0;b=b|0;da(329,a|0,b|0)}function gh(a,b){a=a|0;b=b|0;da(330,a|0,b|0)}function hh(a,b){a=a|0;b=b|0;da(331,a|0,b|0)}function ih(a,b){a=a|0;b=b|0;da(332,a|0,b|0)}function jh(a,b){a=a|0;b=b|0;da(333,a|0,b|0)}function kh(a,b){a=a|0;b=b|0;da(334,a|0,b|0)}function lh(a,b){a=a|0;b=b|0;da(335,a|0,b|0)}function mh(a,b){a=a|0;b=b|0;da(336,a|0,b|0)}function nh(a,b){a=a|0;b=b|0;da(337,a|0,b|0)}function oh(a,b){a=a|0;b=b|0;da(338,a|0,b|0)}function ph(a,b){a=a|0;b=b|0;da(339,a|0,b|0)}function qh(a,b){a=a|0;b=b|0;da(340,a|0,b|0)}function rh(a,b){a=a|0;b=b|0;da(341,a|0,b|0)}function sh(a,b){a=a|0;b=b|0;da(342,a|0,b|0)}function th(a,b){a=a|0;b=b|0;da(343,a|0,b|0)}function uh(a,b){a=a|0;b=b|0;da(344,a|0,b|0)}function vh(a,b){a=a|0;b=b|0;da(345,a|0,b|0)}function wh(a,b){a=a|0;b=b|0;da(346,a|0,b|0)}function xh(a,b){a=a|0;b=b|0;da(347,a|0,b|0)}function yh(a,b){a=a|0;b=b|0;da(348,a|0,b|0)}function zh(a,b){a=a|0;b=b|0;da(349,a|0,b|0)}function Ah(a,b){a=a|0;b=b|0;da(350,a|0,b|0)}function Bh(a,b){a=a|0;b=b|0;da(351,a|0,b|0)}function Ch(a,b){a=a|0;b=b|0;da(352,a|0,b|0)}function Dh(a,b){a=a|0;b=b|0;da(353,a|0,b|0)}function Eh(a,b){a=a|0;b=b|0;da(354,a|0,b|0)}function Fh(a,b){a=a|0;b=b|0;da(355,a|0,b|0)}function Gh(a,b){a=a|0;b=b|0;da(356,a|0,b|0)}function Hh(a,b){a=a|0;b=b|0;da(357,a|0,b|0)}function Ih(a,b){a=a|0;b=b|0;da(358,a|0,b|0)}function Jh(a,b){a=a|0;b=b|0;da(359,a|0,b|0)}function Kh(a,b){a=a|0;b=b|0;da(360,a|0,b|0)}function Lh(a,b){a=a|0;b=b|0;da(361,a|0,b|0)}function Mh(a,b){a=a|0;b=b|0;da(362,a|0,b|0)}function Nh(a,b){a=a|0;b=b|0;da(363,a|0,b|0)}function Oh(a,b){a=a|0;b=b|0;da(364,a|0,b|0)}function Ph(a,b){a=a|0;b=b|0;da(365,a|0,b|0)}function Qh(a,b){a=a|0;b=b|0;da(366,a|0,b|0)}function Rh(a,b){a=a|0;b=b|0;da(367,a|0,b|0)}function Sh(a,b){a=a|0;b=b|0;da(368,a|0,b|0)}function Th(a,b){a=a|0;b=b|0;da(369,a|0,b|0)}function Uh(a,b){a=a|0;b=b|0;da(370,a|0,b|0)}function Vh(a,b){a=a|0;b=b|0;da(371,a|0,b|0)}function Wh(a,b){a=a|0;b=b|0;da(372,a|0,b|0)}function Xh(a,b){a=a|0;b=b|0;da(373,a|0,b|0)}function Yh(a,b){a=a|0;b=b|0;da(374,a|0,b|0)}function Zh(a,b){a=a|0;b=b|0;da(375,a|0,b|0)}function _h(a,b){a=a|0;b=b|0;da(376,a|0,b|0)}function $h(a,b){a=a|0;b=b|0;da(377,a|0,b|0)}function ai(a,b){a=a|0;b=b|0;da(378,a|0,b|0)}function bi(a,b){a=a|0;b=b|0;da(379,a|0,b|0)}function ci(a,b){a=a|0;b=b|0;da(380,a|0,b|0)}function di(a,b){a=a|0;b=b|0;da(381,a|0,b|0)}function ei(a,b){a=a|0;b=b|0;da(382,a|0,b|0)}function fi(a,b){a=a|0;b=b|0;da(383,a|0,b|0)}function gi(a,b){a=a|0;b=b|0;da(384,a|0,b|0)}function hi(a,b){a=a|0;b=b|0;da(385,a|0,b|0)}function ii(a,b){a=a|0;b=b|0;da(386,a|0,b|0)}function ji(a,b){a=a|0;b=b|0;da(387,a|0,b|0)}function ki(a,b){a=a|0;b=b|0;da(388,a|0,b|0)}function li(a,b){a=a|0;b=b|0;da(389,a|0,b|0)}function mi(a,b){a=a|0;b=b|0;da(390,a|0,b|0)}function ni(a,b){a=a|0;b=b|0;da(391,a|0,b|0)}function oi(a,b){a=a|0;b=b|0;da(392,a|0,b|0)}function pi(a,b){a=a|0;b=b|0;da(393,a|0,b|0)}function qi(a,b){a=a|0;b=b|0;da(394,a|0,b|0)}function ri(a,b){a=a|0;b=b|0;da(395,a|0,b|0)}function si(a,b){a=a|0;b=b|0;da(396,a|0,b|0)}function ti(a,b){a=a|0;b=b|0;da(397,a|0,b|0)}function ui(a,b){a=a|0;b=b|0;da(398,a|0,b|0)}function vi(a,b){a=a|0;b=b|0;da(399,a|0,b|0)}function wi(a,b){a=a|0;b=b|0;da(400,a|0,b|0)}function xi(a,b){a=a|0;b=b|0;da(401,a|0,b|0)}function yi(a,b){a=a|0;b=b|0;da(402,a|0,b|0)}function zi(a,b){a=a|0;b=b|0;da(403,a|0,b|0)}function Ai(a,b){a=a|0;b=b|0;da(404,a|0,b|0)}function Bi(a,b){a=a|0;b=b|0;da(405,a|0,b|0)}function Ci(a,b){a=a|0;b=b|0;da(406,a|0,b|0)}function Di(a,b){a=a|0;b=b|0;da(407,a|0,b|0)}function Ei(a,b){a=a|0;b=b|0;da(408,a|0,b|0)}function Fi(a,b){a=a|0;b=b|0;da(409,a|0,b|0)}function Gi(a,b){a=a|0;b=b|0;da(410,a|0,b|0)}function Hi(a,b){a=a|0;b=b|0;da(411,a|0,b|0)}function Ii(a,b){a=a|0;b=b|0;da(412,a|0,b|0)}function Ji(a,b){a=a|0;b=b|0;da(413,a|0,b|0)}function Ki(a,b){a=a|0;b=b|0;da(414,a|0,b|0)}function Li(a,b){a=a|0;b=b|0;da(415,a|0,b|0)}function Mi(a,b){a=a|0;b=b|0;da(416,a|0,b|0)}function Ni(a,b){a=a|0;b=b|0;da(417,a|0,b|0)}function Oi(a,b){a=a|0;b=b|0;da(418,a|0,b|0)}function Pi(a,b){a=a|0;b=b|0;da(419,a|0,b|0)}function Qi(a,b){a=a|0;b=b|0;da(420,a|0,b|0)}function Ri(a,b){a=a|0;b=b|0;da(421,a|0,b|0)}function Si(a,b){a=a|0;b=b|0;da(422,a|0,b|0)}function Ti(a,b){a=a|0;b=b|0;da(423,a|0,b|0)}function Ui(a,b){a=a|0;b=b|0;da(424,a|0,b|0)}function Vi(a,b){a=a|0;b=b|0;da(425,a|0,b|0)}function Wi(a,b){a=a|0;b=b|0;da(426,a|0,b|0)}function Xi(a,b){a=a|0;b=b|0;da(427,a|0,b|0)}function Yi(a,b){a=a|0;b=b|0;da(428,a|0,b|0)}function Zi(a,b){a=a|0;b=b|0;da(429,a|0,b|0)}function _i(a,b){a=a|0;b=b|0;da(430,a|0,b|0)}function $i(a,b){a=a|0;b=b|0;da(431,a|0,b|0)}function aj(a,b){a=a|0;b=b|0;da(432,a|0,b|0)}function bj(a,b){a=a|0;b=b|0;da(433,a|0,b|0)}function cj(a,b){a=a|0;b=b|0;da(434,a|0,b|0)}function dj(a,b){a=a|0;b=b|0;da(435,a|0,b|0)}function ej(a,b){a=a|0;b=b|0;da(436,a|0,b|0)}function fj(a,b){a=a|0;b=b|0;da(437,a|0,b|0)}function gj(a,b){a=a|0;b=b|0;da(438,a|0,b|0)}function hj(a,b){a=a|0;b=b|0;da(439,a|0,b|0)}function ij(a,b){a=a|0;b=b|0;da(440,a|0,b|0)}function jj(a,b){a=a|0;b=b|0;da(441,a|0,b|0)}function kj(a,b){a=a|0;b=b|0;da(442,a|0,b|0)}function lj(a,b){a=a|0;b=b|0;da(443,a|0,b|0)}function mj(a,b){a=a|0;b=b|0;da(444,a|0,b|0)}function nj(a,b){a=a|0;b=b|0;da(445,a|0,b|0)}function oj(a,b){a=a|0;b=b|0;da(446,a|0,b|0)}function pj(a,b){a=a|0;b=b|0;da(447,a|0,b|0)}function qj(a,b){a=a|0;b=b|0;da(448,a|0,b|0)}function rj(a,b){a=a|0;b=b|0;da(449,a|0,b|0)}function sj(a,b){a=a|0;b=b|0;da(450,a|0,b|0)}function tj(a,b){a=a|0;b=b|0;da(451,a|0,b|0)}function uj(a,b){a=a|0;b=b|0;da(452,a|0,b|0)}function vj(a,b){a=a|0;b=b|0;da(453,a|0,b|0)}function wj(a,b){a=a|0;b=b|0;da(454,a|0,b|0)}function xj(a,b){a=a|0;b=b|0;da(455,a|0,b|0)}function yj(a,b){a=a|0;b=b|0;da(456,a|0,b|0)}function zj(a,b){a=a|0;b=b|0;da(457,a|0,b|0)}function Aj(a,b){a=a|0;b=b|0;da(458,a|0,b|0)}function Bj(a,b){a=a|0;b=b|0;da(459,a|0,b|0)}function Cj(a,b){a=a|0;b=b|0;da(460,a|0,b|0)}function Dj(a,b){a=a|0;b=b|0;da(461,a|0,b|0)}function Ej(a,b){a=a|0;b=b|0;da(462,a|0,b|0)}function Fj(a,b){a=a|0;b=b|0;da(463,a|0,b|0)}function Gj(a,b){a=a|0;b=b|0;da(464,a|0,b|0)}function Hj(a,b){a=a|0;b=b|0;da(465,a|0,b|0)}function Ij(a,b){a=a|0;b=b|0;da(466,a|0,b|0)}function Jj(a,b){a=a|0;b=b|0;da(467,a|0,b|0)}function Kj(a,b){a=a|0;b=b|0;da(468,a|0,b|0)}function Lj(a,b){a=a|0;b=b|0;da(469,a|0,b|0)}function Mj(a,b){a=a|0;b=b|0;da(470,a|0,b|0)}function Nj(a,b){a=a|0;b=b|0;da(471,a|0,b|0)}function Oj(a,b){a=a|0;b=b|0;da(472,a|0,b|0)}function Pj(a,b){a=a|0;b=b|0;da(473,a|0,b|0)}function Qj(a,b){a=a|0;b=b|0;da(474,a|0,b|0)}function Rj(a,b){a=a|0;b=b|0;da(475,a|0,b|0)}function Sj(a,b){a=a|0;b=b|0;da(476,a|0,b|0)}function Tj(a,b){a=a|0;b=b|0;da(477,a|0,b|0)}function Uj(a,b){a=a|0;b=b|0;da(478,a|0,b|0)}function Vj(a,b){a=a|0;b=b|0;da(479,a|0,b|0)}function Wj(a,b){a=a|0;b=b|0;da(480,a|0,b|0)}function Xj(a,b){a=a|0;b=b|0;da(481,a|0,b|0)}function Yj(a,b){a=a|0;b=b|0;da(482,a|0,b|0)}function Zj(a,b){a=a|0;b=b|0;da(483,a|0,b|0)}function _j(a,b){a=a|0;b=b|0;da(484,a|0,b|0)}function $j(a,b){a=a|0;b=b|0;da(485,a|0,b|0)}function ak(a,b){a=a|0;b=b|0;da(486,a|0,b|0)}function bk(a,b){a=a|0;b=b|0;da(487,a|0,b|0)}function ck(a,b){a=a|0;b=b|0;da(488,a|0,b|0)}function dk(a,b){a=a|0;b=b|0;da(489,a|0,b|0)}function ek(a,b){a=a|0;b=b|0;da(490,a|0,b|0)}function fk(a,b){a=a|0;b=b|0;da(491,a|0,b|0)}function gk(a,b){a=a|0;b=b|0;da(492,a|0,b|0)}function hk(a,b){a=a|0;b=b|0;da(493,a|0,b|0)}function ik(a,b){a=a|0;b=b|0;da(494,a|0,b|0)}function jk(a,b){a=a|0;b=b|0;da(495,a|0,b|0)}function kk(a,b){a=a|0;b=b|0;da(496,a|0,b|0)}function lk(a,b){a=a|0;b=b|0;da(497,a|0,b|0)}function mk(a,b){a=a|0;b=b|0;da(498,a|0,b|0)}function nk(a,b){a=a|0;b=b|0;da(499,a|0,b|0)}function ok(a,b){a=a|0;b=b|0;da(500,a|0,b|0)}function pk(a,b){a=a|0;b=b|0;da(501,a|0,b|0)}function qk(a,b){a=a|0;b=b|0;da(502,a|0,b|0)}function rk(a,b){a=a|0;b=b|0;da(503,a|0,b|0)}function sk(a,b){a=a|0;b=b|0;da(504,a|0,b|0)}function tk(a,b){a=a|0;b=b|0;da(505,a|0,b|0)}function uk(a,b){a=a|0;b=b|0;da(506,a|0,b|0)}function vk(a,b){a=a|0;b=b|0;da(507,a|0,b|0)}function wk(a,b){a=a|0;b=b|0;da(508,a|0,b|0)}function xk(a,b){a=a|0;b=b|0;da(509,a|0,b|0)}function yk(a,b){a=a|0;b=b|0;da(510,a|0,b|0)}function zk(a,b){a=a|0;b=b|0;da(511,a|0,b|0)}function Ak(a,b){a=a|0;b=b|0;da(512,a|0,b|0)}function Bk(a,b){a=a|0;b=b|0;da(513,a|0,b|0)}function Ck(a,b){a=a|0;b=b|0;da(514,a|0,b|0)}function Dk(a,b){a=a|0;b=b|0;da(515,a|0,b|0)}function Ek(a,b){a=a|0;b=b|0;da(516,a|0,b|0)}function Fk(a,b){a=a|0;b=b|0;da(517,a|0,b|0)}function Gk(a,b){a=a|0;b=b|0;da(518,a|0,b|0)}function Hk(a,b){a=a|0;b=b|0;da(519,a|0,b|0)}function Ik(a,b){a=a|0;b=b|0;da(520,a|0,b|0)}function Jk(a,b){a=a|0;b=b|0;da(521,a|0,b|0)}function Kk(a,b){a=a|0;b=b|0;da(522,a|0,b|0)}function Lk(a,b){a=a|0;b=b|0;da(523,a|0,b|0)}function Mk(a,b){a=a|0;b=b|0;da(524,a|0,b|0)}function Nk(a,b){a=a|0;b=b|0;da(525,a|0,b|0)}function Ok(a,b){a=a|0;b=b|0;da(526,a|0,b|0)}function Pk(a,b){a=a|0;b=b|0;da(527,a|0,b|0)}function Qk(a,b){a=a|0;b=b|0;da(528,a|0,b|0)}function Rk(a,b){a=a|0;b=b|0;da(529,a|0,b|0)}function Sk(a,b){a=a|0;b=b|0;da(530,a|0,b|0)}function Tk(a,b){a=a|0;b=b|0;da(531,a|0,b|0)}function Uk(a,b){a=a|0;b=b|0;da(532,a|0,b|0)}function Vk(a,b){a=a|0;b=b|0;da(533,a|0,b|0)}function Wk(a,b){a=a|0;b=b|0;da(534,a|0,b|0)}function Xk(a,b){a=a|0;b=b|0;da(535,a|0,b|0)}function Yk(a,b){a=a|0;b=b|0;da(536,a|0,b|0)}function Zk(a,b){a=a|0;b=b|0;da(537,a|0,b|0)}function _k(a,b){a=a|0;b=b|0;da(538,a|0,b|0)}function $k(a,b){a=a|0;b=b|0;da(539,a|0,b|0)}function al(a,b){a=a|0;b=b|0;da(540,a|0,b|0)}function bl(a,b){a=a|0;b=b|0;da(541,a|0,b|0)}function cl(a,b){a=a|0;b=b|0;da(542,a|0,b|0)}function dl(a,b){a=a|0;b=b|0;da(543,a|0,b|0)}function el(a,b){a=a|0;b=b|0;da(544,a|0,b|0)}function fl(a,b){a=a|0;b=b|0;da(545,a|0,b|0)}function gl(a,b){a=a|0;b=b|0;da(546,a|0,b|0)}function hl(a,b){a=a|0;b=b|0;da(547,a|0,b|0)}function il(a,b){a=a|0;b=b|0;da(548,a|0,b|0)}function jl(a,b){a=a|0;b=b|0;da(549,a|0,b|0)}function kl(a,b){a=a|0;b=b|0;da(550,a|0,b|0)}function ll(a,b){a=a|0;b=b|0;da(551,a|0,b|0)}function ml(a,b){a=a|0;b=b|0;da(552,a|0,b|0)}function nl(a,b){a=a|0;b=b|0;da(553,a|0,b|0)}function ol(a,b){a=a|0;b=b|0;da(554,a|0,b|0)}function pl(a,b){a=a|0;b=b|0;da(555,a|0,b|0)}function ql(a,b){a=a|0;b=b|0;da(556,a|0,b|0)}function rl(a,b){a=a|0;b=b|0;da(557,a|0,b|0)}function sl(a,b){a=a|0;b=b|0;da(558,a|0,b|0)}function tl(a,b){a=a|0;b=b|0;da(559,a|0,b|0)}function ul(a,b){a=a|0;b=b|0;da(560,a|0,b|0)}function vl(a,b){a=a|0;b=b|0;da(561,a|0,b|0)}function wl(a,b){a=a|0;b=b|0;da(562,a|0,b|0)}function xl(a,b){a=a|0;b=b|0;da(563,a|0,b|0)}function yl(a,b){a=a|0;b=b|0;da(564,a|0,b|0)}function zl(a,b){a=a|0;b=b|0;da(565,a|0,b|0)}function Al(a,b){a=a|0;b=b|0;da(566,a|0,b|0)}function Bl(a,b){a=a|0;b=b|0;da(567,a|0,b|0)}function Cl(a,b){a=a|0;b=b|0;da(568,a|0,b|0)}function Dl(a,b){a=a|0;b=b|0;da(569,a|0,b|0)}function El(a,b){a=a|0;b=b|0;da(570,a|0,b|0)}function Fl(a,b){a=a|0;b=b|0;da(571,a|0,b|0)}function Gl(a,b){a=a|0;b=b|0;da(572,a|0,b|0)}function Hl(a,b){a=a|0;b=b|0;da(573,a|0,b|0)}function Il(a,b){a=a|0;b=b|0;da(574,a|0,b|0)}function Jl(a,b){a=a|0;b=b|0;da(575,a|0,b|0)}function Kl(a,b){a=a|0;b=b|0;da(576,a|0,b|0)}function Ll(a,b){a=a|0;b=b|0;da(577,a|0,b|0)}function Ml(a,b){a=a|0;b=b|0;da(578,a|0,b|0)}function Nl(a,b){a=a|0;b=b|0;da(579,a|0,b|0)}function Ol(a,b){a=a|0;b=b|0;da(580,a|0,b|0)}function Pl(a,b){a=a|0;b=b|0;da(581,a|0,b|0)}function Ql(a,b){a=a|0;b=b|0;da(582,a|0,b|0)}function Rl(a,b){a=a|0;b=b|0;da(583,a|0,b|0)}function Sl(a,b){a=a|0;b=b|0;da(584,a|0,b|0)}function Tl(a,b){a=a|0;b=b|0;da(585,a|0,b|0)}function Ul(a,b){a=a|0;b=b|0;da(586,a|0,b|0)}function Vl(a,b){a=a|0;b=b|0;da(587,a|0,b|0)}function Wl(a,b){a=a|0;b=b|0;da(588,a|0,b|0)}function Xl(a,b){a=a|0;b=b|0;da(589,a|0,b|0)}function Yl(a,b){a=a|0;b=b|0;da(590,a|0,b|0)}function Zl(a,b){a=a|0;b=b|0;da(591,a|0,b|0)}function _l(a,b){a=a|0;b=b|0;da(592,a|0,b|0)}function $l(a,b){a=a|0;b=b|0;da(593,a|0,b|0)}function am(a,b){a=a|0;b=b|0;da(594,a|0,b|0)}function bm(a,b){a=a|0;b=b|0;da(595,a|0,b|0)}function cm(a,b){a=a|0;b=b|0;da(596,a|0,b|0)}function dm(a,b){a=a|0;b=b|0;da(597,a|0,b|0)}function em(a,b){a=a|0;b=b|0;da(598,a|0,b|0)}function fm(a,b){a=a|0;b=b|0;da(599,a|0,b|0)}function gm(a,b){a=a|0;b=b|0;da(600,a|0,b|0)}function hm(a,b){a=a|0;b=b|0;da(601,a|0,b|0)}function im(a,b){a=a|0;b=b|0;da(602,a|0,b|0)}function jm(a,b){a=a|0;b=b|0;da(603,a|0,b|0)}function km(a,b){a=a|0;b=b|0;da(604,a|0,b|0)}function lm(a,b){a=a|0;b=b|0;da(605,a|0,b|0)}function mm(a,b){a=a|0;b=b|0;da(606,a|0,b|0)}function nm(a,b){a=a|0;b=b|0;da(607,a|0,b|0)}function om(a,b){a=a|0;b=b|0;da(608,a|0,b|0)}function pm(a,b){a=a|0;b=b|0;da(609,a|0,b|0)}function qm(a,b){a=a|0;b=b|0;da(610,a|0,b|0)}function rm(a,b){a=a|0;b=b|0;da(611,a|0,b|0)}function sm(a,b){a=a|0;b=b|0;da(612,a|0,b|0)}function tm(a,b){a=a|0;b=b|0;da(613,a|0,b|0)}function um(a,b){a=a|0;b=b|0;da(614,a|0,b|0)}function vm(a,b){a=a|0;b=b|0;da(615,a|0,b|0)}function wm(a,b){a=a|0;b=b|0;da(616,a|0,b|0)}function xm(a,b){a=a|0;b=b|0;da(617,a|0,b|0)}function ym(a,b){a=a|0;b=b|0;da(618,a|0,b|0)}function zm(a,b){a=a|0;b=b|0;da(619,a|0,b|0)}function Am(a,b){a=a|0;b=b|0;da(620,a|0,b|0)}function Bm(a,b){a=a|0;b=b|0;da(621,a|0,b|0)}function Cm(a,b){a=a|0;b=b|0;da(622,a|0,b|0)}function Dm(a,b){a=a|0;b=b|0;da(623,a|0,b|0)}function Em(a,b){a=a|0;b=b|0;da(624,a|0,b|0)}function Fm(a,b){a=a|0;b=b|0;da(625,a|0,b|0)}function Gm(a,b){a=a|0;b=b|0;da(626,a|0,b|0)}function Hm(a,b){a=a|0;b=b|0;da(627,a|0,b|0)}function Im(a,b){a=a|0;b=b|0;da(628,a|0,b|0)}function Jm(a,b){a=a|0;b=b|0;da(629,a|0,b|0)}function Km(a,b){a=a|0;b=b|0;da(630,a|0,b|0)}function Lm(a,b){a=a|0;b=b|0;da(631,a|0,b|0)}function Mm(a,b){a=a|0;b=b|0;da(632,a|0,b|0)}function Nm(a,b){a=a|0;b=b|0;da(633,a|0,b|0)}function Om(a,b){a=a|0;b=b|0;da(634,a|0,b|0)}function Pm(a,b){a=a|0;b=b|0;da(635,a|0,b|0)}function Qm(a,b){a=a|0;b=b|0;da(636,a|0,b|0)}function Rm(a,b){a=a|0;b=b|0;da(637,a|0,b|0)}function Sm(a,b){a=a|0;b=b|0;da(638,a|0,b|0)}function Tm(a,b){a=a|0;b=b|0;da(639,a|0,b|0)}function Um(a,b){a=a|0;b=b|0;da(640,a|0,b|0)}function Vm(a,b){a=a|0;b=b|0;da(641,a|0,b|0)}function Wm(a,b){a=a|0;b=b|0;da(642,a|0,b|0)}function Xm(a,b){a=a|0;b=b|0;da(643,a|0,b|0)}function Ym(a,b){a=a|0;b=b|0;da(644,a|0,b|0)}function Zm(a,b){a=a|0;b=b|0;da(645,a|0,b|0)}function _m(a,b){a=a|0;b=b|0;da(646,a|0,b|0)}function $m(a,b){a=a|0;b=b|0;da(647,a|0,b|0)}function an(a,b){a=a|0;b=b|0;da(648,a|0,b|0)}function bn(a,b){a=a|0;b=b|0;da(649,a|0,b|0)}function cn(a,b){a=a|0;b=b|0;da(650,a|0,b|0)}function dn(a,b){a=a|0;b=b|0;da(651,a|0,b|0)}function en(a,b){a=a|0;b=b|0;da(652,a|0,b|0)}function fn(a,b){a=a|0;b=b|0;da(653,a|0,b|0)}function gn(a,b){a=a|0;b=b|0;da(654,a|0,b|0)}function hn(a,b){a=a|0;b=b|0;da(655,a|0,b|0)}function jn(a,b){a=a|0;b=b|0;da(656,a|0,b|0)}function kn(a,b){a=a|0;b=b|0;da(657,a|0,b|0)}function ln(a,b){a=a|0;b=b|0;da(658,a|0,b|0)}function mn(a,b){a=a|0;b=b|0;da(659,a|0,b|0)}function nn(a,b){a=a|0;b=b|0;da(660,a|0,b|0)}function on(a,b){a=a|0;b=b|0;da(661,a|0,b|0)}function pn(a,b){a=a|0;b=b|0;da(662,a|0,b|0)}function qn(a,b){a=a|0;b=b|0;da(663,a|0,b|0)}function rn(a,b){a=a|0;b=b|0;da(664,a|0,b|0)}function sn(a,b){a=a|0;b=b|0;da(665,a|0,b|0)}function tn(a,b){a=a|0;b=b|0;da(666,a|0,b|0)}function un(a,b){a=a|0;b=b|0;da(667,a|0,b|0)}function vn(a,b){a=a|0;b=b|0;da(668,a|0,b|0)}function wn(a,b){a=a|0;b=b|0;da(669,a|0,b|0)}function xn(a,b){a=a|0;b=b|0;da(670,a|0,b|0)}function yn(a,b){a=a|0;b=b|0;da(671,a|0,b|0)}function zn(a,b){a=a|0;b=b|0;da(672,a|0,b|0)}function An(a,b){a=a|0;b=b|0;da(673,a|0,b|0)}function Bn(a,b){a=a|0;b=b|0;da(674,a|0,b|0)}function Cn(a,b){a=a|0;b=b|0;da(675,a|0,b|0)}function Dn(a,b){a=a|0;b=b|0;da(676,a|0,b|0)}function En(a,b){a=a|0;b=b|0;da(677,a|0,b|0)}function Fn(a,b){a=a|0;b=b|0;da(678,a|0,b|0)}function Gn(a,b){a=a|0;b=b|0;da(679,a|0,b|0)}function Hn(a,b){a=a|0;b=b|0;da(680,a|0,b|0)}function In(a,b){a=a|0;b=b|0;da(681,a|0,b|0)}function Jn(a,b){a=a|0;b=b|0;da(682,a|0,b|0)}function Kn(a,b){a=a|0;b=b|0;da(683,a|0,b|0)}function Ln(a,b){a=a|0;b=b|0;da(684,a|0,b|0)}function Mn(a,b){a=a|0;b=b|0;da(685,a|0,b|0)}function Nn(a,b){a=a|0;b=b|0;da(686,a|0,b|0)}function On(a,b){a=a|0;b=b|0;da(687,a|0,b|0)}function Pn(a,b){a=a|0;b=b|0;da(688,a|0,b|0)}function Qn(a,b){a=a|0;b=b|0;da(689,a|0,b|0)}function Rn(a,b){a=a|0;b=b|0;da(690,a|0,b|0)}function Sn(a,b){a=a|0;b=b|0;da(691,a|0,b|0)}function Tn(a,b){a=a|0;b=b|0;da(692,a|0,b|0)}function Un(a,b){a=a|0;b=b|0;da(693,a|0,b|0)}function Vn(a,b){a=a|0;b=b|0;da(694,a|0,b|0)}function Wn(a,b){a=a|0;b=b|0;da(695,a|0,b|0)}function Xn(a,b){a=a|0;b=b|0;da(696,a|0,b|0)}function Yn(a,b){a=a|0;b=b|0;da(697,a|0,b|0)}function Zn(a,b){a=a|0;b=b|0;da(698,a|0,b|0)}function _n(a,b){a=a|0;b=b|0;da(699,a|0,b|0)}function $n(a,b){a=a|0;b=b|0;da(700,a|0,b|0)}function ao(a,b){a=a|0;b=b|0;da(701,a|0,b|0)}function bo(a,b){a=a|0;b=b|0;da(702,a|0,b|0)}function co(a,b){a=a|0;b=b|0;da(703,a|0,b|0)}function eo(a,b){a=a|0;b=b|0;da(704,a|0,b|0)}function fo(a,b){a=a|0;b=b|0;da(705,a|0,b|0)}function go(a,b){a=a|0;b=b|0;da(706,a|0,b|0)}function ho(a,b){a=a|0;b=b|0;da(707,a|0,b|0)}function io(a,b){a=a|0;b=b|0;da(708,a|0,b|0)}function jo(a,b){a=a|0;b=b|0;da(709,a|0,b|0)}function ko(a,b){a=a|0;b=b|0;da(710,a|0,b|0)}function lo(a,b){a=a|0;b=b|0;da(711,a|0,b|0)}function mo(a,b){a=a|0;b=b|0;da(712,a|0,b|0)}function no(a,b){a=a|0;b=b|0;da(713,a|0,b|0)}function oo(a,b){a=a|0;b=b|0;da(714,a|0,b|0)}function po(a,b){a=a|0;b=b|0;da(715,a|0,b|0)}function qo(a,b){a=a|0;b=b|0;da(716,a|0,b|0)}function ro(a,b){a=a|0;b=b|0;da(717,a|0,b|0)}function so(a,b){a=a|0;b=b|0;da(718,a|0,b|0)}function to(a,b){a=a|0;b=b|0;da(719,a|0,b|0)}function uo(a,b){a=a|0;b=b|0;da(720,a|0,b|0)}function vo(a,b){a=a|0;b=b|0;da(721,a|0,b|0)}function wo(a,b){a=a|0;b=b|0;da(722,a|0,b|0)}function xo(a,b){a=a|0;b=b|0;da(723,a|0,b|0)}function yo(a,b){a=a|0;b=b|0;da(724,a|0,b|0)}function zo(a,b){a=a|0;b=b|0;da(725,a|0,b|0)}function Ao(a,b){a=a|0;b=b|0;da(726,a|0,b|0)}function Bo(a,b){a=a|0;b=b|0;da(727,a|0,b|0)}function Co(a,b){a=a|0;b=b|0;da(728,a|0,b|0)}function Do(a,b){a=a|0;b=b|0;da(729,a|0,b|0)}function Eo(a,b){a=a|0;b=b|0;da(730,a|0,b|0)}function Fo(a,b){a=a|0;b=b|0;da(731,a|0,b|0)}function Go(a,b){a=a|0;b=b|0;da(732,a|0,b|0)}function Ho(a,b){a=a|0;b=b|0;da(733,a|0,b|0)}function Io(a,b){a=a|0;b=b|0;da(734,a|0,b|0)}function Jo(a,b){a=a|0;b=b|0;da(735,a|0,b|0)}function Ko(a,b){a=a|0;b=b|0;da(736,a|0,b|0)}function Lo(a,b){a=a|0;b=b|0;da(737,a|0,b|0)}function Mo(a,b){a=a|0;b=b|0;da(738,a|0,b|0)}function No(a,b){a=a|0;b=b|0;da(739,a|0,b|0)}function Oo(a,b){a=a|0;b=b|0;da(740,a|0,b|0)}function Po(a,b){a=a|0;b=b|0;da(741,a|0,b|0)}function Qo(a,b){a=a|0;b=b|0;da(742,a|0,b|0)}function Ro(a,b){a=a|0;b=b|0;da(743,a|0,b|0)}function So(a,b){a=a|0;b=b|0;da(744,a|0,b|0)}function To(a,b){a=a|0;b=b|0;da(745,a|0,b|0)}function Uo(a,b){a=a|0;b=b|0;da(746,a|0,b|0)}function Vo(a,b){a=a|0;b=b|0;da(747,a|0,b|0)}function Wo(a,b){a=a|0;b=b|0;da(748,a|0,b|0)}function Xo(a,b){a=a|0;b=b|0;da(749,a|0,b|0)}function Yo(a,b){a=a|0;b=b|0;da(750,a|0,b|0)}function Zo(a,b){a=a|0;b=b|0;da(751,a|0,b|0)}function _o(a,b){a=a|0;b=b|0;da(752,a|0,b|0)}function $o(a,b){a=a|0;b=b|0;da(753,a|0,b|0)}function ap(a,b){a=a|0;b=b|0;da(754,a|0,b|0)}function bp(a,b){a=a|0;b=b|0;da(755,a|0,b|0)}function cp(a,b){a=a|0;b=b|0;da(756,a|0,b|0)}function dp(a,b){a=a|0;b=b|0;da(757,a|0,b|0)}function ep(a,b){a=a|0;b=b|0;da(758,a|0,b|0)}function fp(a,b){a=a|0;b=b|0;da(759,a|0,b|0)}function gp(a,b){a=a|0;b=b|0;da(760,a|0,b|0)}function hp(a,b){a=a|0;b=b|0;da(761,a|0,b|0)}function ip(a,b){a=a|0;b=b|0;da(762,a|0,b|0)}function jp(a,b){a=a|0;b=b|0;da(763,a|0,b|0)}function kp(a,b){a=a|0;b=b|0;da(764,a|0,b|0)}function lp(a,b){a=a|0;b=b|0;da(765,a|0,b|0)}function mp(a,b){a=a|0;b=b|0;da(766,a|0,b|0)}function np(a,b){a=a|0;b=b|0;da(767,a|0,b|0)}function op(a,b){a=a|0;b=b|0;da(768,a|0,b|0)}function pp(a,b){a=a|0;b=b|0;da(769,a|0,b|0)}function qp(a,b){a=a|0;b=b|0;da(770,a|0,b|0)}function rp(a,b){a=a|0;b=b|0;da(771,a|0,b|0)}function sp(a,b){a=a|0;b=b|0;da(772,a|0,b|0)}function tp(a,b){a=a|0;b=b|0;da(773,a|0,b|0)}function up(a,b){a=a|0;b=b|0;da(774,a|0,b|0)}function vp(a,b){a=a|0;b=b|0;da(775,a|0,b|0)}function wp(a,b){a=a|0;b=b|0;da(776,a|0,b|0)}function xp(a,b){a=a|0;b=b|0;da(777,a|0,b|0)}function yp(a,b){a=a|0;b=b|0;da(778,a|0,b|0)}function zp(a,b){a=a|0;b=b|0;da(779,a|0,b|0)}function Ap(a,b){a=a|0;b=b|0;da(780,a|0,b|0)}function Bp(a,b){a=a|0;b=b|0;da(781,a|0,b|0)}function Cp(a,b){a=a|0;b=b|0;da(782,a|0,b|0)}function Dp(a,b){a=a|0;b=b|0;da(783,a|0,b|0)}function Ep(a,b){a=a|0;b=b|0;da(784,a|0,b|0)}function Fp(a,b){a=a|0;b=b|0;da(785,a|0,b|0)}function Gp(a,b){a=a|0;b=b|0;da(786,a|0,b|0)}function Hp(a,b){a=a|0;b=b|0;da(787,a|0,b|0)}function Ip(a,b){a=a|0;b=b|0;da(788,a|0,b|0)}function Jp(a,b){a=a|0;b=b|0;da(789,a|0,b|0)}function Kp(a,b){a=a|0;b=b|0;da(790,a|0,b|0)}function Lp(a,b){a=a|0;b=b|0;da(791,a|0,b|0)}function Mp(a,b){a=a|0;b=b|0;da(792,a|0,b|0)}function Np(a,b){a=a|0;b=b|0;da(793,a|0,b|0)}function Op(a,b){a=a|0;b=b|0;da(794,a|0,b|0)}function Pp(a,b){a=a|0;b=b|0;da(795,a|0,b|0)}function Qp(a,b){a=a|0;b=b|0;da(796,a|0,b|0)}function Rp(a,b){a=a|0;b=b|0;da(797,a|0,b|0)}function Sp(a,b){a=a|0;b=b|0;da(798,a|0,b|0)}function Tp(a,b){a=a|0;b=b|0;da(799,a|0,b|0)}function Up(a,b){a=a|0;b=b|0;da(800,a|0,b|0)}function Vp(a,b){a=a|0;b=b|0;da(801,a|0,b|0)}function Wp(a,b){a=a|0;b=b|0;da(802,a|0,b|0)}function Xp(a,b){a=a|0;b=b|0;da(803,a|0,b|0)}function Yp(a,b){a=a|0;b=b|0;da(804,a|0,b|0)}function Zp(a,b){a=a|0;b=b|0;da(805,a|0,b|0)}function _p(a,b){a=a|0;b=b|0;da(806,a|0,b|0)}function $p(a,b){a=a|0;b=b|0;da(807,a|0,b|0)}function aq(a,b){a=a|0;b=b|0;da(808,a|0,b|0)}function bq(a,b){a=a|0;b=b|0;da(809,a|0,b|0)}function cq(a,b){a=a|0;b=b|0;da(810,a|0,b|0)}function dq(a,b){a=a|0;b=b|0;da(811,a|0,b|0)}function eq(a,b){a=a|0;b=b|0;da(812,a|0,b|0)}function fq(a,b){a=a|0;b=b|0;da(813,a|0,b|0)}function gq(a,b){a=a|0;b=b|0;da(814,a|0,b|0)}function hq(a,b){a=a|0;b=b|0;da(815,a|0,b|0)}function iq(a,b){a=a|0;b=b|0;da(816,a|0,b|0)}function jq(a,b){a=a|0;b=b|0;da(817,a|0,b|0)}function kq(a,b){a=a|0;b=b|0;da(818,a|0,b|0)}function lq(a,b){a=a|0;b=b|0;da(819,a|0,b|0)}function mq(a,b){a=a|0;b=b|0;da(820,a|0,b|0)}function nq(a,b){a=a|0;b=b|0;da(821,a|0,b|0)}function oq(a,b){a=a|0;b=b|0;da(822,a|0,b|0)}function pq(a,b){a=a|0;b=b|0;da(823,a|0,b|0)}function qq(a,b){a=a|0;b=b|0;da(824,a|0,b|0)}function rq(a,b){a=a|0;b=b|0;da(825,a|0,b|0)}function sq(a,b){a=a|0;b=b|0;da(826,a|0,b|0)}function tq(a,b){a=a|0;b=b|0;da(827,a|0,b|0)}function uq(a,b){a=a|0;b=b|0;da(828,a|0,b|0)}function vq(a,b){a=a|0;b=b|0;da(829,a|0,b|0)}function wq(a,b){a=a|0;b=b|0;da(830,a|0,b|0)}function xq(a,b){a=a|0;b=b|0;da(831,a|0,b|0)}function yq(a,b){a=a|0;b=b|0;da(832,a|0,b|0)}function zq(a,b){a=a|0;b=b|0;da(833,a|0,b|0)}function Aq(a,b){a=a|0;b=b|0;da(834,a|0,b|0)}function Bq(a,b){a=a|0;b=b|0;da(835,a|0,b|0)}function Cq(a,b){a=a|0;b=b|0;da(836,a|0,b|0)}function Dq(a,b){a=a|0;b=b|0;da(837,a|0,b|0)}function Eq(a,b){a=a|0;b=b|0;da(838,a|0,b|0)}function Fq(a,b){a=a|0;b=b|0;da(839,a|0,b|0)}function Gq(a,b){a=a|0;b=b|0;da(840,a|0,b|0)}function Hq(a,b){a=a|0;b=b|0;da(841,a|0,b|0)}function Iq(a,b){a=a|0;b=b|0;da(842,a|0,b|0)}function Jq(a,b){a=a|0;b=b|0;da(843,a|0,b|0)}function Kq(a,b){a=a|0;b=b|0;da(844,a|0,b|0)}function Lq(a,b){a=a|0;b=b|0;da(845,a|0,b|0)}function Mq(a,b){a=a|0;b=b|0;da(846,a|0,b|0)}function Nq(a,b){a=a|0;b=b|0;da(847,a|0,b|0)}function Oq(a,b){a=a|0;b=b|0;da(848,a|0,b|0)}function Pq(a,b){a=a|0;b=b|0;da(849,a|0,b|0)}function Qq(a,b){a=a|0;b=b|0;da(850,a|0,b|0)}function Rq(a,b){a=a|0;b=b|0;da(851,a|0,b|0)}function Sq(a,b){a=a|0;b=b|0;da(852,a|0,b|0)}function Tq(a,b){a=a|0;b=b|0;da(853,a|0,b|0)}function Uq(a,b){a=a|0;b=b|0;da(854,a|0,b|0)}function Vq(a,b){a=a|0;b=b|0;da(855,a|0,b|0)}function Wq(a,b){a=a|0;b=b|0;da(856,a|0,b|0)}function Xq(a,b){a=a|0;b=b|0;da(857,a|0,b|0)}function Yq(a,b){a=a|0;b=b|0;da(858,a|0,b|0)}function Zq(a,b){a=a|0;b=b|0;da(859,a|0,b|0)}function _q(a,b){a=a|0;b=b|0;da(860,a|0,b|0)}function $q(a,b){a=a|0;b=b|0;da(861,a|0,b|0)}function ar(a,b){a=a|0;b=b|0;da(862,a|0,b|0)}function br(a,b){a=a|0;b=b|0;da(863,a|0,b|0)}function cr(a,b){a=a|0;b=b|0;da(864,a|0,b|0)}function dr(a,b){a=a|0;b=b|0;da(865,a|0,b|0)}function er(a,b){a=a|0;b=b|0;da(866,a|0,b|0)}function fr(a,b){a=a|0;b=b|0;da(867,a|0,b|0)}function gr(a,b){a=a|0;b=b|0;da(868,a|0,b|0)}function hr(a,b){a=a|0;b=b|0;da(869,a|0,b|0)}function ir(a,b){a=a|0;b=b|0;da(870,a|0,b|0)}function jr(a,b){a=a|0;b=b|0;da(871,a|0,b|0)}function kr(a,b){a=a|0;b=b|0;da(872,a|0,b|0)}function lr(a,b){a=a|0;b=b|0;da(873,a|0,b|0)}function mr(a,b){a=a|0;b=b|0;da(874,a|0,b|0)}function nr(a,b){a=a|0;b=b|0;da(875,a|0,b|0)}function or(a,b){a=a|0;b=b|0;da(876,a|0,b|0)}function pr(a,b){a=a|0;b=b|0;da(877,a|0,b|0)}function qr(a,b){a=a|0;b=b|0;da(878,a|0,b|0)}function rr(a,b){a=a|0;b=b|0;da(879,a|0,b|0)}function sr(a,b){a=a|0;b=b|0;da(880,a|0,b|0)}function tr(a,b){a=a|0;b=b|0;da(881,a|0,b|0)}function ur(a,b){a=a|0;b=b|0;da(882,a|0,b|0)}function vr(a,b){a=a|0;b=b|0;da(883,a|0,b|0)}function wr(a,b){a=a|0;b=b|0;da(884,a|0,b|0)}function xr(a,b){a=a|0;b=b|0;da(885,a|0,b|0)}function yr(a,b){a=a|0;b=b|0;da(886,a|0,b|0)}function zr(a,b){a=a|0;b=b|0;da(887,a|0,b|0)}function Ar(a,b){a=a|0;b=b|0;da(888,a|0,b|0)}function Br(a,b){a=a|0;b=b|0;da(889,a|0,b|0)}function Cr(a,b){a=a|0;b=b|0;da(890,a|0,b|0)}function Dr(a,b){a=a|0;b=b|0;da(891,a|0,b|0)}function Er(a,b){a=a|0;b=b|0;da(892,a|0,b|0)}function Fr(a,b){a=a|0;b=b|0;da(893,a|0,b|0)}function Gr(a,b){a=a|0;b=b|0;da(894,a|0,b|0)}function Hr(a,b){a=a|0;b=b|0;da(895,a|0,b|0)}function Ir(a,b){a=a|0;b=b|0;da(896,a|0,b|0)}function Jr(a,b){a=a|0;b=b|0;da(897,a|0,b|0)}function Kr(a,b){a=a|0;b=b|0;da(898,a|0,b|0)}function Lr(a,b){a=a|0;b=b|0;da(899,a|0,b|0)}function Mr(a,b){a=a|0;b=b|0;da(900,a|0,b|0)}function Nr(a,b){a=a|0;b=b|0;da(901,a|0,b|0)}function Or(a,b){a=a|0;b=b|0;da(902,a|0,b|0)}function Pr(a,b){a=a|0;b=b|0;da(903,a|0,b|0)}function Qr(a,b){a=a|0;b=b|0;da(904,a|0,b|0)}function Rr(a,b){a=a|0;b=b|0;da(905,a|0,b|0)}function Sr(a,b){a=a|0;b=b|0;da(906,a|0,b|0)}function Tr(a,b){a=a|0;b=b|0;da(907,a|0,b|0)}function Ur(a,b){a=a|0;b=b|0;da(908,a|0,b|0)}function Vr(a,b){a=a|0;b=b|0;da(909,a|0,b|0)}function Wr(a,b){a=a|0;b=b|0;da(910,a|0,b|0)}function Xr(a,b){a=a|0;b=b|0;da(911,a|0,b|0)}function Yr(a,b){a=a|0;b=b|0;da(912,a|0,b|0)}function Zr(a,b){a=a|0;b=b|0;da(913,a|0,b|0)}function _r(a,b){a=a|0;b=b|0;da(914,a|0,b|0)}function $r(a,b){a=a|0;b=b|0;da(915,a|0,b|0)}function as(a,b){a=a|0;b=b|0;da(916,a|0,b|0)}function bs(a,b){a=a|0;b=b|0;da(917,a|0,b|0)}function cs(a,b){a=a|0;b=b|0;da(918,a|0,b|0)}function ds(a,b){a=a|0;b=b|0;da(919,a|0,b|0)}function es(a,b){a=a|0;b=b|0;da(920,a|0,b|0)}function fs(a,b){a=a|0;b=b|0;da(921,a|0,b|0)}function gs(a,b){a=a|0;b=b|0;da(922,a|0,b|0)}function hs(a,b){a=a|0;b=b|0;da(923,a|0,b|0)}function is(a,b){a=a|0;b=b|0;da(924,a|0,b|0)}function js(a,b){a=a|0;b=b|0;da(925,a|0,b|0)}function ks(a,b){a=a|0;b=b|0;da(926,a|0,b|0)}function ls(a,b){a=a|0;b=b|0;da(927,a|0,b|0)}function ms(a,b){a=a|0;b=b|0;da(928,a|0,b|0)}function ns(a,b){a=a|0;b=b|0;da(929,a|0,b|0)}function os(a,b){a=a|0;b=b|0;da(930,a|0,b|0)}function ps(a,b){a=a|0;b=b|0;da(931,a|0,b|0)}function qs(a,b){a=a|0;b=b|0;da(932,a|0,b|0)}function rs(a,b){a=a|0;b=b|0;da(933,a|0,b|0)}function ss(a,b){a=a|0;b=b|0;da(934,a|0,b|0)}function ts(a,b){a=a|0;b=b|0;da(935,a|0,b|0)}function us(a,b){a=a|0;b=b|0;da(936,a|0,b|0)}function vs(a,b){a=a|0;b=b|0;da(937,a|0,b|0)}function ws(a,b){a=a|0;b=b|0;da(938,a|0,b|0)}function xs(a,b){a=a|0;b=b|0;da(939,a|0,b|0)}function ys(a,b){a=a|0;b=b|0;da(940,a|0,b|0)}function zs(a,b){a=a|0;b=b|0;da(941,a|0,b|0)}function As(a,b){a=a|0;b=b|0;da(942,a|0,b|0)}function Bs(a,b){a=a|0;b=b|0;da(943,a|0,b|0)}function Cs(a,b){a=a|0;b=b|0;da(944,a|0,b|0)}function Ds(a,b){a=a|0;b=b|0;da(945,a|0,b|0)}function Es(a,b){a=a|0;b=b|0;da(946,a|0,b|0)}function Fs(a,b){a=a|0;b=b|0;da(947,a|0,b|0)}function Gs(a,b){a=a|0;b=b|0;da(948,a|0,b|0)}function Hs(a,b){a=a|0;b=b|0;da(949,a|0,b|0)}function Is(a,b){a=a|0;b=b|0;da(950,a|0,b|0)}function Js(a,b){a=a|0;b=b|0;da(951,a|0,b|0)}function Ks(a,b){a=a|0;b=b|0;da(952,a|0,b|0)}function Ls(a,b){a=a|0;b=b|0;da(953,a|0,b|0)}function Ms(a,b){a=a|0;b=b|0;da(954,a|0,b|0)}function Ns(a,b){a=a|0;b=b|0;da(955,a|0,b|0)}function Os(a,b){a=a|0;b=b|0;da(956,a|0,b|0)}function Ps(a,b){a=a|0;b=b|0;da(957,a|0,b|0)}function Qs(a,b){a=a|0;b=b|0;da(958,a|0,b|0)}function Rs(a,b){a=a|0;b=b|0;da(959,a|0,b|0)}function Ss(a,b){a=a|0;b=b|0;da(960,a|0,b|0)}function Ts(a,b){a=a|0;b=b|0;da(961,a|0,b|0)}function Us(a,b){a=a|0;b=b|0;da(962,a|0,b|0)}function Vs(a,b){a=a|0;b=b|0;da(963,a|0,b|0)}function Ws(a,b){a=a|0;b=b|0;da(964,a|0,b|0)}function Xs(a,b){a=a|0;b=b|0;da(965,a|0,b|0)}function Ys(a,b){a=a|0;b=b|0;da(966,a|0,b|0)}function Zs(a,b){a=a|0;b=b|0;da(967,a|0,b|0)}function _s(a,b){a=a|0;b=b|0;da(968,a|0,b|0)}function $s(a,b){a=a|0;b=b|0;da(969,a|0,b|0)}function at(a,b){a=a|0;b=b|0;da(970,a|0,b|0)}function bt(a,b){a=a|0;b=b|0;da(971,a|0,b|0)}function ct(a,b){a=a|0;b=b|0;da(972,a|0,b|0)}function dt(a,b){a=a|0;b=b|0;da(973,a|0,b|0)}function et(a,b){a=a|0;b=b|0;da(974,a|0,b|0)}function ft(a,b){a=a|0;b=b|0;da(975,a|0,b|0)}function gt(a,b){a=a|0;b=b|0;da(976,a|0,b|0)}function ht(a,b){a=a|0;b=b|0;da(977,a|0,b|0)}function it(a,b){a=a|0;b=b|0;da(978,a|0,b|0)}function jt(a,b){a=a|0;b=b|0;da(979,a|0,b|0)}function kt(a,b){a=a|0;b=b|0;da(980,a|0,b|0)}function lt(a,b){a=a|0;b=b|0;da(981,a|0,b|0)}function mt(a,b){a=a|0;b=b|0;da(982,a|0,b|0)}function nt(a,b){a=a|0;b=b|0;da(983,a|0,b|0)}function ot(a,b){a=a|0;b=b|0;da(984,a|0,b|0)}function pt(a,b){a=a|0;b=b|0;da(985,a|0,b|0)}function qt(a,b){a=a|0;b=b|0;da(986,a|0,b|0)}function rt(a,b){a=a|0;b=b|0;da(987,a|0,b|0)}function st(a,b){a=a|0;b=b|0;da(988,a|0,b|0)}function tt(a,b){a=a|0;b=b|0;da(989,a|0,b|0)}function ut(a,b){a=a|0;b=b|0;da(990,a|0,b|0)}function vt(a,b){a=a|0;b=b|0;da(991,a|0,b|0)}function wt(a,b){a=a|0;b=b|0;da(992,a|0,b|0)}function xt(a,b){a=a|0;b=b|0;da(993,a|0,b|0)}function yt(a,b){a=a|0;b=b|0;da(994,a|0,b|0)}function zt(a,b){a=a|0;b=b|0;da(995,a|0,b|0)}function At(a,b){a=a|0;b=b|0;da(996,a|0,b|0)}function Bt(a,b){a=a|0;b=b|0;da(997,a|0,b|0)}function Ct(a,b){a=a|0;b=b|0;da(998,a|0,b|0)}function Dt(a,b){a=a|0;b=b|0;da(999,a|0,b|0)}function Et(a,b){a=a|0;b=b|0;da(1e3,a|0,b|0)}function Ft(a,b){a=a|0;b=b|0;da(1001,a|0,b|0)}function Gt(a,b){a=a|0;b=b|0;da(1002,a|0,b|0)}function Ht(a,b){a=a|0;b=b|0;da(1003,a|0,b|0)}function It(a,b){a=a|0;b=b|0;da(1004,a|0,b|0)}function Jt(a,b){a=a|0;b=b|0;da(1005,a|0,b|0)}function Kt(a,b){a=a|0;b=b|0;da(1006,a|0,b|0)}function Lt(a,b){a=a|0;b=b|0;da(1007,a|0,b|0)}function Mt(a,b){a=a|0;b=b|0;da(1008,a|0,b|0)}function Nt(a,b){a=a|0;b=b|0;da(1009,a|0,b|0)}function Ot(a,b){a=a|0;b=b|0;da(1010,a|0,b|0)}function Pt(a,b){a=a|0;b=b|0;da(1011,a|0,b|0)}function Qt(a,b){a=a|0;b=b|0;da(1012,a|0,b|0)}function Rt(a,b){a=a|0;b=b|0;da(1013,a|0,b|0)}function St(a,b){a=a|0;b=b|0;da(1014,a|0,b|0)}function Tt(a,b){a=a|0;b=b|0;da(1015,a|0,b|0)}function Ut(a,b){a=a|0;b=b|0;da(1016,a|0,b|0)}function Vt(a,b){a=a|0;b=b|0;da(1017,a|0,b|0)}function Wt(a,b){a=a|0;b=b|0;da(1018,a|0,b|0)}function Xt(a,b){a=a|0;b=b|0;da(1019,a|0,b|0)}function Yt(a,b){a=a|0;b=b|0;da(1020,a|0,b|0)}function Zt(a,b){a=a|0;b=b|0;da(1021,a|0,b|0)}function _t(a,b){a=a|0;b=b|0;da(1022,a|0,b|0)}function $t(a,b){a=a|0;b=b|0;da(1023,a|0,b|0)}function au(a,b,c){a=a|0;b=b|0;c=c|0;return ra[a&4095](b|0,c|0)|0}function bu(a,b){a=a|0;b=b|0;return da(0,a|0,b|0)|0}function cu(a,b){a=a|0;b=b|0;return da(1,a|0,b|0)|0}function du(a,b){a=a|0;b=b|0;return da(2,a|0,b|0)|0}function eu(a,b){a=a|0;b=b|0;return da(3,a|0,b|0)|0}function fu(a,b){a=a|0;b=b|0;return da(4,a|0,b|0)|0}function gu(a,b){a=a|0;b=b|0;return da(5,a|0,b|0)|0}function hu(a,b){a=a|0;b=b|0;return da(6,a|0,b|0)|0}function iu(a,b){a=a|0;b=b|0;return da(7,a|0,b|0)|0}function ju(a,b){a=a|0;b=b|0;return da(8,a|0,b|0)|0}function ku(a,b){a=a|0;b=b|0;return da(9,a|0,b|0)|0}function lu(a,b){a=a|0;b=b|0;return da(10,a|0,b|0)|0}function mu(a,b){a=a|0;b=b|0;return da(11,a|0,b|0)|0}function nu(a,b){a=a|0;b=b|0;return da(12,a|0,b|0)|0}function ou(a,b){a=a|0;b=b|0;return da(13,a|0,b|0)|0}function pu(a,b){a=a|0;b=b|0;return da(14,a|0,b|0)|0}function qu(a,b){a=a|0;b=b|0;return da(15,a|0,b|0)|0}function ru(a,b){a=a|0;b=b|0;return da(16,a|0,b|0)|0}function su(a,b){a=a|0;b=b|0;return da(17,a|0,b|0)|0}function tu(a,b){a=a|0;b=b|0;return da(18,a|0,b|0)|0}function uu(a,b){a=a|0;b=b|0;return da(19,a|0,b|0)|0}function vu(a,b){a=a|0;b=b|0;return da(20,a|0,b|0)|0}function wu(a,b){a=a|0;b=b|0;return da(21,a|0,b|0)|0}function xu(a,b){a=a|0;b=b|0;return da(22,a|0,b|0)|0}function yu(a,b){a=a|0;b=b|0;return da(23,a|0,b|0)|0}function zu(a,b){a=a|0;b=b|0;return da(24,a|0,b|0)|0}function Au(a,b){a=a|0;b=b|0;return da(25,a|0,b|0)|0}function Bu(a,b){a=a|0;b=b|0;return da(26,a|0,b|0)|0}function Cu(a,b){a=a|0;b=b|0;return da(27,a|0,b|0)|0}function Du(a,b){a=a|0;b=b|0;return da(28,a|0,b|0)|0}function Eu(a,b){a=a|0;b=b|0;return da(29,a|0,b|0)|0}function Fu(a,b){a=a|0;b=b|0;return da(30,a|0,b|0)|0}function Gu(a,b){a=a|0;b=b|0;return da(31,a|0,b|0)|0}function Hu(a,b){a=a|0;b=b|0;return da(32,a|0,b|0)|0}function Iu(a,b){a=a|0;b=b|0;return da(33,a|0,b|0)|0}function Ju(a,b){a=a|0;b=b|0;return da(34,a|0,b|0)|0}function Ku(a,b){a=a|0;b=b|0;return da(35,a|0,b|0)|0}function Lu(a,b){a=a|0;b=b|0;return da(36,a|0,b|0)|0}function Mu(a,b){a=a|0;b=b|0;return da(37,a|0,b|0)|0}function Nu(a,b){a=a|0;b=b|0;return da(38,a|0,b|0)|0}function Ou(a,b){a=a|0;b=b|0;return da(39,a|0,b|0)|0}function Pu(a,b){a=a|0;b=b|0;return da(40,a|0,b|0)|0}function Qu(a,b){a=a|0;b=b|0;return da(41,a|0,b|0)|0}function Ru(a,b){a=a|0;b=b|0;return da(42,a|0,b|0)|0}function Su(a,b){a=a|0;b=b|0;return da(43,a|0,b|0)|0}function Tu(a,b){a=a|0;b=b|0;return da(44,a|0,b|0)|0}function Uu(a,b){a=a|0;b=b|0;return da(45,a|0,b|0)|0}function Vu(a,b){a=a|0;b=b|0;return da(46,a|0,b|0)|0}function Wu(a,b){a=a|0;b=b|0;return da(47,a|0,b|0)|0}function Xu(a,b){a=a|0;b=b|0;return da(48,a|0,b|0)|0}function Yu(a,b){a=a|0;b=b|0;return da(49,a|0,b|0)|0}function Zu(a,b){a=a|0;b=b|0;return da(50,a|0,b|0)|0}function _u(a,b){a=a|0;b=b|0;return da(51,a|0,b|0)|0}function $u(a,b){a=a|0;b=b|0;return da(52,a|0,b|0)|0}function av(a,b){a=a|0;b=b|0;return da(53,a|0,b|0)|0}function bv(a,b){a=a|0;b=b|0;return da(54,a|0,b|0)|0}function cv(a,b){a=a|0;b=b|0;return da(55,a|0,b|0)|0}function dv(a,b){a=a|0;b=b|0;return da(56,a|0,b|0)|0}function ev(a,b){a=a|0;b=b|0;return da(57,a|0,b|0)|0}function fv(a,b){a=a|0;b=b|0;return da(58,a|0,b|0)|0}function gv(a,b){a=a|0;b=b|0;return da(59,a|0,b|0)|0}function hv(a,b){a=a|0;b=b|0;return da(60,a|0,b|0)|0}function iv(a,b){a=a|0;b=b|0;return da(61,a|0,b|0)|0}function jv(a,b){a=a|0;b=b|0;return da(62,a|0,b|0)|0}function kv(a,b){a=a|0;b=b|0;return da(63,a|0,b|0)|0}function lv(a,b){a=a|0;b=b|0;return da(64,a|0,b|0)|0}function mv(a,b){a=a|0;b=b|0;return da(65,a|0,b|0)|0}function nv(a,b){a=a|0;b=b|0;return da(66,a|0,b|0)|0}function ov(a,b){a=a|0;b=b|0;return da(67,a|0,b|0)|0}function pv(a,b){a=a|0;b=b|0;return da(68,a|0,b|0)|0}function qv(a,b){a=a|0;b=b|0;return da(69,a|0,b|0)|0}function rv(a,b){a=a|0;b=b|0;return da(70,a|0,b|0)|0}function sv(a,b){a=a|0;b=b|0;return da(71,a|0,b|0)|0}function tv(a,b){a=a|0;b=b|0;return da(72,a|0,b|0)|0}function uv(a,b){a=a|0;b=b|0;return da(73,a|0,b|0)|0}function vv(a,b){a=a|0;b=b|0;return da(74,a|0,b|0)|0}function wv(a,b){a=a|0;b=b|0;return da(75,a|0,b|0)|0}function xv(a,b){a=a|0;b=b|0;return da(76,a|0,b|0)|0}function yv(a,b){a=a|0;b=b|0;return da(77,a|0,b|0)|0}function zv(a,b){a=a|0;b=b|0;return da(78,a|0,b|0)|0}function Av(a,b){a=a|0;b=b|0;return da(79,a|0,b|0)|0}function Bv(a,b){a=a|0;b=b|0;return da(80,a|0,b|0)|0}function Cv(a,b){a=a|0;b=b|0;return da(81,a|0,b|0)|0}function Dv(a,b){a=a|0;b=b|0;return da(82,a|0,b|0)|0}function Ev(a,b){a=a|0;b=b|0;return da(83,a|0,b|0)|0}function Fv(a,b){a=a|0;b=b|0;return da(84,a|0,b|0)|0}function Gv(a,b){a=a|0;b=b|0;return da(85,a|0,b|0)|0}function Hv(a,b){a=a|0;b=b|0;return da(86,a|0,b|0)|0}function Iv(a,b){a=a|0;b=b|0;return da(87,a|0,b|0)|0}function Jv(a,b){a=a|0;b=b|0;return da(88,a|0,b|0)|0}function Kv(a,b){a=a|0;b=b|0;return da(89,a|0,b|0)|0}function Lv(a,b){a=a|0;b=b|0;return da(90,a|0,b|0)|0}function Mv(a,b){a=a|0;b=b|0;return da(91,a|0,b|0)|0}function Nv(a,b){a=a|0;b=b|0;return da(92,a|0,b|0)|0}function Ov(a,b){a=a|0;b=b|0;return da(93,a|0,b|0)|0}function Pv(a,b){a=a|0;b=b|0;return da(94,a|0,b|0)|0}function Qv(a,b){a=a|0;b=b|0;return da(95,a|0,b|0)|0}function Rv(a,b){a=a|0;b=b|0;return da(96,a|0,b|0)|0}function Sv(a,b){a=a|0;b=b|0;return da(97,a|0,b|0)|0}function Tv(a,b){a=a|0;b=b|0;return da(98,a|0,b|0)|0}function Uv(a,b){a=a|0;b=b|0;return da(99,a|0,b|0)|0}function Vv(a,b){a=a|0;b=b|0;return da(100,a|0,b|0)|0}function Wv(a,b){a=a|0;b=b|0;return da(101,a|0,b|0)|0}function Xv(a,b){a=a|0;b=b|0;return da(102,a|0,b|0)|0}function Yv(a,b){a=a|0;b=b|0;return da(103,a|0,b|0)|0}function Zv(a,b){a=a|0;b=b|0;return da(104,a|0,b|0)|0}function _v(a,b){a=a|0;b=b|0;return da(105,a|0,b|0)|0}function $v(a,b){a=a|0;b=b|0;return da(106,a|0,b|0)|0}function aw(a,b){a=a|0;b=b|0;return da(107,a|0,b|0)|0}function bw(a,b){a=a|0;b=b|0;return da(108,a|0,b|0)|0}function cw(a,b){a=a|0;b=b|0;return da(109,a|0,b|0)|0}function dw(a,b){a=a|0;b=b|0;return da(110,a|0,b|0)|0}function ew(a,b){a=a|0;b=b|0;return da(111,a|0,b|0)|0}function fw(a,b){a=a|0;b=b|0;return da(112,a|0,b|0)|0}function gw(a,b){a=a|0;b=b|0;return da(113,a|0,b|0)|0}function hw(a,b){a=a|0;b=b|0;return da(114,a|0,b|0)|0}function iw(a,b){a=a|0;b=b|0;return da(115,a|0,b|0)|0}function jw(a,b){a=a|0;b=b|0;return da(116,a|0,b|0)|0}function kw(a,b){a=a|0;b=b|0;return da(117,a|0,b|0)|0}function lw(a,b){a=a|0;b=b|0;return da(118,a|0,b|0)|0}function mw(a,b){a=a|0;b=b|0;return da(119,a|0,b|0)|0}function nw(a,b){a=a|0;b=b|0;return da(120,a|0,b|0)|0}function ow(a,b){a=a|0;b=b|0;return da(121,a|0,b|0)|0}function pw(a,b){a=a|0;b=b|0;return da(122,a|0,b|0)|0}function qw(a,b){a=a|0;b=b|0;return da(123,a|0,b|0)|0}function rw(a,b){a=a|0;b=b|0;return da(124,a|0,b|0)|0}function sw(a,b){a=a|0;b=b|0;return da(125,a|0,b|0)|0}function tw(a,b){a=a|0;b=b|0;return da(126,a|0,b|0)|0}function uw(a,b){a=a|0;b=b|0;return da(127,a|0,b|0)|0}function vw(a,b){a=a|0;b=b|0;return da(128,a|0,b|0)|0}function ww(a,b){a=a|0;b=b|0;return da(129,a|0,b|0)|0}function xw(a,b){a=a|0;b=b|0;return da(130,a|0,b|0)|0}function yw(a,b){a=a|0;b=b|0;return da(131,a|0,b|0)|0}function zw(a,b){a=a|0;b=b|0;return da(132,a|0,b|0)|0}function Aw(a,b){a=a|0;b=b|0;return da(133,a|0,b|0)|0}function Bw(a,b){a=a|0;b=b|0;return da(134,a|0,b|0)|0}function Cw(a,b){a=a|0;b=b|0;return da(135,a|0,b|0)|0}function Dw(a,b){a=a|0;b=b|0;return da(136,a|0,b|0)|0}function Ew(a,b){a=a|0;b=b|0;return da(137,a|0,b|0)|0}function Fw(a,b){a=a|0;b=b|0;return da(138,a|0,b|0)|0}function Gw(a,b){a=a|0;b=b|0;return da(139,a|0,b|0)|0}function Hw(a,b){a=a|0;b=b|0;return da(140,a|0,b|0)|0}function Iw(a,b){a=a|0;b=b|0;return da(141,a|0,b|0)|0}function Jw(a,b){a=a|0;b=b|0;return da(142,a|0,b|0)|0}function Kw(a,b){a=a|0;b=b|0;return da(143,a|0,b|0)|0}function Lw(a,b){a=a|0;b=b|0;return da(144,a|0,b|0)|0}function Mw(a,b){a=a|0;b=b|0;return da(145,a|0,b|0)|0}function Nw(a,b){a=a|0;b=b|0;return da(146,a|0,b|0)|0}function Ow(a,b){a=a|0;b=b|0;return da(147,a|0,b|0)|0}function Pw(a,b){a=a|0;b=b|0;return da(148,a|0,b|0)|0}function Qw(a,b){a=a|0;b=b|0;return da(149,a|0,b|0)|0}function Rw(a,b){a=a|0;b=b|0;return da(150,a|0,b|0)|0}function Sw(a,b){a=a|0;b=b|0;return da(151,a|0,b|0)|0}function Tw(a,b){a=a|0;b=b|0;return da(152,a|0,b|0)|0}function Uw(a,b){a=a|0;b=b|0;return da(153,a|0,b|0)|0}function Vw(a,b){a=a|0;b=b|0;return da(154,a|0,b|0)|0}function Ww(a,b){a=a|0;b=b|0;return da(155,a|0,b|0)|0}function Xw(a,b){a=a|0;b=b|0;return da(156,a|0,b|0)|0}function Yw(a,b){a=a|0;b=b|0;return da(157,a|0,b|0)|0}function Zw(a,b){a=a|0;b=b|0;return da(158,a|0,b|0)|0}function _w(a,b){a=a|0;b=b|0;return da(159,a|0,b|0)|0}function $w(a,b){a=a|0;b=b|0;return da(160,a|0,b|0)|0}function ax(a,b){a=a|0;b=b|0;return da(161,a|0,b|0)|0}function bx(a,b){a=a|0;b=b|0;return da(162,a|0,b|0)|0}function cx(a,b){a=a|0;b=b|0;return da(163,a|0,b|0)|0}function dx(a,b){a=a|0;b=b|0;return da(164,a|0,b|0)|0}function ex(a,b){a=a|0;b=b|0;return da(165,a|0,b|0)|0}function fx(a,b){a=a|0;b=b|0;return da(166,a|0,b|0)|0}function gx(a,b){a=a|0;b=b|0;return da(167,a|0,b|0)|0}function hx(a,b){a=a|0;b=b|0;return da(168,a|0,b|0)|0}function ix(a,b){a=a|0;b=b|0;return da(169,a|0,b|0)|0}function jx(a,b){a=a|0;b=b|0;return da(170,a|0,b|0)|0}function kx(a,b){a=a|0;b=b|0;return da(171,a|0,b|0)|0}function lx(a,b){a=a|0;b=b|0;return da(172,a|0,b|0)|0}function mx(a,b){a=a|0;b=b|0;return da(173,a|0,b|0)|0}function nx(a,b){a=a|0;b=b|0;return da(174,a|0,b|0)|0}function ox(a,b){a=a|0;b=b|0;return da(175,a|0,b|0)|0}function px(a,b){a=a|0;b=b|0;return da(176,a|0,b|0)|0}function qx(a,b){a=a|0;b=b|0;return da(177,a|0,b|0)|0}function rx(a,b){a=a|0;b=b|0;return da(178,a|0,b|0)|0}function sx(a,b){a=a|0;b=b|0;return da(179,a|0,b|0)|0}function tx(a,b){a=a|0;b=b|0;return da(180,a|0,b|0)|0}function ux(a,b){a=a|0;b=b|0;return da(181,a|0,b|0)|0}function vx(a,b){a=a|0;b=b|0;return da(182,a|0,b|0)|0}function wx(a,b){a=a|0;b=b|0;return da(183,a|0,b|0)|0}function xx(a,b){a=a|0;b=b|0;return da(184,a|0,b|0)|0}function yx(a,b){a=a|0;b=b|0;return da(185,a|0,b|0)|0}function zx(a,b){a=a|0;b=b|0;return da(186,a|0,b|0)|0}function Ax(a,b){a=a|0;b=b|0;return da(187,a|0,b|0)|0}function Bx(a,b){a=a|0;b=b|0;return da(188,a|0,b|0)|0}function Cx(a,b){a=a|0;b=b|0;return da(189,a|0,b|0)|0}function Dx(a,b){a=a|0;b=b|0;return da(190,a|0,b|0)|0}function Ex(a,b){a=a|0;b=b|0;return da(191,a|0,b|0)|0}function Fx(a,b){a=a|0;b=b|0;return da(192,a|0,b|0)|0}function Gx(a,b){a=a|0;b=b|0;return da(193,a|0,b|0)|0}function Hx(a,b){a=a|0;b=b|0;return da(194,a|0,b|0)|0}function Ix(a,b){a=a|0;b=b|0;return da(195,a|0,b|0)|0}function Jx(a,b){a=a|0;b=b|0;return da(196,a|0,b|0)|0}function Kx(a,b){a=a|0;b=b|0;return da(197,a|0,b|0)|0}function Lx(a,b){a=a|0;b=b|0;return da(198,a|0,b|0)|0}function Mx(a,b){a=a|0;b=b|0;return da(199,a|0,b|0)|0}function Nx(a,b){a=a|0;b=b|0;return da(200,a|0,b|0)|0}function Ox(a,b){a=a|0;b=b|0;return da(201,a|0,b|0)|0}function Px(a,b){a=a|0;b=b|0;return da(202,a|0,b|0)|0}function Qx(a,b){a=a|0;b=b|0;return da(203,a|0,b|0)|0}function Rx(a,b){a=a|0;b=b|0;return da(204,a|0,b|0)|0}function Sx(a,b){a=a|0;b=b|0;return da(205,a|0,b|0)|0}function Tx(a,b){a=a|0;b=b|0;return da(206,a|0,b|0)|0}function Ux(a,b){a=a|0;b=b|0;return da(207,a|0,b|0)|0}function Vx(a,b){a=a|0;b=b|0;return da(208,a|0,b|0)|0}function Wx(a,b){a=a|0;b=b|0;return da(209,a|0,b|0)|0}function Xx(a,b){a=a|0;b=b|0;return da(210,a|0,b|0)|0}function Yx(a,b){a=a|0;b=b|0;return da(211,a|0,b|0)|0}function Zx(a,b){a=a|0;b=b|0;return da(212,a|0,b|0)|0}function _x(a,b){a=a|0;b=b|0;return da(213,a|0,b|0)|0}function $x(a,b){a=a|0;b=b|0;return da(214,a|0,b|0)|0}function ay(a,b){a=a|0;b=b|0;return da(215,a|0,b|0)|0}function by(a,b){a=a|0;b=b|0;return da(216,a|0,b|0)|0}function cy(a,b){a=a|0;b=b|0;return da(217,a|0,b|0)|0}function dy(a,b){a=a|0;b=b|0;return da(218,a|0,b|0)|0}function ey(a,b){a=a|0;b=b|0;return da(219,a|0,b|0)|0}function fy(a,b){a=a|0;b=b|0;return da(220,a|0,b|0)|0}function gy(a,b){a=a|0;b=b|0;return da(221,a|0,b|0)|0}function hy(a,b){a=a|0;b=b|0;return da(222,a|0,b|0)|0}function iy(a,b){a=a|0;b=b|0;return da(223,a|0,b|0)|0}function jy(a,b){a=a|0;b=b|0;return da(224,a|0,b|0)|0}function ky(a,b){a=a|0;b=b|0;return da(225,a|0,b|0)|0}function ly(a,b){a=a|0;b=b|0;return da(226,a|0,b|0)|0}function my(a,b){a=a|0;b=b|0;return da(227,a|0,b|0)|0}function ny(a,b){a=a|0;b=b|0;return da(228,a|0,b|0)|0}function oy(a,b){a=a|0;b=b|0;return da(229,a|0,b|0)|0}function py(a,b){a=a|0;b=b|0;return da(230,a|0,b|0)|0}function qy(a,b){a=a|0;b=b|0;return da(231,a|0,b|0)|0}function ry(a,b){a=a|0;b=b|0;return da(232,a|0,b|0)|0}function sy(a,b){a=a|0;b=b|0;return da(233,a|0,b|0)|0}function ty(a,b){a=a|0;b=b|0;return da(234,a|0,b|0)|0}function uy(a,b){a=a|0;b=b|0;return da(235,a|0,b|0)|0}function vy(a,b){a=a|0;b=b|0;return da(236,a|0,b|0)|0}function wy(a,b){a=a|0;b=b|0;return da(237,a|0,b|0)|0}function xy(a,b){a=a|0;b=b|0;return da(238,a|0,b|0)|0}function yy(a,b){a=a|0;b=b|0;return da(239,a|0,b|0)|0}function zy(a,b){a=a|0;b=b|0;return da(240,a|0,b|0)|0}function Ay(a,b){a=a|0;b=b|0;return da(241,a|0,b|0)|0}function By(a,b){a=a|0;b=b|0;return da(242,a|0,b|0)|0}function Cy(a,b){a=a|0;b=b|0;return da(243,a|0,b|0)|0}function Dy(a,b){a=a|0;b=b|0;return da(244,a|0,b|0)|0}function Ey(a,b){a=a|0;b=b|0;return da(245,a|0,b|0)|0}function Fy(a,b){a=a|0;b=b|0;return da(246,a|0,b|0)|0}function Gy(a,b){a=a|0;b=b|0;return da(247,a|0,b|0)|0}function Hy(a,b){a=a|0;b=b|0;return da(248,a|0,b|0)|0}function Iy(a,b){a=a|0;b=b|0;return da(249,a|0,b|0)|0}function Jy(a,b){a=a|0;b=b|0;return da(250,a|0,b|0)|0}function Ky(a,b){a=a|0;b=b|0;return da(251,a|0,b|0)|0}function Ly(a,b){a=a|0;b=b|0;return da(252,a|0,b|0)|0}function My(a,b){a=a|0;b=b|0;return da(253,a|0,b|0)|0}function Ny(a,b){a=a|0;b=b|0;return da(254,a|0,b|0)|0}function Oy(a,b){a=a|0;b=b|0;return da(255,a|0,b|0)|0}function Py(a,b){a=a|0;b=b|0;return da(256,a|0,b|0)|0}function Qy(a,b){a=a|0;b=b|0;return da(257,a|0,b|0)|0}function Ry(a,b){a=a|0;b=b|0;return da(258,a|0,b|0)|0}function Sy(a,b){a=a|0;b=b|0;return da(259,a|0,b|0)|0}function Ty(a,b){a=a|0;b=b|0;return da(260,a|0,b|0)|0}function Uy(a,b){a=a|0;b=b|0;return da(261,a|0,b|0)|0}function Vy(a,b){a=a|0;b=b|0;return da(262,a|0,b|0)|0}function Wy(a,b){a=a|0;b=b|0;return da(263,a|0,b|0)|0}function Xy(a,b){a=a|0;b=b|0;return da(264,a|0,b|0)|0}function Yy(a,b){a=a|0;b=b|0;return da(265,a|0,b|0)|0}function Zy(a,b){a=a|0;b=b|0;return da(266,a|0,b|0)|0}function _y(a,b){a=a|0;b=b|0;return da(267,a|0,b|0)|0}function $y(a,b){a=a|0;b=b|0;return da(268,a|0,b|0)|0}function az(a,b){a=a|0;b=b|0;return da(269,a|0,b|0)|0}function bz(a,b){a=a|0;b=b|0;return da(270,a|0,b|0)|0}function cz(a,b){a=a|0;b=b|0;return da(271,a|0,b|0)|0}function dz(a,b){a=a|0;b=b|0;return da(272,a|0,b|0)|0}function ez(a,b){a=a|0;b=b|0;return da(273,a|0,b|0)|0}function fz(a,b){a=a|0;b=b|0;return da(274,a|0,b|0)|0}function gz(a,b){a=a|0;b=b|0;return da(275,a|0,b|0)|0}function hz(a,b){a=a|0;b=b|0;return da(276,a|0,b|0)|0}function iz(a,b){a=a|0;b=b|0;return da(277,a|0,b|0)|0}function jz(a,b){a=a|0;b=b|0;return da(278,a|0,b|0)|0}function kz(a,b){a=a|0;b=b|0;return da(279,a|0,b|0)|0}function lz(a,b){a=a|0;b=b|0;return da(280,a|0,b|0)|0}function mz(a,b){a=a|0;b=b|0;return da(281,a|0,b|0)|0}function nz(a,b){a=a|0;b=b|0;return da(282,a|0,b|0)|0}function oz(a,b){a=a|0;b=b|0;return da(283,a|0,b|0)|0}function pz(a,b){a=a|0;b=b|0;return da(284,a|0,b|0)|0}function qz(a,b){a=a|0;b=b|0;return da(285,a|0,b|0)|0}function rz(a,b){a=a|0;b=b|0;return da(286,a|0,b|0)|0}function sz(a,b){a=a|0;b=b|0;return da(287,a|0,b|0)|0}function tz(a,b){a=a|0;b=b|0;return da(288,a|0,b|0)|0}function uz(a,b){a=a|0;b=b|0;return da(289,a|0,b|0)|0}function vz(a,b){a=a|0;b=b|0;return da(290,a|0,b|0)|0}function wz(a,b){a=a|0;b=b|0;return da(291,a|0,b|0)|0}function xz(a,b){a=a|0;b=b|0;return da(292,a|0,b|0)|0}function yz(a,b){a=a|0;b=b|0;return da(293,a|0,b|0)|0}function zz(a,b){a=a|0;b=b|0;return da(294,a|0,b|0)|0}function Az(a,b){a=a|0;b=b|0;return da(295,a|0,b|0)|0}function Bz(a,b){a=a|0;b=b|0;return da(296,a|0,b|0)|0}function Cz(a,b){a=a|0;b=b|0;return da(297,a|0,b|0)|0}function Dz(a,b){a=a|0;b=b|0;return da(298,a|0,b|0)|0}function Ez(a,b){a=a|0;b=b|0;return da(299,a|0,b|0)|0}function Fz(a,b){a=a|0;b=b|0;return da(300,a|0,b|0)|0}function Gz(a,b){a=a|0;b=b|0;return da(301,a|0,b|0)|0}function Hz(a,b){a=a|0;b=b|0;return da(302,a|0,b|0)|0}function Iz(a,b){a=a|0;b=b|0;return da(303,a|0,b|0)|0}function Jz(a,b){a=a|0;b=b|0;return da(304,a|0,b|0)|0}function Kz(a,b){a=a|0;b=b|0;return da(305,a|0,b|0)|0}function Lz(a,b){a=a|0;b=b|0;return da(306,a|0,b|0)|0}function Mz(a,b){a=a|0;b=b|0;return da(307,a|0,b|0)|0}function Nz(a,b){a=a|0;b=b|0;return da(308,a|0,b|0)|0}function Oz(a,b){a=a|0;b=b|0;return da(309,a|0,b|0)|0}function Pz(a,b){a=a|0;b=b|0;return da(310,a|0,b|0)|0}function Qz(a,b){a=a|0;b=b|0;return da(311,a|0,b|0)|0}function Rz(a,b){a=a|0;b=b|0;return da(312,a|0,b|0)|0}function Sz(a,b){a=a|0;b=b|0;return da(313,a|0,b|0)|0}function Tz(a,b){a=a|0;b=b|0;return da(314,a|0,b|0)|0}function Uz(a,b){a=a|0;b=b|0;return da(315,a|0,b|0)|0}function Vz(a,b){a=a|0;b=b|0;return da(316,a|0,b|0)|0}function Wz(a,b){a=a|0;b=b|0;return da(317,a|0,b|0)|0}function Xz(a,b){a=a|0;b=b|0;return da(318,a|0,b|0)|0}function Yz(a,b){a=a|0;b=b|0;return da(319,a|0,b|0)|0}function Zz(a,b){a=a|0;b=b|0;return da(320,a|0,b|0)|0}function _z(a,b){a=a|0;b=b|0;return da(321,a|0,b|0)|0}function $z(a,b){a=a|0;b=b|0;return da(322,a|0,b|0)|0}function aA(a,b){a=a|0;b=b|0;return da(323,a|0,b|0)|0}function bA(a,b){a=a|0;b=b|0;return da(324,a|0,b|0)|0}function cA(a,b){a=a|0;b=b|0;return da(325,a|0,b|0)|0}function dA(a,b){a=a|0;b=b|0;return da(326,a|0,b|0)|0}function eA(a,b){a=a|0;b=b|0;return da(327,a|0,b|0)|0}function fA(a,b){a=a|0;b=b|0;return da(328,a|0,b|0)|0}function gA(a,b){a=a|0;b=b|0;return da(329,a|0,b|0)|0}function hA(a,b){a=a|0;b=b|0;return da(330,a|0,b|0)|0}function iA(a,b){a=a|0;b=b|0;return da(331,a|0,b|0)|0}function jA(a,b){a=a|0;b=b|0;return da(332,a|0,b|0)|0}function kA(a,b){a=a|0;b=b|0;return da(333,a|0,b|0)|0}function lA(a,b){a=a|0;b=b|0;return da(334,a|0,b|0)|0}function mA(a,b){a=a|0;b=b|0;return da(335,a|0,b|0)|0}function nA(a,b){a=a|0;b=b|0;return da(336,a|0,b|0)|0}function oA(a,b){a=a|0;b=b|0;return da(337,a|0,b|0)|0}function pA(a,b){a=a|0;b=b|0;return da(338,a|0,b|0)|0}function qA(a,b){a=a|0;b=b|0;return da(339,a|0,b|0)|0}function rA(a,b){a=a|0;b=b|0;return da(340,a|0,b|0)|0}function sA(a,b){a=a|0;b=b|0;return da(341,a|0,b|0)|0}function tA(a,b){a=a|0;b=b|0;return da(342,a|0,b|0)|0}function uA(a,b){a=a|0;b=b|0;return da(343,a|0,b|0)|0}function vA(a,b){a=a|0;b=b|0;return da(344,a|0,b|0)|0}function wA(a,b){a=a|0;b=b|0;return da(345,a|0,b|0)|0}function xA(a,b){a=a|0;b=b|0;return da(346,a|0,b|0)|0}function yA(a,b){a=a|0;b=b|0;return da(347,a|0,b|0)|0}function zA(a,b){a=a|0;b=b|0;return da(348,a|0,b|0)|0}function AA(a,b){a=a|0;b=b|0;return da(349,a|0,b|0)|0}function BA(a,b){a=a|0;b=b|0;return da(350,a|0,b|0)|0}function CA(a,b){a=a|0;b=b|0;return da(351,a|0,b|0)|0}function DA(a,b){a=a|0;b=b|0;return da(352,a|0,b|0)|0}function EA(a,b){a=a|0;b=b|0;return da(353,a|0,b|0)|0}function FA(a,b){a=a|0;b=b|0;return da(354,a|0,b|0)|0}function GA(a,b){a=a|0;b=b|0;return da(355,a|0,b|0)|0}function HA(a,b){a=a|0;b=b|0;return da(356,a|0,b|0)|0}function IA(a,b){a=a|0;b=b|0;return da(357,a|0,b|0)|0}function JA(a,b){a=a|0;b=b|0;return da(358,a|0,b|0)|0}function KA(a,b){a=a|0;b=b|0;return da(359,a|0,b|0)|0}function LA(a,b){a=a|0;b=b|0;return da(360,a|0,b|0)|0}function MA(a,b){a=a|0;b=b|0;return da(361,a|0,b|0)|0}function NA(a,b){a=a|0;b=b|0;return da(362,a|0,b|0)|0}function OA(a,b){a=a|0;b=b|0;return da(363,a|0,b|0)|0}function PA(a,b){a=a|0;b=b|0;return da(364,a|0,b|0)|0}function QA(a,b){a=a|0;b=b|0;return da(365,a|0,b|0)|0}function RA(a,b){a=a|0;b=b|0;return da(366,a|0,b|0)|0}function SA(a,b){a=a|0;b=b|0;return da(367,a|0,b|0)|0}function TA(a,b){a=a|0;b=b|0;return da(368,a|0,b|0)|0}function UA(a,b){a=a|0;b=b|0;return da(369,a|0,b|0)|0}function VA(a,b){a=a|0;b=b|0;return da(370,a|0,b|0)|0}function WA(a,b){a=a|0;b=b|0;return da(371,a|0,b|0)|0}function XA(a,b){a=a|0;b=b|0;return da(372,a|0,b|0)|0}function YA(a,b){a=a|0;b=b|0;return da(373,a|0,b|0)|0}function ZA(a,b){a=a|0;b=b|0;return da(374,a|0,b|0)|0}function _A(a,b){a=a|0;b=b|0;return da(375,a|0,b|0)|0}function $A(a,b){a=a|0;b=b|0;return da(376,a|0,b|0)|0}function aB(a,b){a=a|0;b=b|0;return da(377,a|0,b|0)|0}function bB(a,b){a=a|0;b=b|0;return da(378,a|0,b|0)|0}function cB(a,b){a=a|0;b=b|0;return da(379,a|0,b|0)|0}function dB(a,b){a=a|0;b=b|0;return da(380,a|0,b|0)|0}function eB(a,b){a=a|0;b=b|0;return da(381,a|0,b|0)|0}function fB(a,b){a=a|0;b=b|0;return da(382,a|0,b|0)|0}function gB(a,b){a=a|0;b=b|0;return da(383,a|0,b|0)|0}function hB(a,b){a=a|0;b=b|0;return da(384,a|0,b|0)|0}function iB(a,b){a=a|0;b=b|0;return da(385,a|0,b|0)|0}function jB(a,b){a=a|0;b=b|0;return da(386,a|0,b|0)|0}function kB(a,b){a=a|0;b=b|0;return da(387,a|0,b|0)|0}function lB(a,b){a=a|0;b=b|0;return da(388,a|0,b|0)|0}function mB(a,b){a=a|0;b=b|0;return da(389,a|0,b|0)|0}function nB(a,b){a=a|0;b=b|0;return da(390,a|0,b|0)|0}function oB(a,b){a=a|0;b=b|0;return da(391,a|0,b|0)|0}function pB(a,b){a=a|0;b=b|0;return da(392,a|0,b|0)|0}function qB(a,b){a=a|0;b=b|0;return da(393,a|0,b|0)|0}function rB(a,b){a=a|0;b=b|0;return da(394,a|0,b|0)|0}function sB(a,b){a=a|0;b=b|0;return da(395,a|0,b|0)|0}function tB(a,b){a=a|0;b=b|0;return da(396,a|0,b|0)|0}function uB(a,b){a=a|0;b=b|0;return da(397,a|0,b|0)|0}function vB(a,b){a=a|0;b=b|0;return da(398,a|0,b|0)|0}function wB(a,b){a=a|0;b=b|0;return da(399,a|0,b|0)|0}function xB(a,b){a=a|0;b=b|0;return da(400,a|0,b|0)|0}function yB(a,b){a=a|0;b=b|0;return da(401,a|0,b|0)|0}function zB(a,b){a=a|0;b=b|0;return da(402,a|0,b|0)|0}function AB(a,b){a=a|0;b=b|0;return da(403,a|0,b|0)|0}function BB(a,b){a=a|0;b=b|0;return da(404,a|0,b|0)|0}function CB(a,b){a=a|0;b=b|0;return da(405,a|0,b|0)|0}function DB(a,b){a=a|0;b=b|0;return da(406,a|0,b|0)|0}function EB(a,b){a=a|0;b=b|0;return da(407,a|0,b|0)|0}function FB(a,b){a=a|0;b=b|0;return da(408,a|0,b|0)|0}function GB(a,b){a=a|0;b=b|0;return da(409,a|0,b|0)|0}function HB(a,b){a=a|0;b=b|0;return da(410,a|0,b|0)|0}function IB(a,b){a=a|0;b=b|0;return da(411,a|0,b|0)|0}function JB(a,b){a=a|0;b=b|0;return da(412,a|0,b|0)|0}function KB(a,b){a=a|0;b=b|0;return da(413,a|0,b|0)|0}function LB(a,b){a=a|0;b=b|0;return da(414,a|0,b|0)|0}function MB(a,b){a=a|0;b=b|0;return da(415,a|0,b|0)|0}function NB(a,b){a=a|0;b=b|0;return da(416,a|0,b|0)|0}function OB(a,b){a=a|0;b=b|0;return da(417,a|0,b|0)|0}function PB(a,b){a=a|0;b=b|0;return da(418,a|0,b|0)|0}function QB(a,b){a=a|0;b=b|0;return da(419,a|0,b|0)|0}function RB(a,b){a=a|0;b=b|0;return da(420,a|0,b|0)|0}function SB(a,b){a=a|0;b=b|0;return da(421,a|0,b|0)|0}function TB(a,b){a=a|0;b=b|0;return da(422,a|0,b|0)|0}function UB(a,b){a=a|0;b=b|0;return da(423,a|0,b|0)|0}function VB(a,b){a=a|0;b=b|0;return da(424,a|0,b|0)|0}function WB(a,b){a=a|0;b=b|0;return da(425,a|0,b|0)|0}function XB(a,b){a=a|0;b=b|0;return da(426,a|0,b|0)|0}function YB(a,b){a=a|0;b=b|0;return da(427,a|0,b|0)|0}function ZB(a,b){a=a|0;b=b|0;return da(428,a|0,b|0)|0}function _B(a,b){a=a|0;b=b|0;return da(429,a|0,b|0)|0}function $B(a,b){a=a|0;b=b|0;return da(430,a|0,b|0)|0}function aC(a,b){a=a|0;b=b|0;return da(431,a|0,b|0)|0}function bC(a,b){a=a|0;b=b|0;return da(432,a|0,b|0)|0}function cC(a,b){a=a|0;b=b|0;return da(433,a|0,b|0)|0}function dC(a,b){a=a|0;b=b|0;return da(434,a|0,b|0)|0}function eC(a,b){a=a|0;b=b|0;return da(435,a|0,b|0)|0}function fC(a,b){a=a|0;b=b|0;return da(436,a|0,b|0)|0}function gC(a,b){a=a|0;b=b|0;return da(437,a|0,b|0)|0}function hC(a,b){a=a|0;b=b|0;return da(438,a|0,b|0)|0}function iC(a,b){a=a|0;b=b|0;return da(439,a|0,b|0)|0}function jC(a,b){a=a|0;b=b|0;return da(440,a|0,b|0)|0}function kC(a,b){a=a|0;b=b|0;return da(441,a|0,b|0)|0}function lC(a,b){a=a|0;b=b|0;return da(442,a|0,b|0)|0}function mC(a,b){a=a|0;b=b|0;return da(443,a|0,b|0)|0}function nC(a,b){a=a|0;b=b|0;return da(444,a|0,b|0)|0}function oC(a,b){a=a|0;b=b|0;return da(445,a|0,b|0)|0}function pC(a,b){a=a|0;b=b|0;return da(446,a|0,b|0)|0}function qC(a,b){a=a|0;b=b|0;return da(447,a|0,b|0)|0}function rC(a,b){a=a|0;b=b|0;return da(448,a|0,b|0)|0}function sC(a,b){a=a|0;b=b|0;return da(449,a|0,b|0)|0}function tC(a,b){a=a|0;b=b|0;return da(450,a|0,b|0)|0}function uC(a,b){a=a|0;b=b|0;return da(451,a|0,b|0)|0}function vC(a,b){a=a|0;b=b|0;return da(452,a|0,b|0)|0}function wC(a,b){a=a|0;b=b|0;return da(453,a|0,b|0)|0}function xC(a,b){a=a|0;b=b|0;return da(454,a|0,b|0)|0}function yC(a,b){a=a|0;b=b|0;return da(455,a|0,b|0)|0}function zC(a,b){a=a|0;b=b|0;return da(456,a|0,b|0)|0}function AC(a,b){a=a|0;b=b|0;return da(457,a|0,b|0)|0}function BC(a,b){a=a|0;b=b|0;return da(458,a|0,b|0)|0}function CC(a,b){a=a|0;b=b|0;return da(459,a|0,b|0)|0}function DC(a,b){a=a|0;b=b|0;return da(460,a|0,b|0)|0}function EC(a,b){a=a|0;b=b|0;return da(461,a|0,b|0)|0}function FC(a,b){a=a|0;b=b|0;return da(462,a|0,b|0)|0}function GC(a,b){a=a|0;b=b|0;return da(463,a|0,b|0)|0}function HC(a,b){a=a|0;b=b|0;return da(464,a|0,b|0)|0}function IC(a,b){a=a|0;b=b|0;return da(465,a|0,b|0)|0}function JC(a,b){a=a|0;b=b|0;return da(466,a|0,b|0)|0}function KC(a,b){a=a|0;b=b|0;return da(467,a|0,b|0)|0}function LC(a,b){a=a|0;b=b|0;return da(468,a|0,b|0)|0}function MC(a,b){a=a|0;b=b|0;return da(469,a|0,b|0)|0}function NC(a,b){a=a|0;b=b|0;return da(470,a|0,b|0)|0}function OC(a,b){a=a|0;b=b|0;return da(471,a|0,b|0)|0}function PC(a,b){a=a|0;b=b|0;return da(472,a|0,b|0)|0}function QC(a,b){a=a|0;b=b|0;return da(473,a|0,b|0)|0}function RC(a,b){a=a|0;b=b|0;return da(474,a|0,b|0)|0}function SC(a,b){a=a|0;b=b|0;return da(475,a|0,b|0)|0}function TC(a,b){a=a|0;b=b|0;return da(476,a|0,b|0)|0}function UC(a,b){a=a|0;b=b|0;return da(477,a|0,b|0)|0}function VC(a,b){a=a|0;b=b|0;return da(478,a|0,b|0)|0}function WC(a,b){a=a|0;b=b|0;return da(479,a|0,b|0)|0}function XC(a,b){a=a|0;b=b|0;return da(480,a|0,b|0)|0}function YC(a,b){a=a|0;b=b|0;return da(481,a|0,b|0)|0}function ZC(a,b){a=a|0;b=b|0;return da(482,a|0,b|0)|0}function _C(a,b){a=a|0;b=b|0;return da(483,a|0,b|0)|0}function $C(a,b){a=a|0;b=b|0;return da(484,a|0,b|0)|0}function aD(a,b){a=a|0;b=b|0;return da(485,a|0,b|0)|0}function bD(a,b){a=a|0;b=b|0;return da(486,a|0,b|0)|0}function cD(a,b){a=a|0;b=b|0;return da(487,a|0,b|0)|0}function dD(a,b){a=a|0;b=b|0;return da(488,a|0,b|0)|0}function eD(a,b){a=a|0;b=b|0;return da(489,a|0,b|0)|0}function fD(a,b){a=a|0;b=b|0;return da(490,a|0,b|0)|0}function gD(a,b){a=a|0;b=b|0;return da(491,a|0,b|0)|0}function hD(a,b){a=a|0;b=b|0;return da(492,a|0,b|0)|0}function iD(a,b){a=a|0;b=b|0;return da(493,a|0,b|0)|0}function jD(a,b){a=a|0;b=b|0;return da(494,a|0,b|0)|0}function kD(a,b){a=a|0;b=b|0;return da(495,a|0,b|0)|0}function lD(a,b){a=a|0;b=b|0;return da(496,a|0,b|0)|0}function mD(a,b){a=a|0;b=b|0;return da(497,a|0,b|0)|0}function nD(a,b){a=a|0;b=b|0;return da(498,a|0,b|0)|0}function oD(a,b){a=a|0;b=b|0;return da(499,a|0,b|0)|0}function pD(a,b){a=a|0;b=b|0;return da(500,a|0,b|0)|0}function qD(a,b){a=a|0;b=b|0;return da(501,a|0,b|0)|0}function rD(a,b){a=a|0;b=b|0;return da(502,a|0,b|0)|0}function sD(a,b){a=a|0;b=b|0;return da(503,a|0,b|0)|0}function tD(a,b){a=a|0;b=b|0;return da(504,a|0,b|0)|0}function uD(a,b){a=a|0;b=b|0;return da(505,a|0,b|0)|0}function vD(a,b){a=a|0;b=b|0;return da(506,a|0,b|0)|0}function wD(a,b){a=a|0;b=b|0;return da(507,a|0,b|0)|0}function xD(a,b){a=a|0;b=b|0;return da(508,a|0,b|0)|0}function yD(a,b){a=a|0;b=b|0;return da(509,a|0,b|0)|0}function zD(a,b){a=a|0;b=b|0;return da(510,a|0,b|0)|0}function AD(a,b){a=a|0;b=b|0;return da(511,a|0,b|0)|0}function BD(a,b){a=a|0;b=b|0;return da(512,a|0,b|0)|0}function CD(a,b){a=a|0;b=b|0;return da(513,a|0,b|0)|0}function DD(a,b){a=a|0;b=b|0;return da(514,a|0,b|0)|0}function ED(a,b){a=a|0;b=b|0;return da(515,a|0,b|0)|0}function FD(a,b){a=a|0;b=b|0;return da(516,a|0,b|0)|0}function GD(a,b){a=a|0;b=b|0;return da(517,a|0,b|0)|0}function HD(a,b){a=a|0;b=b|0;return da(518,a|0,b|0)|0}function ID(a,b){a=a|0;b=b|0;return da(519,a|0,b|0)|0}function JD(a,b){a=a|0;b=b|0;return da(520,a|0,b|0)|0}function KD(a,b){a=a|0;b=b|0;return da(521,a|0,b|0)|0}function LD(a,b){a=a|0;b=b|0;return da(522,a|0,b|0)|0}function MD(a,b){a=a|0;b=b|0;return da(523,a|0,b|0)|0}function ND(a,b){a=a|0;b=b|0;return da(524,a|0,b|0)|0}function OD(a,b){a=a|0;b=b|0;return da(525,a|0,b|0)|0}function PD(a,b){a=a|0;b=b|0;return da(526,a|0,b|0)|0}function QD(a,b){a=a|0;b=b|0;return da(527,a|0,b|0)|0}function RD(a,b){a=a|0;b=b|0;return da(528,a|0,b|0)|0}function SD(a,b){a=a|0;b=b|0;return da(529,a|0,b|0)|0}function TD(a,b){a=a|0;b=b|0;return da(530,a|0,b|0)|0}function UD(a,b){a=a|0;b=b|0;return da(531,a|0,b|0)|0}function VD(a,b){a=a|0;b=b|0;return da(532,a|0,b|0)|0}function WD(a,b){a=a|0;b=b|0;return da(533,a|0,b|0)|0}function XD(a,b){a=a|0;b=b|0;return da(534,a|0,b|0)|0}function YD(a,b){a=a|0;b=b|0;return da(535,a|0,b|0)|0}function ZD(a,b){a=a|0;b=b|0;return da(536,a|0,b|0)|0}function _D(a,b){a=a|0;b=b|0;return da(537,a|0,b|0)|0}function $D(a,b){a=a|0;b=b|0;return da(538,a|0,b|0)|0}function aE(a,b){a=a|0;b=b|0;return da(539,a|0,b|0)|0}function bE(a,b){a=a|0;b=b|0;return da(540,a|0,b|0)|0}function cE(a,b){a=a|0;b=b|0;return da(541,a|0,b|0)|0}function dE(a,b){a=a|0;b=b|0;return da(542,a|0,b|0)|0}function eE(a,b){a=a|0;b=b|0;return da(543,a|0,b|0)|0}function fE(a,b){a=a|0;b=b|0;return da(544,a|0,b|0)|0}function gE(a,b){a=a|0;b=b|0;return da(545,a|0,b|0)|0}function hE(a,b){a=a|0;b=b|0;return da(546,a|0,b|0)|0}function iE(a,b){a=a|0;b=b|0;return da(547,a|0,b|0)|0}function jE(a,b){a=a|0;b=b|0;return da(548,a|0,b|0)|0}function kE(a,b){a=a|0;b=b|0;return da(549,a|0,b|0)|0}function lE(a,b){a=a|0;b=b|0;return da(550,a|0,b|0)|0}function mE(a,b){a=a|0;b=b|0;return da(551,a|0,b|0)|0}function nE(a,b){a=a|0;b=b|0;return da(552,a|0,b|0)|0}function oE(a,b){a=a|0;b=b|0;return da(553,a|0,b|0)|0}function pE(a,b){a=a|0;b=b|0;return da(554,a|0,b|0)|0}function qE(a,b){a=a|0;b=b|0;return da(555,a|0,b|0)|0}function rE(a,b){a=a|0;b=b|0;return da(556,a|0,b|0)|0}function sE(a,b){a=a|0;b=b|0;return da(557,a|0,b|0)|0}function tE(a,b){a=a|0;b=b|0;return da(558,a|0,b|0)|0}function uE(a,b){a=a|0;b=b|0;return da(559,a|0,b|0)|0}function vE(a,b){a=a|0;b=b|0;return da(560,a|0,b|0)|0}function wE(a,b){a=a|0;b=b|0;return da(561,a|0,b|0)|0}function xE(a,b){a=a|0;b=b|0;return da(562,a|0,b|0)|0}function yE(a,b){a=a|0;b=b|0;return da(563,a|0,b|0)|0}function zE(a,b){a=a|0;b=b|0;return da(564,a|0,b|0)|0}function AE(a,b){a=a|0;b=b|0;return da(565,a|0,b|0)|0}function BE(a,b){a=a|0;b=b|0;return da(566,a|0,b|0)|0}function CE(a,b){a=a|0;b=b|0;return da(567,a|0,b|0)|0}function DE(a,b){a=a|0;b=b|0;return da(568,a|0,b|0)|0}function EE(a,b){a=a|0;b=b|0;return da(569,a|0,b|0)|0}function FE(a,b){a=a|0;b=b|0;return da(570,a|0,b|0)|0}function GE(a,b){a=a|0;b=b|0;return da(571,a|0,b|0)|0}function HE(a,b){a=a|0;b=b|0;return da(572,a|0,b|0)|0}function IE(a,b){a=a|0;b=b|0;return da(573,a|0,b|0)|0}function JE(a,b){a=a|0;b=b|0;return da(574,a|0,b|0)|0}function KE(a,b){a=a|0;b=b|0;return da(575,a|0,b|0)|0}function LE(a,b){a=a|0;b=b|0;return da(576,a|0,b|0)|0}function ME(a,b){a=a|0;b=b|0;return da(577,a|0,b|0)|0}function NE(a,b){a=a|0;b=b|0;return da(578,a|0,b|0)|0}function OE(a,b){a=a|0;b=b|0;return da(579,a|0,b|0)|0}function PE(a,b){a=a|0;b=b|0;return da(580,a|0,b|0)|0}function QE(a,b){a=a|0;b=b|0;return da(581,a|0,b|0)|0}function RE(a,b){a=a|0;b=b|0;return da(582,a|0,b|0)|0}function SE(a,b){a=a|0;b=b|0;return da(583,a|0,b|0)|0}function TE(a,b){a=a|0;b=b|0;return da(584,a|0,b|0)|0}function UE(a,b){a=a|0;b=b|0;return da(585,a|0,b|0)|0}function VE(a,b){a=a|0;b=b|0;return da(586,a|0,b|0)|0}function WE(a,b){a=a|0;b=b|0;return da(587,a|0,b|0)|0}function XE(a,b){a=a|0;b=b|0;return da(588,a|0,b|0)|0}function YE(a,b){a=a|0;b=b|0;return da(589,a|0,b|0)|0}function ZE(a,b){a=a|0;b=b|0;return da(590,a|0,b|0)|0}function _E(a,b){a=a|0;b=b|0;return da(591,a|0,b|0)|0}function $E(a,b){a=a|0;b=b|0;return da(592,a|0,b|0)|0}function aF(a,b){a=a|0;b=b|0;return da(593,a|0,b|0)|0}function bF(a,b){a=a|0;b=b|0;return da(594,a|0,b|0)|0}function cF(a,b){a=a|0;b=b|0;return da(595,a|0,b|0)|0}function dF(a,b){a=a|0;b=b|0;return da(596,a|0,b|0)|0}function eF(a,b){a=a|0;b=b|0;return da(597,a|0,b|0)|0}function fF(a,b){a=a|0;b=b|0;return da(598,a|0,b|0)|0}function gF(a,b){a=a|0;b=b|0;return da(599,a|0,b|0)|0}function hF(a,b){a=a|0;b=b|0;return da(600,a|0,b|0)|0}function iF(a,b){a=a|0;b=b|0;return da(601,a|0,b|0)|0}function jF(a,b){a=a|0;b=b|0;return da(602,a|0,b|0)|0}function kF(a,b){a=a|0;b=b|0;return da(603,a|0,b|0)|0}function lF(a,b){a=a|0;b=b|0;return da(604,a|0,b|0)|0}function mF(a,b){a=a|0;b=b|0;return da(605,a|0,b|0)|0}function nF(a,b){a=a|0;b=b|0;return da(606,a|0,b|0)|0}function oF(a,b){a=a|0;b=b|0;return da(607,a|0,b|0)|0}function pF(a,b){a=a|0;b=b|0;return da(608,a|0,b|0)|0}function qF(a,b){a=a|0;b=b|0;return da(609,a|0,b|0)|0}function rF(a,b){a=a|0;b=b|0;return da(610,a|0,b|0)|0}function sF(a,b){a=a|0;b=b|0;return da(611,a|0,b|0)|0}function tF(a,b){a=a|0;b=b|0;return da(612,a|0,b|0)|0}function uF(a,b){a=a|0;b=b|0;return da(613,a|0,b|0)|0}function vF(a,b){a=a|0;b=b|0;return da(614,a|0,b|0)|0}function wF(a,b){a=a|0;b=b|0;return da(615,a|0,b|0)|0}function xF(a,b){a=a|0;b=b|0;return da(616,a|0,b|0)|0}function yF(a,b){a=a|0;b=b|0;return da(617,a|0,b|0)|0}function zF(a,b){a=a|0;b=b|0;return da(618,a|0,b|0)|0}function AF(a,b){a=a|0;b=b|0;return da(619,a|0,b|0)|0}function BF(a,b){a=a|0;b=b|0;return da(620,a|0,b|0)|0}function CF(a,b){a=a|0;b=b|0;return da(621,a|0,b|0)|0}function DF(a,b){a=a|0;b=b|0;return da(622,a|0,b|0)|0}function EF(a,b){a=a|0;b=b|0;return da(623,a|0,b|0)|0}function FF(a,b){a=a|0;b=b|0;return da(624,a|0,b|0)|0}function GF(a,b){a=a|0;b=b|0;return da(625,a|0,b|0)|0}function HF(a,b){a=a|0;b=b|0;return da(626,a|0,b|0)|0}function IF(a,b){a=a|0;b=b|0;return da(627,a|0,b|0)|0}function JF(a,b){a=a|0;b=b|0;return da(628,a|0,b|0)|0}function KF(a,b){a=a|0;b=b|0;return da(629,a|0,b|0)|0}function LF(a,b){a=a|0;b=b|0;return da(630,a|0,b|0)|0}function MF(a,b){a=a|0;b=b|0;return da(631,a|0,b|0)|0}function NF(a,b){a=a|0;b=b|0;return da(632,a|0,b|0)|0}function OF(a,b){a=a|0;b=b|0;return da(633,a|0,b|0)|0}function PF(a,b){a=a|0;b=b|0;return da(634,a|0,b|0)|0}function QF(a,b){a=a|0;b=b|0;return da(635,a|0,b|0)|0}function RF(a,b){a=a|0;b=b|0;return da(636,a|0,b|0)|0}function SF(a,b){a=a|0;b=b|0;return da(637,a|0,b|0)|0}function TF(a,b){a=a|0;b=b|0;return da(638,a|0,b|0)|0}function UF(a,b){a=a|0;b=b|0;return da(639,a|0,b|0)|0}function VF(a,b){a=a|0;b=b|0;return da(640,a|0,b|0)|0}function WF(a,b){a=a|0;b=b|0;return da(641,a|0,b|0)|0}function XF(a,b){a=a|0;b=b|0;return da(642,a|0,b|0)|0}function YF(a,b){a=a|0;b=b|0;return da(643,a|0,b|0)|0}function ZF(a,b){a=a|0;b=b|0;return da(644,a|0,b|0)|0}function _F(a,b){a=a|0;b=b|0;return da(645,a|0,b|0)|0}function $F(a,b){a=a|0;b=b|0;return da(646,a|0,b|0)|0}function aG(a,b){a=a|0;b=b|0;return da(647,a|0,b|0)|0}function bG(a,b){a=a|0;b=b|0;return da(648,a|0,b|0)|0}function cG(a,b){a=a|0;b=b|0;return da(649,a|0,b|0)|0}function dG(a,b){a=a|0;b=b|0;return da(650,a|0,b|0)|0}function eG(a,b){a=a|0;b=b|0;return da(651,a|0,b|0)|0}function fG(a,b){a=a|0;b=b|0;return da(652,a|0,b|0)|0}function gG(a,b){a=a|0;b=b|0;return da(653,a|0,b|0)|0}function hG(a,b){a=a|0;b=b|0;return da(654,a|0,b|0)|0}function iG(a,b){a=a|0;b=b|0;return da(655,a|0,b|0)|0}function jG(a,b){a=a|0;b=b|0;return da(656,a|0,b|0)|0}function kG(a,b){a=a|0;b=b|0;return da(657,a|0,b|0)|0}function lG(a,b){a=a|0;b=b|0;return da(658,a|0,b|0)|0}function mG(a,b){a=a|0;b=b|0;return da(659,a|0,b|0)|0}function nG(a,b){a=a|0;b=b|0;return da(660,a|0,b|0)|0}function oG(a,b){a=a|0;b=b|0;return da(661,a|0,b|0)|0}function pG(a,b){a=a|0;b=b|0;return da(662,a|0,b|0)|0}function qG(a,b){a=a|0;b=b|0;return da(663,a|0,b|0)|0}function rG(a,b){a=a|0;b=b|0;return da(664,a|0,b|0)|0}function sG(a,b){a=a|0;b=b|0;return da(665,a|0,b|0)|0}function tG(a,b){a=a|0;b=b|0;return da(666,a|0,b|0)|0}function uG(a,b){a=a|0;b=b|0;return da(667,a|0,b|0)|0}function vG(a,b){a=a|0;b=b|0;return da(668,a|0,b|0)|0}function wG(a,b){a=a|0;b=b|0;return da(669,a|0,b|0)|0}function xG(a,b){a=a|0;b=b|0;return da(670,a|0,b|0)|0}function yG(a,b){a=a|0;b=b|0;return da(671,a|0,b|0)|0}function zG(a,b){a=a|0;b=b|0;return da(672,a|0,b|0)|0}function AG(a,b){a=a|0;b=b|0;return da(673,a|0,b|0)|0}function BG(a,b){a=a|0;b=b|0;return da(674,a|0,b|0)|0}function CG(a,b){a=a|0;b=b|0;return da(675,a|0,b|0)|0}function DG(a,b){a=a|0;b=b|0;return da(676,a|0,b|0)|0}function EG(a,b){a=a|0;b=b|0;return da(677,a|0,b|0)|0}function FG(a,b){a=a|0;b=b|0;return da(678,a|0,b|0)|0}function GG(a,b){a=a|0;b=b|0;return da(679,a|0,b|0)|0}function HG(a,b){a=a|0;b=b|0;return da(680,a|0,b|0)|0}function IG(a,b){a=a|0;b=b|0;return da(681,a|0,b|0)|0}function JG(a,b){a=a|0;b=b|0;return da(682,a|0,b|0)|0}function KG(a,b){a=a|0;b=b|0;return da(683,a|0,b|0)|0}function LG(a,b){a=a|0;b=b|0;return da(684,a|0,b|0)|0}function MG(a,b){a=a|0;b=b|0;return da(685,a|0,b|0)|0}function NG(a,b){a=a|0;b=b|0;return da(686,a|0,b|0)|0}function OG(a,b){a=a|0;b=b|0;return da(687,a|0,b|0)|0}function PG(a,b){a=a|0;b=b|0;return da(688,a|0,b|0)|0}function QG(a,b){a=a|0;b=b|0;return da(689,a|0,b|0)|0}function RG(a,b){a=a|0;b=b|0;return da(690,a|0,b|0)|0}function SG(a,b){a=a|0;b=b|0;return da(691,a|0,b|0)|0}function TG(a,b){a=a|0;b=b|0;return da(692,a|0,b|0)|0}function UG(a,b){a=a|0;b=b|0;return da(693,a|0,b|0)|0}function VG(a,b){a=a|0;b=b|0;return da(694,a|0,b|0)|0}function WG(a,b){a=a|0;b=b|0;return da(695,a|0,b|0)|0}function XG(a,b){a=a|0;b=b|0;return da(696,a|0,b|0)|0}function YG(a,b){a=a|0;b=b|0;return da(697,a|0,b|0)|0}function ZG(a,b){a=a|0;b=b|0;return da(698,a|0,b|0)|0}function _G(a,b){a=a|0;b=b|0;return da(699,a|0,b|0)|0}function $G(a,b){a=a|0;b=b|0;return da(700,a|0,b|0)|0}function aH(a,b){a=a|0;b=b|0;return da(701,a|0,b|0)|0}function bH(a,b){a=a|0;b=b|0;return da(702,a|0,b|0)|0}function cH(a,b){a=a|0;b=b|0;return da(703,a|0,b|0)|0}function dH(a,b){a=a|0;b=b|0;return da(704,a|0,b|0)|0}function eH(a,b){a=a|0;b=b|0;return da(705,a|0,b|0)|0}function fH(a,b){a=a|0;b=b|0;return da(706,a|0,b|0)|0}function gH(a,b){a=a|0;b=b|0;return da(707,a|0,b|0)|0}function hH(a,b){a=a|0;b=b|0;return da(708,a|0,b|0)|0}function iH(a,b){a=a|0;b=b|0;return da(709,a|0,b|0)|0}function jH(a,b){a=a|0;b=b|0;return da(710,a|0,b|0)|0}function kH(a,b){a=a|0;b=b|0;return da(711,a|0,b|0)|0}function lH(a,b){a=a|0;b=b|0;return da(712,a|0,b|0)|0}function mH(a,b){a=a|0;b=b|0;return da(713,a|0,b|0)|0}function nH(a,b){a=a|0;b=b|0;return da(714,a|0,b|0)|0}function oH(a,b){a=a|0;b=b|0;return da(715,a|0,b|0)|0}function pH(a,b){a=a|0;b=b|0;return da(716,a|0,b|0)|0}function qH(a,b){a=a|0;b=b|0;return da(717,a|0,b|0)|0}function rH(a,b){a=a|0;b=b|0;return da(718,a|0,b|0)|0}function sH(a,b){a=a|0;b=b|0;return da(719,a|0,b|0)|0}function tH(a,b){a=a|0;b=b|0;return da(720,a|0,b|0)|0}function uH(a,b){a=a|0;b=b|0;return da(721,a|0,b|0)|0}function vH(a,b){a=a|0;b=b|0;return da(722,a|0,b|0)|0}function wH(a,b){a=a|0;b=b|0;return da(723,a|0,b|0)|0}function xH(a,b){a=a|0;b=b|0;return da(724,a|0,b|0)|0}function yH(a,b){a=a|0;b=b|0;return da(725,a|0,b|0)|0}function zH(a,b){a=a|0;b=b|0;return da(726,a|0,b|0)|0}function AH(a,b){a=a|0;b=b|0;return da(727,a|0,b|0)|0}function BH(a,b){a=a|0;b=b|0;return da(728,a|0,b|0)|0}function CH(a,b){a=a|0;b=b|0;return da(729,a|0,b|0)|0}function DH(a,b){a=a|0;b=b|0;return da(730,a|0,b|0)|0}function EH(a,b){a=a|0;b=b|0;return da(731,a|0,b|0)|0}function FH(a,b){a=a|0;b=b|0;return da(732,a|0,b|0)|0}function GH(a,b){a=a|0;b=b|0;return da(733,a|0,b|0)|0}function HH(a,b){a=a|0;b=b|0;return da(734,a|0,b|0)|0}function IH(a,b){a=a|0;b=b|0;return da(735,a|0,b|0)|0}function JH(a,b){a=a|0;b=b|0;return da(736,a|0,b|0)|0}function KH(a,b){a=a|0;b=b|0;return da(737,a|0,b|0)|0}function LH(a,b){a=a|0;b=b|0;return da(738,a|0,b|0)|0}function MH(a,b){a=a|0;b=b|0;return da(739,a|0,b|0)|0}function NH(a,b){a=a|0;b=b|0;return da(740,a|0,b|0)|0}function OH(a,b){a=a|0;b=b|0;return da(741,a|0,b|0)|0}function PH(a,b){a=a|0;b=b|0;return da(742,a|0,b|0)|0}function QH(a,b){a=a|0;b=b|0;return da(743,a|0,b|0)|0}function RH(a,b){a=a|0;b=b|0;return da(744,a|0,b|0)|0}function SH(a,b){a=a|0;b=b|0;return da(745,a|0,b|0)|0}function TH(a,b){a=a|0;b=b|0;return da(746,a|0,b|0)|0}function UH(a,b){a=a|0;b=b|0;return da(747,a|0,b|0)|0}function VH(a,b){a=a|0;b=b|0;return da(748,a|0,b|0)|0}function WH(a,b){a=a|0;b=b|0;return da(749,a|0,b|0)|0}function XH(a,b){a=a|0;b=b|0;return da(750,a|0,b|0)|0}function YH(a,b){a=a|0;b=b|0;return da(751,a|0,b|0)|0}function ZH(a,b){a=a|0;b=b|0;return da(752,a|0,b|0)|0}function _H(a,b){a=a|0;b=b|0;return da(753,a|0,b|0)|0}function $H(a,b){a=a|0;b=b|0;return da(754,a|0,b|0)|0}function aI(a,b){a=a|0;b=b|0;return da(755,a|0,b|0)|0}function bI(a,b){a=a|0;b=b|0;return da(756,a|0,b|0)|0}function cI(a,b){a=a|0;b=b|0;return da(757,a|0,b|0)|0}function dI(a,b){a=a|0;b=b|0;return da(758,a|0,b|0)|0}function eI(a,b){a=a|0;b=b|0;return da(759,a|0,b|0)|0}function fI(a,b){a=a|0;b=b|0;return da(760,a|0,b|0)|0}function gI(a,b){a=a|0;b=b|0;return da(761,a|0,b|0)|0}function hI(a,b){a=a|0;b=b|0;return da(762,a|0,b|0)|0}function iI(a,b){a=a|0;b=b|0;return da(763,a|0,b|0)|0}function jI(a,b){a=a|0;b=b|0;return da(764,a|0,b|0)|0}function kI(a,b){a=a|0;b=b|0;return da(765,a|0,b|0)|0}function lI(a,b){a=a|0;b=b|0;return da(766,a|0,b|0)|0}function mI(a,b){a=a|0;b=b|0;return da(767,a|0,b|0)|0}function nI(a,b){a=a|0;b=b|0;return da(768,a|0,b|0)|0}function oI(a,b){a=a|0;b=b|0;return da(769,a|0,b|0)|0}function pI(a,b){a=a|0;b=b|0;return da(770,a|0,b|0)|0}function qI(a,b){a=a|0;b=b|0;return da(771,a|0,b|0)|0}function rI(a,b){a=a|0;b=b|0;return da(772,a|0,b|0)|0}function sI(a,b){a=a|0;b=b|0;return da(773,a|0,b|0)|0}function tI(a,b){a=a|0;b=b|0;return da(774,a|0,b|0)|0}function uI(a,b){a=a|0;b=b|0;return da(775,a|0,b|0)|0}function vI(a,b){a=a|0;b=b|0;return da(776,a|0,b|0)|0}function wI(a,b){a=a|0;b=b|0;return da(777,a|0,b|0)|0}function xI(a,b){a=a|0;b=b|0;return da(778,a|0,b|0)|0}function yI(a,b){a=a|0;b=b|0;return da(779,a|0,b|0)|0}function zI(a,b){a=a|0;b=b|0;return da(780,a|0,b|0)|0}function AI(a,b){a=a|0;b=b|0;return da(781,a|0,b|0)|0}function BI(a,b){a=a|0;b=b|0;return da(782,a|0,b|0)|0}function CI(a,b){a=a|0;b=b|0;return da(783,a|0,b|0)|0}function DI(a,b){a=a|0;b=b|0;return da(784,a|0,b|0)|0}function EI(a,b){a=a|0;b=b|0;return da(785,a|0,b|0)|0}function FI(a,b){a=a|0;b=b|0;return da(786,a|0,b|0)|0}function GI(a,b){a=a|0;b=b|0;return da(787,a|0,b|0)|0}function HI(a,b){a=a|0;b=b|0;return da(788,a|0,b|0)|0}function II(a,b){a=a|0;b=b|0;return da(789,a|0,b|0)|0}function JI(a,b){a=a|0;b=b|0;return da(790,a|0,b|0)|0}function KI(a,b){a=a|0;b=b|0;return da(791,a|0,b|0)|0}function LI(a,b){a=a|0;b=b|0;return da(792,a|0,b|0)|0}function MI(a,b){a=a|0;b=b|0;return da(793,a|0,b|0)|0}function NI(a,b){a=a|0;b=b|0;return da(794,a|0,b|0)|0}function OI(a,b){a=a|0;b=b|0;return da(795,a|0,b|0)|0}function PI(a,b){a=a|0;b=b|0;return da(796,a|0,b|0)|0}function QI(a,b){a=a|0;b=b|0;return da(797,a|0,b|0)|0}function RI(a,b){a=a|0;b=b|0;return da(798,a|0,b|0)|0}function SI(a,b){a=a|0;b=b|0;return da(799,a|0,b|0)|0}function TI(a,b){a=a|0;b=b|0;return da(800,a|0,b|0)|0}function UI(a,b){a=a|0;b=b|0;return da(801,a|0,b|0)|0}function VI(a,b){a=a|0;b=b|0;return da(802,a|0,b|0)|0}function WI(a,b){a=a|0;b=b|0;return da(803,a|0,b|0)|0}function XI(a,b){a=a|0;b=b|0;return da(804,a|0,b|0)|0}function YI(a,b){a=a|0;b=b|0;return da(805,a|0,b|0)|0}function ZI(a,b){a=a|0;b=b|0;return da(806,a|0,b|0)|0}function _I(a,b){a=a|0;b=b|0;return da(807,a|0,b|0)|0}function $I(a,b){a=a|0;b=b|0;return da(808,a|0,b|0)|0}function aJ(a,b){a=a|0;b=b|0;return da(809,a|0,b|0)|0}function bJ(a,b){a=a|0;b=b|0;return da(810,a|0,b|0)|0}function cJ(a,b){a=a|0;b=b|0;return da(811,a|0,b|0)|0}function dJ(a,b){a=a|0;b=b|0;return da(812,a|0,b|0)|0}function eJ(a,b){a=a|0;b=b|0;return da(813,a|0,b|0)|0}function fJ(a,b){a=a|0;b=b|0;return da(814,a|0,b|0)|0}function gJ(a,b){a=a|0;b=b|0;return da(815,a|0,b|0)|0}function hJ(a,b){a=a|0;b=b|0;return da(816,a|0,b|0)|0}function iJ(a,b){a=a|0;b=b|0;return da(817,a|0,b|0)|0}function jJ(a,b){a=a|0;b=b|0;return da(818,a|0,b|0)|0}function kJ(a,b){a=a|0;b=b|0;return da(819,a|0,b|0)|0}function lJ(a,b){a=a|0;b=b|0;return da(820,a|0,b|0)|0}function mJ(a,b){a=a|0;b=b|0;return da(821,a|0,b|0)|0}function nJ(a,b){a=a|0;b=b|0;return da(822,a|0,b|0)|0}function oJ(a,b){a=a|0;b=b|0;return da(823,a|0,b|0)|0}function pJ(a,b){a=a|0;b=b|0;return da(824,a|0,b|0)|0}function qJ(a,b){a=a|0;b=b|0;return da(825,a|0,b|0)|0}function rJ(a,b){a=a|0;b=b|0;return da(826,a|0,b|0)|0}function sJ(a,b){a=a|0;b=b|0;return da(827,a|0,b|0)|0}function tJ(a,b){a=a|0;b=b|0;return da(828,a|0,b|0)|0}function uJ(a,b){a=a|0;b=b|0;return da(829,a|0,b|0)|0}function vJ(a,b){a=a|0;b=b|0;return da(830,a|0,b|0)|0}function wJ(a,b){a=a|0;b=b|0;return da(831,a|0,b|0)|0}function xJ(a,b){a=a|0;b=b|0;return da(832,a|0,b|0)|0}function yJ(a,b){a=a|0;b=b|0;return da(833,a|0,b|0)|0}function zJ(a,b){a=a|0;b=b|0;return da(834,a|0,b|0)|0}function AJ(a,b){a=a|0;b=b|0;return da(835,a|0,b|0)|0}function BJ(a,b){a=a|0;b=b|0;return da(836,a|0,b|0)|0}function CJ(a,b){a=a|0;b=b|0;return da(837,a|0,b|0)|0}function DJ(a,b){a=a|0;b=b|0;return da(838,a|0,b|0)|0}function EJ(a,b){a=a|0;b=b|0;return da(839,a|0,b|0)|0}function FJ(a,b){a=a|0;b=b|0;return da(840,a|0,b|0)|0}function GJ(a,b){a=a|0;b=b|0;return da(841,a|0,b|0)|0}function HJ(a,b){a=a|0;b=b|0;return da(842,a|0,b|0)|0}function IJ(a,b){a=a|0;b=b|0;return da(843,a|0,b|0)|0}function JJ(a,b){a=a|0;b=b|0;return da(844,a|0,b|0)|0}function KJ(a,b){a=a|0;b=b|0;return da(845,a|0,b|0)|0}function LJ(a,b){a=a|0;b=b|0;return da(846,a|0,b|0)|0}function MJ(a,b){a=a|0;b=b|0;return da(847,a|0,b|0)|0}function NJ(a,b){a=a|0;b=b|0;return da(848,a|0,b|0)|0}function OJ(a,b){a=a|0;b=b|0;return da(849,a|0,b|0)|0}function PJ(a,b){a=a|0;b=b|0;return da(850,a|0,b|0)|0}function QJ(a,b){a=a|0;b=b|0;return da(851,a|0,b|0)|0}function RJ(a,b){a=a|0;b=b|0;return da(852,a|0,b|0)|0}function SJ(a,b){a=a|0;b=b|0;return da(853,a|0,b|0)|0}function TJ(a,b){a=a|0;b=b|0;return da(854,a|0,b|0)|0}function UJ(a,b){a=a|0;b=b|0;return da(855,a|0,b|0)|0}function VJ(a,b){a=a|0;b=b|0;return da(856,a|0,b|0)|0}function WJ(a,b){a=a|0;b=b|0;return da(857,a|0,b|0)|0}function XJ(a,b){a=a|0;b=b|0;return da(858,a|0,b|0)|0}function YJ(a,b){a=a|0;b=b|0;return da(859,a|0,b|0)|0}function ZJ(a,b){a=a|0;b=b|0;return da(860,a|0,b|0)|0}function _J(a,b){a=a|0;b=b|0;return da(861,a|0,b|0)|0}function $J(a,b){a=a|0;b=b|0;return da(862,a|0,b|0)|0}function aK(a,b){a=a|0;b=b|0;return da(863,a|0,b|0)|0}function bK(a,b){a=a|0;b=b|0;return da(864,a|0,b|0)|0}function cK(a,b){a=a|0;b=b|0;return da(865,a|0,b|0)|0}function dK(a,b){a=a|0;b=b|0;return da(866,a|0,b|0)|0}function eK(a,b){a=a|0;b=b|0;return da(867,a|0,b|0)|0}function fK(a,b){a=a|0;b=b|0;return da(868,a|0,b|0)|0}function gK(a,b){a=a|0;b=b|0;return da(869,a|0,b|0)|0}function hK(a,b){a=a|0;b=b|0;return da(870,a|0,b|0)|0}function iK(a,b){a=a|0;b=b|0;return da(871,a|0,b|0)|0}function jK(a,b){a=a|0;b=b|0;return da(872,a|0,b|0)|0}function kK(a,b){a=a|0;b=b|0;return da(873,a|0,b|0)|0}function lK(a,b){a=a|0;b=b|0;return da(874,a|0,b|0)|0}function mK(a,b){a=a|0;b=b|0;return da(875,a|0,b|0)|0}function nK(a,b){a=a|0;b=b|0;return da(876,a|0,b|0)|0}function oK(a,b){a=a|0;b=b|0;return da(877,a|0,b|0)|0}function pK(a,b){a=a|0;b=b|0;return da(878,a|0,b|0)|0}function qK(a,b){a=a|0;b=b|0;return da(879,a|0,b|0)|0}function rK(a,b){a=a|0;b=b|0;return da(880,a|0,b|0)|0}function sK(a,b){a=a|0;b=b|0;return da(881,a|0,b|0)|0}function tK(a,b){a=a|0;b=b|0;return da(882,a|0,b|0)|0}function uK(a,b){a=a|0;b=b|0;return da(883,a|0,b|0)|0}function vK(a,b){a=a|0;b=b|0;return da(884,a|0,b|0)|0}function wK(a,b){a=a|0;b=b|0;return da(885,a|0,b|0)|0}function xK(a,b){a=a|0;b=b|0;return da(886,a|0,b|0)|0}function yK(a,b){a=a|0;b=b|0;return da(887,a|0,b|0)|0}function zK(a,b){a=a|0;b=b|0;return da(888,a|0,b|0)|0}function AK(a,b){a=a|0;b=b|0;return da(889,a|0,b|0)|0}function BK(a,b){a=a|0;b=b|0;return da(890,a|0,b|0)|0}function CK(a,b){a=a|0;b=b|0;return da(891,a|0,b|0)|0}function DK(a,b){a=a|0;b=b|0;return da(892,a|0,b|0)|0}function EK(a,b){a=a|0;b=b|0;return da(893,a|0,b|0)|0}function FK(a,b){a=a|0;b=b|0;return da(894,a|0,b|0)|0}function GK(a,b){a=a|0;b=b|0;return da(895,a|0,b|0)|0}function HK(a,b){a=a|0;b=b|0;return da(896,a|0,b|0)|0}function IK(a,b){a=a|0;b=b|0;return da(897,a|0,b|0)|0}function JK(a,b){a=a|0;b=b|0;return da(898,a|0,b|0)|0}function KK(a,b){a=a|0;b=b|0;return da(899,a|0,b|0)|0}function LK(a,b){a=a|0;b=b|0;return da(900,a|0,b|0)|0}function MK(a,b){a=a|0;b=b|0;return da(901,a|0,b|0)|0}function NK(a,b){a=a|0;b=b|0;return da(902,a|0,b|0)|0}function OK(a,b){a=a|0;b=b|0;return da(903,a|0,b|0)|0}function PK(a,b){a=a|0;b=b|0;return da(904,a|0,b|0)|0}function QK(a,b){a=a|0;b=b|0;return da(905,a|0,b|0)|0}function RK(a,b){a=a|0;b=b|0;return da(906,a|0,b|0)|0}function SK(a,b){a=a|0;b=b|0;return da(907,a|0,b|0)|0}function TK(a,b){a=a|0;b=b|0;return da(908,a|0,b|0)|0}function UK(a,b){a=a|0;b=b|0;return da(909,a|0,b|0)|0}function VK(a,b){a=a|0;b=b|0;return da(910,a|0,b|0)|0}function WK(a,b){a=a|0;b=b|0;return da(911,a|0,b|0)|0}function XK(a,b){a=a|0;b=b|0;return da(912,a|0,b|0)|0}function YK(a,b){a=a|0;b=b|0;return da(913,a|0,b|0)|0}function ZK(a,b){a=a|0;b=b|0;return da(914,a|0,b|0)|0}function _K(a,b){a=a|0;b=b|0;return da(915,a|0,b|0)|0}function $K(a,b){a=a|0;b=b|0;return da(916,a|0,b|0)|0}function aL(a,b){a=a|0;b=b|0;return da(917,a|0,b|0)|0}function bL(a,b){a=a|0;b=b|0;return da(918,a|0,b|0)|0}function cL(a,b){a=a|0;b=b|0;return da(919,a|0,b|0)|0}function dL(a,b){a=a|0;b=b|0;return da(920,a|0,b|0)|0}function eL(a,b){a=a|0;b=b|0;return da(921,a|0,b|0)|0}function fL(a,b){a=a|0;b=b|0;return da(922,a|0,b|0)|0}function gL(a,b){a=a|0;b=b|0;return da(923,a|0,b|0)|0}function hL(a,b){a=a|0;b=b|0;return da(924,a|0,b|0)|0}function iL(a,b){a=a|0;b=b|0;return da(925,a|0,b|0)|0}function jL(a,b){a=a|0;b=b|0;return da(926,a|0,b|0)|0}function kL(a,b){a=a|0;b=b|0;return da(927,a|0,b|0)|0}function lL(a,b){a=a|0;b=b|0;return da(928,a|0,b|0)|0}function mL(a,b){a=a|0;b=b|0;return da(929,a|0,b|0)|0}function nL(a,b){a=a|0;b=b|0;return da(930,a|0,b|0)|0}function oL(a,b){a=a|0;b=b|0;return da(931,a|0,b|0)|0}function pL(a,b){a=a|0;b=b|0;return da(932,a|0,b|0)|0}function qL(a,b){a=a|0;b=b|0;return da(933,a|0,b|0)|0}function rL(a,b){a=a|0;b=b|0;return da(934,a|0,b|0)|0}function sL(a,b){a=a|0;b=b|0;return da(935,a|0,b|0)|0}function tL(a,b){a=a|0;b=b|0;return da(936,a|0,b|0)|0}function uL(a,b){a=a|0;b=b|0;return da(937,a|0,b|0)|0}function vL(a,b){a=a|0;b=b|0;return da(938,a|0,b|0)|0}function wL(a,b){a=a|0;b=b|0;return da(939,a|0,b|0)|0}function xL(a,b){a=a|0;b=b|0;return da(940,a|0,b|0)|0}function yL(a,b){a=a|0;b=b|0;return da(941,a|0,b|0)|0}function zL(a,b){a=a|0;b=b|0;return da(942,a|0,b|0)|0}function AL(a,b){a=a|0;b=b|0;return da(943,a|0,b|0)|0}function BL(a,b){a=a|0;b=b|0;return da(944,a|0,b|0)|0}function CL(a,b){a=a|0;b=b|0;return da(945,a|0,b|0)|0}function DL(a,b){a=a|0;b=b|0;return da(946,a|0,b|0)|0}function EL(a,b){a=a|0;b=b|0;return da(947,a|0,b|0)|0}function FL(a,b){a=a|0;b=b|0;return da(948,a|0,b|0)|0}function GL(a,b){a=a|0;b=b|0;return da(949,a|0,b|0)|0}function HL(a,b){a=a|0;b=b|0;return da(950,a|0,b|0)|0}function IL(a,b){a=a|0;b=b|0;return da(951,a|0,b|0)|0}function JL(a,b){a=a|0;b=b|0;return da(952,a|0,b|0)|0}function KL(a,b){a=a|0;b=b|0;return da(953,a|0,b|0)|0}function LL(a,b){a=a|0;b=b|0;return da(954,a|0,b|0)|0}function ML(a,b){a=a|0;b=b|0;return da(955,a|0,b|0)|0}function NL(a,b){a=a|0;b=b|0;return da(956,a|0,b|0)|0}function OL(a,b){a=a|0;b=b|0;return da(957,a|0,b|0)|0}function PL(a,b){a=a|0;b=b|0;return da(958,a|0,b|0)|0}function QL(a,b){a=a|0;b=b|0;return da(959,a|0,b|0)|0}function RL(a,b){a=a|0;b=b|0;return da(960,a|0,b|0)|0}function SL(a,b){a=a|0;b=b|0;return da(961,a|0,b|0)|0}function TL(a,b){a=a|0;b=b|0;return da(962,a|0,b|0)|0}function UL(a,b){a=a|0;b=b|0;return da(963,a|0,b|0)|0}function VL(a,b){a=a|0;b=b|0;return da(964,a|0,b|0)|0}function WL(a,b){a=a|0;b=b|0;return da(965,a|0,b|0)|0}function XL(a,b){a=a|0;b=b|0;return da(966,a|0,b|0)|0}function YL(a,b){a=a|0;b=b|0;return da(967,a|0,b|0)|0}function ZL(a,b){a=a|0;b=b|0;return da(968,a|0,b|0)|0}function _L(a,b){a=a|0;b=b|0;return da(969,a|0,b|0)|0}function $L(a,b){a=a|0;b=b|0;return da(970,a|0,b|0)|0}function aM(a,b){a=a|0;b=b|0;return da(971,a|0,b|0)|0}function bM(a,b){a=a|0;b=b|0;return da(972,a|0,b|0)|0}function cM(a,b){a=a|0;b=b|0;return da(973,a|0,b|0)|0}function dM(a,b){a=a|0;b=b|0;return da(974,a|0,b|0)|0}function eM(a,b){a=a|0;b=b|0;return da(975,a|0,b|0)|0}function fM(a,b){a=a|0;b=b|0;return da(976,a|0,b|0)|0}function gM(a,b){a=a|0;b=b|0;return da(977,a|0,b|0)|0}function hM(a,b){a=a|0;b=b|0;return da(978,a|0,b|0)|0}function iM(a,b){a=a|0;b=b|0;return da(979,a|0,b|0)|0}function jM(a,b){a=a|0;b=b|0;return da(980,a|0,b|0)|0}function kM(a,b){a=a|0;b=b|0;return da(981,a|0,b|0)|0}function lM(a,b){a=a|0;b=b|0;return da(982,a|0,b|0)|0}function mM(a,b){a=a|0;b=b|0;return da(983,a|0,b|0)|0}function nM(a,b){a=a|0;b=b|0;return da(984,a|0,b|0)|0}function oM(a,b){a=a|0;b=b|0;return da(985,a|0,b|0)|0}function pM(a,b){a=a|0;b=b|0;return da(986,a|0,b|0)|0}function qM(a,b){a=a|0;b=b|0;return da(987,a|0,b|0)|0}function rM(a,b){a=a|0;b=b|0;return da(988,a|0,b|0)|0}function sM(a,b){a=a|0;b=b|0;return da(989,a|0,b|0)|0}function tM(a,b){a=a|0;b=b|0;return da(990,a|0,b|0)|0}function uM(a,b){a=a|0;b=b|0;return da(991,a|0,b|0)|0}function vM(a,b){a=a|0;b=b|0;return da(992,a|0,b|0)|0}function wM(a,b){a=a|0;b=b|0;return da(993,a|0,b|0)|0}function xM(a,b){a=a|0;b=b|0;return da(994,a|0,b|0)|0}function yM(a,b){a=a|0;b=b|0;return da(995,a|0,b|0)|0}function zM(a,b){a=a|0;b=b|0;return da(996,a|0,b|0)|0}function AM(a,b){a=a|0;b=b|0;return da(997,a|0,b|0)|0}function BM(a,b){a=a|0;b=b|0;return da(998,a|0,b|0)|0}function CM(a,b){a=a|0;b=b|0;return da(999,a|0,b|0)|0}function DM(a,b){a=a|0;b=b|0;return da(1e3,a|0,b|0)|0}function EM(a,b){a=a|0;b=b|0;return da(1001,a|0,b|0)|0}function FM(a,b){a=a|0;b=b|0;return da(1002,a|0,b|0)|0}function GM(a,b){a=a|0;b=b|0;return da(1003,a|0,b|0)|0}function HM(a,b){a=a|0;b=b|0;return da(1004,a|0,b|0)|0}function IM(a,b){a=a|0;b=b|0;return da(1005,a|0,b|0)|0}function JM(a,b){a=a|0;b=b|0;return da(1006,a|0,b|0)|0}function KM(a,b){a=a|0;b=b|0;return da(1007,a|0,b|0)|0}function LM(a,b){a=a|0;b=b|0;return da(1008,a|0,b|0)|0}function MM(a,b){a=a|0;b=b|0;return da(1009,a|0,b|0)|0}function NM(a,b){a=a|0;b=b|0;return da(1010,a|0,b|0)|0}function OM(a,b){a=a|0;b=b|0;return da(1011,a|0,b|0)|0}function PM(a,b){a=a|0;b=b|0;return da(1012,a|0,b|0)|0}function QM(a,b){a=a|0;b=b|0;return da(1013,a|0,b|0)|0}function RM(a,b){a=a|0;b=b|0;return da(1014,a|0,b|0)|0}function SM(a,b){a=a|0;b=b|0;return da(1015,a|0,b|0)|0}function TM(a,b){a=a|0;b=b|0;return da(1016,a|0,b|0)|0}function UM(a,b){a=a|0;b=b|0;return da(1017,a|0,b|0)|0}function VM(a,b){a=a|0;b=b|0;return da(1018,a|0,b|0)|0}function WM(a,b){a=a|0;b=b|0;return da(1019,a|0,b|0)|0}function XM(a,b){a=a|0;b=b|0;return da(1020,a|0,b|0)|0}function YM(a,b){a=a|0;b=b|0;return da(1021,a|0,b|0)|0}function ZM(a,b){a=a|0;b=b|0;return da(1022,a|0,b|0)|0}function _M(a,b){a=a|0;b=b|0;return da(1023,a|0,b|0)|0}function $M(a,b){a=a|0;b=b|0;_(0)}function aN(a,b){a=a|0;b=b|0;_(1);return 0}




// EMSCRIPTEN_END_FUNCS
var qa=[$M,$M,$a,$M,ab,$M,bb,$M,cb,$M,db,$M,eb,$M,fb,$M,gb,$M,hb,$M,ib,$M,jb,$M,kb,$M,lb,$M,mb,$M,nb,$M,ob,$M,pb,$M,qb,$M,rb,$M,sb,$M,tb,$M,ub,$M,vb,$M,wb,$M,xb,$M,yb,$M,zb,$M,Ab,$M,Bb,$M,Cb,$M,Db,$M,Eb,$M,Fb,$M,Gb,$M,Hb,$M,Ib,$M,Jb,$M,Kb,$M,Lb,$M,Mb,$M,Nb,$M,Ob,$M,Pb,$M,Qb,$M,Rb,$M,Sb,$M,Tb,$M,Ub,$M,Vb,$M,Wb,$M,Xb,$M,Yb,$M,Zb,$M,_b,$M,$b,$M,ac,$M,bc,$M,cc,$M,dc,$M,ec,$M,fc,$M,gc,$M,hc,$M,ic,$M,jc,$M,kc,$M,lc,$M,mc,$M,nc,$M,oc,$M,pc,$M,qc,$M,rc,$M,sc,$M,tc,$M,uc,$M,vc,$M,wc,$M,xc,$M,yc,$M,zc,$M,Ac,$M,Bc,$M,Cc,$M,Dc,$M,Ec,$M,Fc,$M,Gc,$M,Hc,$M,Ic,$M,Jc,$M,Kc,$M,Lc,$M,Mc,$M,Nc,$M,Oc,$M,Pc,$M,Qc,$M,Rc,$M,Sc,$M,Tc,$M,Uc,$M,Vc,$M,Wc,$M,Xc,$M,Yc,$M,Zc,$M,_c,$M,$c,$M,ad,$M,bd,$M,cd,$M,dd,$M,ed,$M,fd,$M,gd,$M,hd,$M,id,$M,jd,$M,kd,$M,ld,$M,md,$M,nd,$M,od,$M,pd,$M,qd,$M,rd,$M,sd,$M,td,$M,ud,$M,vd,$M,wd,$M,xd,$M,yd,$M,zd,$M,Ad,$M,Bd,$M,Cd,$M,Dd,$M,Ed,$M,Fd,$M,Gd,$M,Hd,$M,Id,$M,Jd,$M,Kd,$M,Ld,$M,Md,$M,Nd,$M,Od,$M,Pd,$M,Qd,$M,Rd,$M,Sd,$M,Td,$M,Ud,$M,Vd,$M,Wd,$M,Xd,$M,Yd,$M,Zd,$M,_d,$M,$d,$M,ae,$M,be,$M,ce,$M,de,$M,ee,$M,fe,$M,ge,$M,he,$M,ie,$M,je,$M,ke,$M,le,$M,me,$M,ne,$M,oe,$M,pe,$M,qe,$M,re,$M,se,$M,te,$M,ue,$M,ve,$M,we,$M,xe,$M,ye,$M,ze,$M,Ae,$M,Be,$M,Ce,$M,De,$M,Ee,$M,Fe,$M,Ge,$M,He,$M,Ie,$M,Je,$M,Ke,$M,Le,$M,Me,$M,Ne,$M,Oe,$M,Pe,$M,Qe,$M,Re,$M,Se,$M,Te,$M,Ue,$M,Ve,$M,We,$M,Xe,$M,Ye,$M,Ze,$M,_e,$M,$e,$M,af,$M,bf,$M,cf,$M,df,$M,ef,$M,ff,$M,gf,$M,hf,$M,jf,$M,kf,$M,lf,$M,mf,$M,nf,$M,of,$M,pf,$M,qf,$M,rf,$M,sf,$M,tf,$M,uf,$M,vf,$M,wf,$M,xf,$M,yf,$M,zf,$M,Af,$M,Bf,$M,Cf,$M,Df,$M,Ef,$M,Ff,$M,Gf,$M,Hf,$M,If,$M,Jf,$M,Kf,$M,Lf,$M,Mf,$M,Nf,$M,Of,$M,Pf,$M,Qf,$M,Rf,$M,Sf,$M,Tf,$M,Uf,$M,Vf,$M,Wf,$M,Xf,$M,Yf,$M,Zf,$M,_f,$M,$f,$M,ag,$M,bg,$M,cg,$M,dg,$M,eg,$M,fg,$M,gg,$M,hg,$M,ig,$M,jg,$M,kg,$M,lg,$M,mg,$M,ng,$M,og,$M,pg,$M,qg,$M,rg,$M,sg,$M,tg,$M,ug,$M,vg,$M,wg,$M,xg,$M,yg,$M,zg,$M,Ag,$M,Bg,$M,Cg,$M,Dg,$M,Eg,$M,Fg,$M,Gg,$M,Hg,$M,Ig,$M,Jg,$M,Kg,$M,Lg,$M,Mg,$M,Ng,$M,Og,$M,Pg,$M,Qg,$M,Rg,$M,Sg,$M,Tg,$M,Ug,$M,Vg,$M,Wg,$M,Xg,$M,Yg,$M,Zg,$M,_g,$M,$g,$M,ah,$M,bh,$M,ch,$M,dh,$M,eh,$M,fh,$M,gh,$M,hh,$M,ih,$M,jh,$M,kh,$M,lh,$M,mh,$M,nh,$M,oh,$M,ph,$M,qh,$M,rh,$M,sh,$M,th,$M,uh,$M,vh,$M,wh,$M,xh,$M,yh,$M,zh,$M,Ah,$M,Bh,$M,Ch,$M,Dh,$M,Eh,$M,Fh,$M,Gh,$M,Hh,$M,Ih,$M,Jh,$M,Kh,$M,Lh,$M,Mh,$M,Nh,$M,Oh,$M,Ph,$M,Qh,$M,Rh,$M,Sh,$M,Th,$M,Uh,$M,Vh,$M,Wh,$M,Xh,$M,Yh,$M,Zh,$M,_h,$M,$h,$M,ai,$M,bi,$M,ci,$M,di,$M,ei,$M,fi,$M,gi,$M,hi,$M,ii,$M,ji,$M,ki,$M,li,$M,mi,$M,ni,$M,oi,$M,pi,$M,qi,$M,ri,$M,si,$M,ti,$M,ui,$M,vi,$M,wi,$M,xi,$M,yi,$M,zi,$M,Ai,$M,Bi,$M,Ci,$M,Di,$M,Ei,$M,Fi,$M,Gi,$M,Hi,$M,Ii,$M,Ji,$M,Ki,$M,Li,$M,Mi,$M,Ni,$M,Oi,$M,Pi,$M,Qi,$M,Ri,$M,Si,$M,Ti,$M,Ui,$M,Vi,$M,Wi,$M,Xi,$M,Yi,$M,Zi,$M,_i,$M,$i,$M,aj,$M,bj,$M,cj,$M,dj,$M,ej,$M,fj,$M,gj,$M,hj,$M,ij,$M,jj,$M,kj,$M,lj,$M,mj,$M,nj,$M,oj,$M,pj,$M,qj,$M,rj,$M,sj,$M,tj,$M,uj,$M,vj,$M,wj,$M,xj,$M,yj,$M,zj,$M,Aj,$M,Bj,$M,Cj,$M,Dj,$M,Ej,$M,Fj,$M,Gj,$M,Hj,$M,Ij,$M,Jj,$M,Kj,$M,Lj,$M,Mj,$M,Nj,$M,Oj,$M,Pj,$M,Qj,$M,Rj,$M,Sj,$M,Tj,$M,Uj,$M,Vj,$M,Wj,$M,Xj,$M,Yj,$M,Zj,$M,_j,$M,$j,$M,ak,$M,bk,$M,ck,$M,dk,$M,ek,$M,fk,$M,gk,$M,hk,$M,ik,$M,jk,$M,kk,$M,lk,$M,mk,$M,nk,$M,ok,$M,pk,$M,qk,$M,rk,$M,sk,$M,tk,$M,uk,$M,vk,$M,wk,$M,xk,$M,yk,$M,zk,$M,Ak,$M,Bk,$M,Ck,$M,Dk,$M,Ek,$M,Fk,$M,Gk,$M,Hk,$M,Ik,$M,Jk,$M,Kk,$M,Lk,$M,Mk,$M,Nk,$M,Ok,$M,Pk,$M,Qk,$M,Rk,$M,Sk,$M,Tk,$M,Uk,$M,Vk,$M,Wk,$M,Xk,$M,Yk,$M,Zk,$M,_k,$M,$k,$M,al,$M,bl,$M,cl,$M,dl,$M,el,$M,fl,$M,gl,$M,hl,$M,il,$M,jl,$M,kl,$M,ll,$M,ml,$M,nl,$M,ol,$M,pl,$M,ql,$M,rl,$M,sl,$M,tl,$M,ul,$M,vl,$M,wl,$M,xl,$M,yl,$M,zl,$M,Al,$M,Bl,$M,Cl,$M,Dl,$M,El,$M,Fl,$M,Gl,$M,Hl,$M,Il,$M,Jl,$M,Kl,$M,Ll,$M,Ml,$M,Nl,$M,Ol,$M,Pl,$M,Ql,$M,Rl,$M,Sl,$M,Tl,$M,Ul,$M,Vl,$M,Wl,$M,Xl,$M,Yl,$M,Zl,$M,_l,$M,$l,$M,am,$M,bm,$M,cm,$M,dm,$M,em,$M,fm,$M,gm,$M,hm,$M,im,$M,jm,$M,km,$M,lm,$M,mm,$M,nm,$M,om,$M,pm,$M,qm,$M,rm,$M,sm,$M,tm,$M,um,$M,vm,$M,wm,$M,xm,$M,ym,$M,zm,$M,Am,$M,Bm,$M,Cm,$M,Dm,$M,Em,$M,Fm,$M,Gm,$M,Hm,$M,Im,$M,Jm,$M,Km,$M,Lm,$M,Mm,$M,Nm,$M,Om,$M,Pm,$M,Qm,$M,Rm,$M,Sm,$M,Tm,$M,Um,$M,Vm,$M,Wm,$M,Xm,$M,Ym,$M,Zm,$M,_m,$M,$m,$M,an,$M,bn,$M,cn,$M,dn,$M,en,$M,fn,$M,gn,$M,hn,$M,jn,$M,kn,$M,ln,$M,mn,$M,nn,$M,on,$M,pn,$M,qn,$M,rn,$M,sn,$M,tn,$M,un,$M,vn,$M,wn,$M,xn,$M,yn,$M,zn,$M,An,$M,Bn,$M,Cn,$M,Dn,$M,En,$M,Fn,$M,Gn,$M,Hn,$M,In,$M,Jn,$M,Kn,$M,Ln,$M,Mn,$M,Nn,$M,On,$M,Pn,$M,Qn,$M,Rn,$M,Sn,$M,Tn,$M,Un,$M,Vn,$M,Wn,$M,Xn,$M,Yn,$M,Zn,$M,_n,$M,$n,$M,ao,$M,bo,$M,co,$M,eo,$M,fo,$M,go,$M,ho,$M,io,$M,jo,$M,ko,$M,lo,$M,mo,$M,no,$M,oo,$M,po,$M,qo,$M,ro,$M,so,$M,to,$M,uo,$M,vo,$M,wo,$M,xo,$M,yo,$M,zo,$M,Ao,$M,Bo,$M,Co,$M,Do,$M,Eo,$M,Fo,$M,Go,$M,Ho,$M,Io,$M,Jo,$M,Ko,$M,Lo,$M,Mo,$M,No,$M,Oo,$M,Po,$M,Qo,$M,Ro,$M,So,$M,To,$M,Uo,$M,Vo,$M,Wo,$M,Xo,$M,Yo,$M,Zo,$M,_o,$M,$o,$M,ap,$M,bp,$M,cp,$M,dp,$M,ep,$M,fp,$M,gp,$M,hp,$M,ip,$M,jp,$M,kp,$M,lp,$M,mp,$M,np,$M,op,$M,pp,$M,qp,$M,rp,$M,sp,$M,tp,$M,up,$M,vp,$M,wp,$M,xp,$M,yp,$M,zp,$M,Ap,$M,Bp,$M,Cp,$M,Dp,$M,Ep,$M,Fp,$M,Gp,$M,Hp,$M,Ip,$M,Jp,$M,Kp,$M,Lp,$M,Mp,$M,Np,$M,Op,$M,Pp,$M,Qp,$M,Rp,$M,Sp,$M,Tp,$M,Up,$M,Vp,$M,Wp,$M,Xp,$M,Yp,$M,Zp,$M,_p,$M,$p,$M,aq,$M,bq,$M,cq,$M,dq,$M,eq,$M,fq,$M,gq,$M,hq,$M,iq,$M,jq,$M,kq,$M,lq,$M,mq,$M,nq,$M,oq,$M,pq,$M,qq,$M,rq,$M,sq,$M,tq,$M,uq,$M,vq,$M,wq,$M,xq,$M,yq,$M,zq,$M,Aq,$M,Bq,$M,Cq,$M,Dq,$M,Eq,$M,Fq,$M,Gq,$M,Hq,$M,Iq,$M,Jq,$M,Kq,$M,Lq,$M,Mq,$M,Nq,$M,Oq,$M,Pq,$M,Qq,$M,Rq,$M,Sq,$M,Tq,$M,Uq,$M,Vq,$M,Wq,$M,Xq,$M,Yq,$M,Zq,$M,_q,$M,$q,$M,ar,$M,br,$M,cr,$M,dr,$M,er,$M,fr,$M,gr,$M,hr,$M,ir,$M,jr,$M,kr,$M,lr,$M,mr,$M,nr,$M,or,$M,pr,$M,qr,$M,rr,$M,sr,$M,tr,$M,ur,$M,vr,$M,wr,$M,xr,$M,yr,$M,zr,$M,Ar,$M,Br,$M,Cr,$M,Dr,$M,Er,$M,Fr,$M,Gr,$M,Hr,$M,Ir,$M,Jr,$M,Kr,$M,Lr,$M,Mr,$M,Nr,$M,Or,$M,Pr,$M,Qr,$M,Rr,$M,Sr,$M,Tr,$M,Ur,$M,Vr,$M,Wr,$M,Xr,$M,Yr,$M,Zr,$M,_r,$M,$r,$M,as,$M,bs,$M,cs,$M,ds,$M,es,$M,fs,$M,gs,$M,hs,$M,is,$M,js,$M,ks,$M,ls,$M,ms,$M,ns,$M,os,$M,ps,$M,qs,$M,rs,$M,ss,$M,ts,$M,us,$M,vs,$M,ws,$M,xs,$M,ys,$M,zs,$M,As,$M,Bs,$M,Cs,$M,Ds,$M,Es,$M,Fs,$M,Gs,$M,Hs,$M,Is,$M,Js,$M,Ks,$M,Ls,$M,Ms,$M,Ns,$M,Os,$M,Ps,$M,Qs,$M,Rs,$M,Ss,$M,Ts,$M,Us,$M,Vs,$M,Ws,$M,Xs,$M,Ys,$M,Zs,$M,_s,$M,$s,$M,at,$M,bt,$M,ct,$M,dt,$M,et,$M,ft,$M,gt,$M,ht,$M,it,$M,jt,$M,kt,$M,lt,$M,mt,$M,nt,$M,ot,$M,pt,$M,qt,$M,rt,$M,st,$M,tt,$M,ut,$M,vt,$M,wt,$M,xt,$M,yt,$M,zt,$M,At,$M,Bt,$M,Ct,$M,Dt,$M,Et,$M,Ft,$M,Gt,$M,Ht,$M,It,$M,Jt,$M,Kt,$M,Lt,$M,Mt,$M,Nt,$M,Ot,$M,Pt,$M,Qt,$M,Rt,$M,St,$M,Tt,$M,Ut,$M,Vt,$M,Wt,$M,Xt,$M,Yt,$M,Zt,$M,_t,$M,$t,$M,Kavar ra=[aN,aN,bu,aN,cu,aN,du,aN,eu,aN,fu,aN,gu,aN,hu,aN,iu,aN,ju,aN,ku,aN,lu,aN,mu,aN,nu,aN,ou,aN,pu,aN,qu,aN,ru,aN,su,aN,tu,aN,uu,aN,vu,aN,wu,aN,xu,aN,yu,aN,zu,aN,Au,aN,Bu,aN,Cu,aN,Du,aN,Eu,aN,Fu,aN,Gu,aN,Hu,aN,Iu,aN,Ju,aN,Ku,aN,Lu,aN,Mu,aN,Nu,aN,Ou,aN,Pu,aN,Qu,aN,Ru,aN,Su,aN,Tu,aN,Uu,aN,Vu,aN,Wu,aN,Xu,aN,Yu,aN,Zu,aN,_u,aN,$u,aN,av,aN,bv,aN,cv,aN,dv,aN,ev,aN,fv,aN,gv,aN,hv,aN,iv,aN,jv,aN,kv,aN,lv,aN,mv,aN,nv,aN,ov,aN,pv,aN,qv,aN,rv,aN,sv,aN,tv,aN,uv,aN,vv,aN,wv,aN,xv,aN,yv,aN,zv,aN,Av,aN,Bv,aN,Cv,aN,Dv,aN,Ev,aN,Fv,aN,Gv,aN,Hv,aN,Iv,aN,Jv,aN,Kv,aN,Lv,aN,Mv,aN,Nv,aN,Ov,aN,Pv,aN,Qv,aN,Rv,aN,Sv,aN,Tv,aN,Uv,aN,Vv,aN,Wv,aN,Xv,aN,Yv,aN,Zv,aN,_v,aN,$v,aN,aw,aN,bw,aN,cw,aN,dw,aN,ew,aN,fw,aN,gw,aN,hw,aN,iw,aN,jw,aN,kw,aN,lw,aN,mw,aN,nw,aN,ow,aN,pw,aN,qw,aN,rw,aN,sw,aN,tw,aN,uw,aN,vw,aN,ww,aN,xw,aN,yw,aN,zw,aN,Aw,aN,Bw,aN,Cw,aN,Dw,aN,Ew,aN,Fw,aN,Gw,aN,Hw,aN,Iw,aN,Jw,aN,Kw,aN,Lw,aN,Mw,aN,Nw,aN,Ow,aN,Pw,aN,Qw,aN,Rw,aN,Sw,aN,Tw,aN,Uw,aN,Vw,aN,Ww,aN,Xw,aN,Yw,aN,Zw,aN,_w,aN,$w,aN,ax,aN,bx,aN,cx,aN,dx,aN,ex,aN,fx,aN,gx,aN,hx,aN,ix,aN,jx,aN,kx,aN,lx,aN,mx,aN,nx,aN,ox,aN,px,aN,qx,aN,rx,aN,sx,aN,tx,aN,ux,aN,vx,aN,wx,aN,xx,aN,yx,aN,zx,aN,Ax,aN,Bx,aN,Cx,aN,Dx,aN,Ex,aN,Fx,aN,Gx,aN,Hx,aN,Ix,aN,Jx,aN,Kx,aN,Lx,aN,Mx,aN,Nx,aN,Ox,aN,Px,aN,Qx,aN,Rx,aN,Sx,aN,Tx,aN,Ux,aN,Vx,aN,Wx,aN,Xx,aN,Yx,aN,Zx,aN,_x,aN,$x,aN,ay,aN,by,aN,cy,aN,dy,aN,ey,aN,fy,aN,gy,aN,hy,aN,iy,aN,jy,aN,ky,aN,ly,aN,my,aN,ny,aN,oy,aN,py,aN,qy,aN,ry,aN,sy,aN,ty,aN,uy,aN,vy,aN,wy,aN,xy,aN,yy,aN,zy,aN,Ay,aN,By,aN,Cy,aN,Dy,aN,Ey,aN,Fy,aN,Gy,aN,Hy,aN,Iy,aN,Jy,aN,Ky,aN,Ly,aN,My,aN,Ny,aN,Oy,aN,Py,aN,Qy,aN,Ry,aN,Sy,aN,Ty,aN,Uy,aN,Vy,aN,Wy,aN,Xy,aN,Yy,aN,Zy,aN,_y,aN,$y,aN,az,aN,bz,aN,cz,aN,dz,aN,ez,aN,fz,aN,gz,aN,hz,aN,iz,aN,jz,aN,kz,aN,lz,aN,mz,aN,nz,aN,oz,aN,pz,aN,qz,aN,rz,aN,sz,aN,tz,aN,uz,aN,vz,aN,wz,aN,xz,aN,yz,aN,zz,aN,Az,aN,Bz,aN,Cz,aN,Dz,aN,Ez,aN,Fz,aN,Gz,aN,Hz,aN,Iz,aN,Jz,aN,Kz,aN,Lz,aN,Mz,aN,Nz,aN,Oz,aN,Pz,aN,Qz,aN,Rz,aN,Sz,aN,Tz,aN,Uz,aN,Vz,aN,Wz,aN,Xz,aN,Yz,aN,Zz,aN,_z,aN,$z,aN,aA,aN,bA,aN,cA,aN,dA,aN,eA,aN,fA,aN,gA,aN,hA,aN,iA,aN,jA,aN,kA,aN,lA,aN,mA,aN,nA,aN,oA,aN,pA,aN,qA,aN,rA,aN,sA,aN,tA,aN,uA,aN,vA,aN,wA,aN,xA,aN,yA,aN,zA,aN,AA,aN,BA,aN,CA,aN,DA,aN,EA,aN,FA,aN,GA,aN,HA,aN,IA,aN,JA,aN,KA,aN,LA,aN,MA,aN,NA,aN,OA,aN,PA,aN,QA,aN,RA,aN,SA,aN,TA,aN,UA,aN,VA,aN,WA,aN,XA,aN,YA,aN,ZA,aN,_A,aN,$A,aN,aB,aN,bB,aN,cB,aN,dB,aN,eB,aN,fB,aN,gB,aN,hB,aN,iB,aN,jB,aN,kB,aN,lB,aN,mB,aN,nB,aN,oB,aN,pB,aN,qB,aN,rB,aN,sB,aN,tB,aN,uB,aN,vB,aN,wB,aN,xB,aN,yB,aN,zB,aN,AB,aN,BB,aN,CB,aN,DB,aN,EB,aN,FB,aN,GB,aN,HB,aN,IB,aN,JB,aN,KB,aN,LB,aN,MB,aN,NB,aN,OB,aN,PB,aN,QB,aN,RB,aN,SB,aN,TB,aN,UB,aN,VB,aN,WB,aN,XB,aN,YB,aN,ZB,aN,_B,aN,$B,aN,aC,aN,bC,aN,cC,aN,dC,aN,eC,aN,fC,aN,gC,aN,hC,aN,iC,aN,jC,aN,kC,aN,lC,aN,mC,aN,nC,aN,oC,aN,pC,aN,qC,aN,rC,aN,sC,aN,tC,aN,uC,aN,vC,aN,wC,aN,xC,aN,yC,aN,zC,aN,AC,aN,BC,aN,CC,aN,DC,aN,EC,aN,FC,aN,GC,aN,HC,aN,IC,aN,JC,aN,KC,aN,LC,aN,MC,aN,NC,aN,OC,aN,PC,aN,QC,aN,RC,aN,SC,aN,TC,aN,UC,aN,VC,aN,WC,aN,XC,aN,YC,aN,ZC,aN,_C,aN,$C,aN,aD,aN,bD,aN,cD,aN,dD,aN,eD,aN,fD,aN,gD,aN,hD,aN,iD,aN,jD,aN,kD,aN,lD,aN,mD,aN,nD,aN,oD,aN,pD,aN,qD,aN,rD,aN,sD,aN,tD,aN,uD,aN,vD,aN,wD,aN,xD,aN,yD,aN,zD,aN,AD,aN,BD,aN,CD,aN,DD,aN,ED,aN,FD,aN,GD,aN,HD,aN,ID,aN,JD,aN,KD,aN,LD,aN,MD,aN,ND,aN,OD,aN,PD,aN,QD,aN,RD,aN,SD,aN,TD,aN,UD,aN,VD,aN,WD,aN,XD,aN,YD,aN,ZD,aN,_D,aN,$D,aN,aE,aN,bE,aN,cE,aN,dE,aN,eE,aN,fE,aN,gE,aN,hE,aN,iE,aN,jE,aN,kE,aN,lE,aN,mE,aN,nE,aN,oE,aN,pE,aN,qE,aN,rE,aN,sE,aN,tE,aN,uE,aN,vE,aN,wE,aN,xE,aN,yE,aN,zE,aN,AE,aN,BE,aN,CE,aN,DE,aN,EE,aN,FE,aN,GE,aN,HE,aN,IE,aN,JE,aN,KE,aN,LE,aN,ME,aN,NE,aN,OE,aN,PE,aN,QE,aN,RE,aN,SE,aN,TE,aN,UE,aN,VE,aN,WE,aN,XE,aN,YE,aN,ZE,aN,_E,aN,$E,aN,aF,aN,bF,aN,cF,aN,dF,aN,eF,aN,fF,aN,gF,aN,hF,aN,iF,aN,jF,aN,kF,aN,lF,aN,mF,aN,nF,aN,oF,aN,pF,aN,qF,aN,rF,aN,sF,aN,tF,aN,uF,aN,vF,aN,wF,aN,xF,aN,yF,aN,zF,aN,AF,aN,BF,aN,CF,aN,DF,aN,EF,aN,FF,aN,GF,aN,HF,aN,IF,aN,JF,aN,KF,aN,LF,aN,MF,aN,NF,aN,OF,aN,PF,aN,QF,aN,RF,aN,SF,aN,TF,aN,UF,aN,VF,aN,WF,aN,XF,aN,YF,aN,ZF,aN,_F,aN,$F,aN,aG,aN,bG,aN,cG,aN,dG,aN,eG,aN,fG,aN,gG,aN,hG,aN,iG,aN,jG,aN,kG,aN,lG,aN,mG,aN,nG,aN,oG,aN,pG,aN,qG,aN,rG,aN,sG,aN,tG,aN,uG,aN,vG,aN,wG,aN,xG,aN,yG,aN,zG,aN,AG,aN,BG,aN,CG,aN,DG,aN,EG,aN,FG,aN,GG,aN,HG,aN,IG,aN,JG,aN,KG,aN,LG,aN,MG,aN,NG,aN,OG,aN,PG,aN,QG,aN,RG,aN,SG,aN,TG,aN,UG,aN,VG,aN,WG,aN,XG,aN,YG,aN,ZG,aN,_G,aN,$G,aN,aH,aN,bH,aN,cH,aN,dH,aN,eH,aN,fH,aN,gH,aN,hH,aN,iH,aN,jH,aN,kH,aN,lH,aN,mH,aN,nH,aN,oH,aN,pH,aN,qH,aN,rH,aN,sH,aN,tH,aN,uH,aN,vH,aN,wH,aN,xH,aN,yH,aN,zH,aN,AH,aN,BH,aN,CH,aN,DH,aN,EH,aN,FH,aN,GH,aN,HH,aN,IH,aN,JH,aN,KH,aN,LH,aN,MH,aN,NH,aN,OH,aN,PH,aN,QH,aN,RH,aN,SH,aN,TH,aN,UH,aN,VH,aN,WH,aN,XH,aN,YH,aN,ZH,aN,_H,aN,$H,aN,aI,aN,bI,aN,cI,aN,dI,aN,eI,aN,fI,aN,gI,aN,hI,aN,iI,aN,jI,aN,kI,aN,lI,aN,mI,aN,nI,aN,oI,aN,pI,aN,qI,aN,rI,aN,sI,aN,tI,aN,uI,aN,vI,aN,wI,aN,xI,aN,yI,aN,zI,aN,AI,aN,BI,aN,CI,aN,DI,aN,EI,aN,FI,aN,GI,aN,HI,aN,II,aN,JI,aN,KI,aN,LI,aN,MI,aN,NI,aN,OI,aN,PI,aN,QI,aN,RI,aN,SI,aN,TI,aN,UI,aN,VI,aN,WI,aN,XI,aN,YI,aN,ZI,aN,_I,aN,$I,aN,aJ,aN,bJ,aN,cJ,aN,dJ,aN,eJ,aN,fJ,aN,gJ,aN,hJ,aN,iJ,aN,jJ,aN,kJ,aN,lJ,aN,mJ,aN,nJ,aN,oJ,aN,pJ,aN,qJ,aN,rJ,aN,sJ,aN,tJ,aN,uJ,aN,vJ,aN,wJ,aN,xJ,aN,yJ,aN,zJ,aN,AJ,aN,BJ,aN,CJ,aN,DJ,aN,EJ,aN,FJ,aN,GJ,aN,HJ,aN,IJ,aN,JJ,aN,KJ,aN,LJ,aN,MJ,aN,NJ,aN,OJ,aN,PJ,aN,QJ,aN,RJ,aN,SJ,aN,TJ,aN,UJ,aN,VJ,aN,WJ,aN,XJ,aN,YJ,aN,ZJ,aN,_J,aN,$J,aN,aK,aN,bK,aN,cK,aN,dK,aN,eK,aN,fK,aN,gK,aN,hK,aN,iK,aN,jK,aN,kK,aN,lK,aN,mK,aN,nK,aN,oK,aN,pK,aN,qK,aN,rK,aN,sK,aN,tK,aN,uK,aN,vK,aN,wK,aN,xK,aN,yK,aN,zK,aN,AK,aN,BK,aN,CK,aN,DK,aN,EK,aN,FK,aN,GK,aN,HK,aN,IK,aN,JK,aN,KK,aN,LK,aN,MK,aN,NK,aN,OK,aN,PK,aN,QK,aN,RK,aN,SK,aN,TK,aN,UK,aN,VK,aN,WK,aN,XK,aN,YK,aN,ZK,aN,_K,aN,$K,aN,aL,aN,bL,aN,cL,aN,dL,aN,eL,aN,fL,aN,gL,aN,hL,aN,iL,aN,jL,aN,kL,aN,lL,aN,mL,aN,nL,aN,oL,aN,pL,aN,qL,aN,rL,aN,sL,aN,tL,aN,uL,aN,vL,aN,wL,aN,xL,aN,yL,aN,zL,aN,AL,aN,BL,aN,CL,aN,DL,aN,EL,aN,FL,aN,GL,aN,HL,aN,IL,aN,JL,aN,KL,aN,LL,aN,ML,aN,NL,aN,OL,aN,PL,aN,QL,aN,RL,aN,SL,aN,TL,aN,UL,aN,VL,aN,WL,aN,XL,aN,YL,aN,ZL,aN,_L,aN,$L,aN,aM,aN,bM,aN,cM,aN,dM,aN,eM,aN,fM,aN,gM,aN,hM,aN,iM,aN,jM,aN,kM,aN,lM,aN,mM,aN,nM,aN,oM,aN,pM,aN,qM,aN,rM,aN,sM,aN,tM,aN,uM,aN,vM,aN,wM,aN,xM,aN,yM,aN,zM,aN,AM,aN,BM,aN,CM,aN,DM,aN,EM,aN,FM,aN,GM,aN,HM,aN,IM,aN,JM,aN,KM,aN,LM,aN,MM,aN,NM,aN,OM,aN,PM,aN,QM,aN,RM,aN,SM,aN,TM,aN,UM,aN,VM,aN,WM,aN,XM,aN,YM,aN,ZM,aN,_M,aN,Ja,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN,aN];return{_NDL3_new:Ia,_malloc:Ua,_strlen:Ya,_free:Va,_NDL3_recv:Pa,_NDL3_elapse_time:Ta,_memset:Xa,_NDL3_setopt:Na,_NDL3_L2_push:Ra,_NDL3_close:Ma,_memcpy:Za,_NDL3_L2_pop:Qa,_NDL3_send:Oa,_NDL3_pop_error:Sa,_NDL3_open:La,runPostSets:Wa,stackAlloc:sa,stackSave:ta,stackRestore:ua,setThrew:va,setTempRet0:ya,setTempRet1:za,setTempRet2:Aa,setTempRet3:Ba,setTempRet4:Ca,setTempRet5:Da,setTempRet6:Ea,setTempRet7:Fa,setTempRet8:Ga,setTempRet9:Ha,dynCall_vii:_a,dynCall_iii:au}})


// EMSCRIPTEN_END_ASM
({ "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array }, { "abort": abort, "assert": assert, "asmPrintInt": asmPrintInt, "asmPrintFloat": asmPrintFloat, "min": Math_min, "jsCall": jsCall, "invoke_vii": invoke_vii, "invoke_iii": invoke_iii, "_fflush": _fflush, "_sysconf": _sysconf, "_abort": _abort, "___setErrNo": ___setErrNo, "_sbrk": _sbrk, "_time": _time, "_emscripten_memcpy_big": _emscripten_memcpy_big, "___assert_fail": ___assert_fail, "___errno_location": ___errno_location, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "NaN": NaN, "Infinity": Infinity }, buffer);
var _NDL3_new = Module["_NDL3_new"] = asm["_NDL3_new"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var _free = Module["_free"] = asm["_free"];
var _NDL3_recv = Module["_NDL3_recv"] = asm["_NDL3_recv"];
var _NDL3_elapse_time = Module["_NDL3_elapse_time"] = asm["_NDL3_elapse_time"];
var _memset = Module["_memset"] = asm["_memset"];
var _NDL3_setopt = Module["_NDL3_setopt"] = asm["_NDL3_setopt"];
var _NDL3_L2_push = Module["_NDL3_L2_push"] = asm["_NDL3_L2_push"];
var _NDL3_close = Module["_NDL3_close"] = asm["_NDL3_close"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _NDL3_L2_pop = Module["_NDL3_L2_pop"] = asm["_NDL3_L2_pop"];
var _NDL3_send = Module["_NDL3_send"] = asm["_NDL3_send"];
var _NDL3_pop_error = Module["_NDL3_pop_error"] = asm["_NDL3_pop_error"];
var _NDL3_open = Module["_NDL3_open"] = asm["_NDL3_open"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];

Runtime.stackAlloc = function(size) { return asm['stackAlloc'](size) };
Runtime.stackSave = function() { return asm['stackSave']() };
Runtime.stackRestore = function(top) { asm['stackRestore'](top) };


// Warning: printing of i64 values may be slightly rounded! No deep i64 math used, so precise i64 code not included
var i64Math = null;

// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, STATIC_BASE);
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      HEAPU8.set(data, STATIC_BASE);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun'] && shouldRunNow) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    if (!Module['noExitRuntime']) {
      exit(ret);
    }
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['_main'] && shouldRunNow) {
      Module['callMain'](args);
    }

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      if (!ABORT) doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  // TODO We should handle this differently based on environment.
  // In the browser, the best we can do is throw an exception
  // to halt execution, but in node we could process.exit and
  // I'd imagine SM shell would have something equivalent.
  // This would let us set a proper exit status (which
  // would be great for checking test exit statuses).
  // https://github.com/kripken/emscripten/issues/1371

  // throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.';

  throw 'abort() at ' + stackTrace() + extra;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}






